// This code conforms with the UFC specification version 2.0.5
// and was automatically generated by FFC version 1.0.0.
// 
// This code was generated with the following parameters:
// 
//   cache_dir:                      ''
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   False
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   False
//   format:                         'ufc'
//   log_level:                      25
//   log_prefix:                     ''
//   name:                           'ffc'
//   no-evaluate_basis_derivatives:  True
//   optimize:                       False
//   output_dir:                     '.'
//   precision:                      15
//   quadrature_degree:              -1
//   quadrature_rule:                'auto'
//   representation:                 'auto'
//   split:                          False
//   swig_binary:                    'swig2.0'
//   swig_path:                      ''

#ifndef __FFC_FORM_43436BC228D07FBB9EA74F5ECE59BB1CD8C61B2A_H
#define __FFC_FORM_43436BC228D07FBB9EA74F5ECE59BB1CD8C61B2A_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>

/// This class defines the interface for a finite element.

class ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Cell('triangle', Space(2)), 2, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 6;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Reset values.
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582064, 0.0544331053951817};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582063, 0.0544331053951818};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 6; r++)
    {
      evaluate_basis(r, &dof_values, coordinates, c);
      values[r] = dof_values;
    }// end loop over 'r'
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 6; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*x[1][0] + 0.5*x[2][0];
      y[1] = 0.5*x[1][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[2][0];
      y[1] = 0.5*x[0][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[1][0];
      y[1] = 0.5*x[0][1] + 0.5*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5*x[1][0] + 0.5*x[2][0];
    y[1] = 0.5*x[1][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*x[0][0] + 0.5*x[2][0];
    y[1] = 0.5*x[0][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*x[0][0] + 0.5*x[1][0];
    y[1] = 0.5*x[0][1] + 0.5*x[1][1];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "VectorElement('Lagrange', Cell('triangle', Space(2)), 2, 2, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 12;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Reset values.
    values[0] = 0.0;
    values[1] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582064, 0.0544331053951817};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582063, 0.0544331053951818};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582064, 0.0544331053951817};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582063, 0.0544331053951818};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {0.0, 0.0};
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 12; r++)
    {
      evaluate_basis(r, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 2; s++)
      {
        values[r*2 + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[2*num_derivatives];
    for (unsigned int r = 0; r < 2*num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 12; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[2];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*x[1][0] + 0.5*x[2][0];
      y[1] = 0.5*x[1][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[2][0];
      y[1] = 0.5*x[0][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[1][0];
      y[1] = 0.5*x[0][1] + 0.5*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 9:
      {
        y[0] = 0.5*x[1][0] + 0.5*x[2][0];
      y[1] = 0.5*x[1][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 10:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[2][0];
      y[1] = 0.5*x[0][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 11:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[1][0];
      y[1] = 0.5*x[0][1] + 0.5*x[1][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[2];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5*x[1][0] + 0.5*x[2][0];
    y[1] = 0.5*x[1][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*x[0][0] + 0.5*x[2][0];
    y[1] = 0.5*x[0][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*x[0][0] + 0.5*x[1][0];
    y[1] = 0.5*x[0][1] + 0.5*x[1][1];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = 0.5*x[1][0] + 0.5*x[2][0];
    y[1] = 0.5*x[1][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = 0.5*x[0][0] + 0.5*x[2][0];
    y[1] = 0.5*x[0][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = 0.5*x[0][0] + 0.5*x[1][0];
    y[1] = 0.5*x[0][1] + 0.5*x[1][1];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[6];
    vertex_values[3] = dof_values[7];
    vertex_values[5] = dof_values[8];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 2;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_finite_element_0();
        break;
      }
    case 1:
      {
        return new ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_finite_element_1();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_finite_element_2: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_finite_element_2()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 3;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Reset values.
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 3; r++)
    {
      evaluate_basis(r, &dof_values, coordinates, c);
      values[r] = dof_values;
    }// end loop over 'r'
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 3; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_finite_element_2();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_finite_element_3: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_finite_element_3()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "MixedElement(*[VectorElement('Lagrange', Cell('triangle', Space(2)), 2, 2, None), FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None)], **{'value_shape': (3,) })";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 15;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Reset values.
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582064, 0.0544331053951817};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582063, 0.0544331053951818};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582064, 0.0544331053951817};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582063, 0.0544331053951818};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 15; r++)
    {
      evaluate_basis(r, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 3; s++)
      {
        values[r*3 + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[3*num_derivatives];
    for (unsigned int r = 0; r < 3*num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 15; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[3];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*x[1][0] + 0.5*x[2][0];
      y[1] = 0.5*x[1][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[2][0];
      y[1] = 0.5*x[0][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[1][0];
      y[1] = 0.5*x[0][1] + 0.5*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 9:
      {
        y[0] = 0.5*x[1][0] + 0.5*x[2][0];
      y[1] = 0.5*x[1][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 10:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[2][0];
      y[1] = 0.5*x[0][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 11:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[1][0];
      y[1] = 0.5*x[0][1] + 0.5*x[1][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 12:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 13:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 14:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[3];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5*x[1][0] + 0.5*x[2][0];
    y[1] = 0.5*x[1][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*x[0][0] + 0.5*x[2][0];
    y[1] = 0.5*x[0][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*x[0][0] + 0.5*x[1][0];
    y[1] = 0.5*x[0][1] + 0.5*x[1][1];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = 0.5*x[1][0] + 0.5*x[2][0];
    y[1] = 0.5*x[1][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = 0.5*x[0][0] + 0.5*x[2][0];
    y[1] = 0.5*x[0][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = 0.5*x[0][0] + 0.5*x[1][0];
    y[1] = 0.5*x[0][1] + 0.5*x[1][1];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[12] = vals[2];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[13] = vals[2];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[14] = vals[2];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[6];
    vertex_values[4] = dof_values[7];
    vertex_values[7] = dof_values[8];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[12];
    vertex_values[5] = dof_values[13];
    vertex_values[8] = dof_values[14];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 2;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_finite_element_1();
        break;
      }
    case 1:
      {
        return new ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_finite_element_2();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_finite_element_3();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_dofmap_0: public ufc::dofmap
{
private:

  unsigned int _global_dimension;
public:

  /// Constructor
  ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_dofmap_0() : ufc::dofmap()
  {
    _global_dimension = 0;
  }

  /// Destructor
  virtual ~ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_dofmap_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Cell('triangle', Space(2)), 2, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Initialize dofmap for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    _global_dimension = m.num_entities[0] + m.num_entities[1];
    return false;
  }

  /// Initialize dofmap for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dofmap for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the topological dimension of the associated cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return _global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 6;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 6;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 3;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 1;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
    dofs[3] = offset + c.entity_indices[1][0];
    dofs[4] = offset + c.entity_indices[1][1];
    dofs[5] = offset + c.entity_indices[1][2];
    offset += m.num_entities[1];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 4;
          break;
        }
      case 2:
        {
          dofs[0] = 5;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[3][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[4][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[4][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[5][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[5][1] = 0.5*x[0][1] + 0.5*x[1][1];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual unsigned int num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_dofmap_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_dofmap_1: public ufc::dofmap
{
private:

  unsigned int _global_dimension;
public:

  /// Constructor
  ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_dofmap_1() : ufc::dofmap()
  {
    _global_dimension = 0;
  }

  /// Destructor
  virtual ~ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_dofmap_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for VectorElement('Lagrange', Cell('triangle', Space(2)), 2, 2, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Initialize dofmap for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    _global_dimension = 2*m.num_entities[0] + 2*m.num_entities[1];
    return false;
  }

  /// Initialize dofmap for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dofmap for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the topological dimension of the associated cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return _global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 12;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 12;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 6;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return 2;
        break;
      }
    case 1:
      {
        return 2;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
    dofs[3] = offset + c.entity_indices[1][0];
    dofs[4] = offset + c.entity_indices[1][1];
    dofs[5] = offset + c.entity_indices[1][2];
    offset += m.num_entities[1];
    dofs[6] = offset + c.entity_indices[0][0];
    dofs[7] = offset + c.entity_indices[0][1];
    dofs[8] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
    dofs[9] = offset + c.entity_indices[1][0];
    dofs[10] = offset + c.entity_indices[1][1];
    dofs[11] = offset + c.entity_indices[1][2];
    offset += m.num_entities[1];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
      dofs[3] = 6;
      dofs[4] = 8;
      dofs[5] = 10;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
      dofs[3] = 6;
      dofs[4] = 7;
      dofs[5] = 11;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 6;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 7;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 8;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 9;
          break;
        }
      case 1:
        {
          dofs[0] = 4;
        dofs[1] = 10;
          break;
        }
      case 2:
        {
          dofs[0] = 5;
        dofs[1] = 11;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[3][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[4][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[4][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[5][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[5][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[6][0] = x[0][0];
    coordinates[6][1] = x[0][1];
    coordinates[7][0] = x[1][0];
    coordinates[7][1] = x[1][1];
    coordinates[8][0] = x[2][0];
    coordinates[8][1] = x[2][1];
    coordinates[9][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[9][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[10][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[10][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[11][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[11][1] = 0.5*x[0][1] + 0.5*x[1][1];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual unsigned int num_sub_dofmaps() const
  {
    return 2;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_dofmap_0();
        break;
      }
    case 1:
      {
        return new ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_dofmap_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_dofmap_2: public ufc::dofmap
{
private:

  unsigned int _global_dimension;
public:

  /// Constructor
  ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_dofmap_2() : ufc::dofmap()
  {
    _global_dimension = 0;
  }

  /// Destructor
  virtual ~ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_dofmap_2()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Initialize dofmap for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    _global_dimension = m.num_entities[0];
    return false;
  }

  /// Initialize dofmap for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dofmap for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the topological dimension of the associated cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return _global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 3;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 3;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 2;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual unsigned int num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_dofmap_2();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_dofmap_3: public ufc::dofmap
{
private:

  unsigned int _global_dimension;
public:

  /// Constructor
  ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_dofmap_3() : ufc::dofmap()
  {
    _global_dimension = 0;
  }

  /// Destructor
  virtual ~ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_dofmap_3()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for MixedElement(*[VectorElement('Lagrange', Cell('triangle', Space(2)), 2, 2, None), FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None)], **{'value_shape': (3,) })";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Initialize dofmap for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    _global_dimension = 3*m.num_entities[0] + 2*m.num_entities[1];
    return false;
  }

  /// Initialize dofmap for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dofmap for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the topological dimension of the associated cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return _global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 15;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 15;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 8;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return 3;
        break;
      }
    case 1:
      {
        return 2;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
    dofs[3] = offset + c.entity_indices[1][0];
    dofs[4] = offset + c.entity_indices[1][1];
    dofs[5] = offset + c.entity_indices[1][2];
    offset += m.num_entities[1];
    dofs[6] = offset + c.entity_indices[0][0];
    dofs[7] = offset + c.entity_indices[0][1];
    dofs[8] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
    dofs[9] = offset + c.entity_indices[1][0];
    dofs[10] = offset + c.entity_indices[1][1];
    dofs[11] = offset + c.entity_indices[1][2];
    offset += m.num_entities[1];
    dofs[12] = offset + c.entity_indices[0][0];
    dofs[13] = offset + c.entity_indices[0][1];
    dofs[14] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
      dofs[6] = 13;
      dofs[7] = 14;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
      dofs[3] = 6;
      dofs[4] = 8;
      dofs[5] = 10;
      dofs[6] = 12;
      dofs[7] = 14;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
      dofs[3] = 6;
      dofs[4] = 7;
      dofs[5] = 11;
      dofs[6] = 12;
      dofs[7] = 13;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 6;
        dofs[2] = 12;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 7;
        dofs[2] = 13;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 8;
        dofs[2] = 14;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 9;
          break;
        }
      case 1:
        {
          dofs[0] = 4;
        dofs[1] = 10;
          break;
        }
      case 2:
        {
          dofs[0] = 5;
        dofs[1] = 11;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[3][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[4][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[4][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[5][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[5][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[6][0] = x[0][0];
    coordinates[6][1] = x[0][1];
    coordinates[7][0] = x[1][0];
    coordinates[7][1] = x[1][1];
    coordinates[8][0] = x[2][0];
    coordinates[8][1] = x[2][1];
    coordinates[9][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[9][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[10][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[10][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[11][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[11][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[12][0] = x[0][0];
    coordinates[12][1] = x[0][1];
    coordinates[13][0] = x[1][0];
    coordinates[13][1] = x[1][1];
    coordinates[14][0] = x[2][0];
    coordinates[14][1] = x[2][1];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual unsigned int num_sub_dofmaps() const
  {
    return 2;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_dofmap_1();
        break;
      }
    case 1:
      {
        return new ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_dofmap_2();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_dofmap_3();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_cell_integral_0_0: public ufc::cell_integral
{
public:

  /// Constructor
  ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_cell_integral_0_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_cell_integral_0_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Number of operations (multiply-add pairs) for Jacobian data:      11
    // Number of operations (multiply-add pairs) for geometry tensor:    248
    // Number of operations (multiply-add pairs) for tensor contraction: 4992
    // Total number of operations (multiply-add pairs):                  5251
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute geometry tensor
    const double G0_0_0 = det*w[0][0]*w[0][0]*(1.0);
    const double G0_0_1 = det*w[0][0]*w[0][1]*(1.0);
    const double G0_0_2 = det*w[0][0]*w[0][2]*(1.0);
    const double G0_0_3 = det*w[0][0]*w[0][3]*(1.0);
    const double G0_0_4 = det*w[0][0]*w[0][4]*(1.0);
    const double G0_0_5 = det*w[0][0]*w[0][5]*(1.0);
    const double G0_1_0 = det*w[0][1]*w[0][0]*(1.0);
    const double G0_1_1 = det*w[0][1]*w[0][1]*(1.0);
    const double G0_1_2 = det*w[0][1]*w[0][2]*(1.0);
    const double G0_1_3 = det*w[0][1]*w[0][3]*(1.0);
    const double G0_1_4 = det*w[0][1]*w[0][4]*(1.0);
    const double G0_1_5 = det*w[0][1]*w[0][5]*(1.0);
    const double G0_2_0 = det*w[0][2]*w[0][0]*(1.0);
    const double G0_2_1 = det*w[0][2]*w[0][1]*(1.0);
    const double G0_2_2 = det*w[0][2]*w[0][2]*(1.0);
    const double G0_2_3 = det*w[0][2]*w[0][3]*(1.0);
    const double G0_2_4 = det*w[0][2]*w[0][4]*(1.0);
    const double G0_2_5 = det*w[0][2]*w[0][5]*(1.0);
    const double G0_3_0 = det*w[0][3]*w[0][0]*(1.0);
    const double G0_3_1 = det*w[0][3]*w[0][1]*(1.0);
    const double G0_3_2 = det*w[0][3]*w[0][2]*(1.0);
    const double G0_3_3 = det*w[0][3]*w[0][3]*(1.0);
    const double G0_3_4 = det*w[0][3]*w[0][4]*(1.0);
    const double G0_3_5 = det*w[0][3]*w[0][5]*(1.0);
    const double G0_4_0 = det*w[0][4]*w[0][0]*(1.0);
    const double G0_4_1 = det*w[0][4]*w[0][1]*(1.0);
    const double G0_4_2 = det*w[0][4]*w[0][2]*(1.0);
    const double G0_4_3 = det*w[0][4]*w[0][3]*(1.0);
    const double G0_4_4 = det*w[0][4]*w[0][4]*(1.0);
    const double G0_4_5 = det*w[0][4]*w[0][5]*(1.0);
    const double G0_5_0 = det*w[0][5]*w[0][0]*(1.0);
    const double G0_5_1 = det*w[0][5]*w[0][1]*(1.0);
    const double G0_5_2 = det*w[0][5]*w[0][2]*(1.0);
    const double G0_5_3 = det*w[0][5]*w[0][3]*(1.0);
    const double G0_5_4 = det*w[0][5]*w[0][4]*(1.0);
    const double G0_5_5 = det*w[0][5]*w[0][5]*(1.0);
    const double G1_0_0 = det*w[0][0]*w[1][0]*(1.0);
    const double G1_0_1 = det*w[0][0]*w[1][1]*(1.0);
    const double G1_0_2 = det*w[0][0]*w[1][2]*(1.0);
    const double G1_0_3 = det*w[0][0]*w[1][3]*(1.0);
    const double G1_0_4 = det*w[0][0]*w[1][4]*(1.0);
    const double G1_0_5 = det*w[0][0]*w[1][5]*(1.0);
    const double G1_1_0 = det*w[0][1]*w[1][0]*(1.0);
    const double G1_1_1 = det*w[0][1]*w[1][1]*(1.0);
    const double G1_1_2 = det*w[0][1]*w[1][2]*(1.0);
    const double G1_1_3 = det*w[0][1]*w[1][3]*(1.0);
    const double G1_1_4 = det*w[0][1]*w[1][4]*(1.0);
    const double G1_1_5 = det*w[0][1]*w[1][5]*(1.0);
    const double G1_2_0 = det*w[0][2]*w[1][0]*(1.0);
    const double G1_2_1 = det*w[0][2]*w[1][1]*(1.0);
    const double G1_2_2 = det*w[0][2]*w[1][2]*(1.0);
    const double G1_2_3 = det*w[0][2]*w[1][3]*(1.0);
    const double G1_2_4 = det*w[0][2]*w[1][4]*(1.0);
    const double G1_2_5 = det*w[0][2]*w[1][5]*(1.0);
    const double G1_3_0 = det*w[0][3]*w[1][0]*(1.0);
    const double G1_3_1 = det*w[0][3]*w[1][1]*(1.0);
    const double G1_3_2 = det*w[0][3]*w[1][2]*(1.0);
    const double G1_3_3 = det*w[0][3]*w[1][3]*(1.0);
    const double G1_3_4 = det*w[0][3]*w[1][4]*(1.0);
    const double G1_3_5 = det*w[0][3]*w[1][5]*(1.0);
    const double G1_4_0 = det*w[0][4]*w[1][0]*(1.0);
    const double G1_4_1 = det*w[0][4]*w[1][1]*(1.0);
    const double G1_4_2 = det*w[0][4]*w[1][2]*(1.0);
    const double G1_4_3 = det*w[0][4]*w[1][3]*(1.0);
    const double G1_4_4 = det*w[0][4]*w[1][4]*(1.0);
    const double G1_4_5 = det*w[0][4]*w[1][5]*(1.0);
    const double G1_5_0 = det*w[0][5]*w[1][0]*(1.0);
    const double G1_5_1 = det*w[0][5]*w[1][1]*(1.0);
    const double G1_5_2 = det*w[0][5]*w[1][2]*(1.0);
    const double G1_5_3 = det*w[0][5]*w[1][3]*(1.0);
    const double G1_5_4 = det*w[0][5]*w[1][4]*(1.0);
    const double G1_5_5 = det*w[0][5]*w[1][5]*(1.0);
    const double G2_0_0 = det*w[1][0]*w[0][0]*(1.0);
    const double G2_0_1 = det*w[1][0]*w[0][1]*(1.0);
    const double G2_0_2 = det*w[1][0]*w[0][2]*(1.0);
    const double G2_0_3 = det*w[1][0]*w[0][3]*(1.0);
    const double G2_0_4 = det*w[1][0]*w[0][4]*(1.0);
    const double G2_0_5 = det*w[1][0]*w[0][5]*(1.0);
    const double G2_1_0 = det*w[1][1]*w[0][0]*(1.0);
    const double G2_1_1 = det*w[1][1]*w[0][1]*(1.0);
    const double G2_1_2 = det*w[1][1]*w[0][2]*(1.0);
    const double G2_1_3 = det*w[1][1]*w[0][3]*(1.0);
    const double G2_1_4 = det*w[1][1]*w[0][4]*(1.0);
    const double G2_1_5 = det*w[1][1]*w[0][5]*(1.0);
    const double G2_2_0 = det*w[1][2]*w[0][0]*(1.0);
    const double G2_2_1 = det*w[1][2]*w[0][1]*(1.0);
    const double G2_2_2 = det*w[1][2]*w[0][2]*(1.0);
    const double G2_2_3 = det*w[1][2]*w[0][3]*(1.0);
    const double G2_2_4 = det*w[1][2]*w[0][4]*(1.0);
    const double G2_2_5 = det*w[1][2]*w[0][5]*(1.0);
    const double G2_3_0 = det*w[1][3]*w[0][0]*(1.0);
    const double G2_3_1 = det*w[1][3]*w[0][1]*(1.0);
    const double G2_3_2 = det*w[1][3]*w[0][2]*(1.0);
    const double G2_3_3 = det*w[1][3]*w[0][3]*(1.0);
    const double G2_3_4 = det*w[1][3]*w[0][4]*(1.0);
    const double G2_3_5 = det*w[1][3]*w[0][5]*(1.0);
    const double G2_4_0 = det*w[1][4]*w[0][0]*(1.0);
    const double G2_4_1 = det*w[1][4]*w[0][1]*(1.0);
    const double G2_4_2 = det*w[1][4]*w[0][2]*(1.0);
    const double G2_4_3 = det*w[1][4]*w[0][3]*(1.0);
    const double G2_4_4 = det*w[1][4]*w[0][4]*(1.0);
    const double G2_4_5 = det*w[1][4]*w[0][5]*(1.0);
    const double G2_5_0 = det*w[1][5]*w[0][0]*(1.0);
    const double G2_5_1 = det*w[1][5]*w[0][1]*(1.0);
    const double G2_5_2 = det*w[1][5]*w[0][2]*(1.0);
    const double G2_5_3 = det*w[1][5]*w[0][3]*(1.0);
    const double G2_5_4 = det*w[1][5]*w[0][4]*(1.0);
    const double G2_5_5 = det*w[1][5]*w[0][5]*(1.0);
    const double G3_0_0 = det*w[1][0]*w[1][0]*(1.0);
    const double G3_0_1 = det*w[1][0]*w[1][1]*(1.0);
    const double G3_0_2 = det*w[1][0]*w[1][2]*(1.0);
    const double G3_0_3 = det*w[1][0]*w[1][3]*(1.0);
    const double G3_0_4 = det*w[1][0]*w[1][4]*(1.0);
    const double G3_0_5 = det*w[1][0]*w[1][5]*(1.0);
    const double G3_1_0 = det*w[1][1]*w[1][0]*(1.0);
    const double G3_1_1 = det*w[1][1]*w[1][1]*(1.0);
    const double G3_1_2 = det*w[1][1]*w[1][2]*(1.0);
    const double G3_1_3 = det*w[1][1]*w[1][3]*(1.0);
    const double G3_1_4 = det*w[1][1]*w[1][4]*(1.0);
    const double G3_1_5 = det*w[1][1]*w[1][5]*(1.0);
    const double G3_2_0 = det*w[1][2]*w[1][0]*(1.0);
    const double G3_2_1 = det*w[1][2]*w[1][1]*(1.0);
    const double G3_2_2 = det*w[1][2]*w[1][2]*(1.0);
    const double G3_2_3 = det*w[1][2]*w[1][3]*(1.0);
    const double G3_2_4 = det*w[1][2]*w[1][4]*(1.0);
    const double G3_2_5 = det*w[1][2]*w[1][5]*(1.0);
    const double G3_3_0 = det*w[1][3]*w[1][0]*(1.0);
    const double G3_3_1 = det*w[1][3]*w[1][1]*(1.0);
    const double G3_3_2 = det*w[1][3]*w[1][2]*(1.0);
    const double G3_3_3 = det*w[1][3]*w[1][3]*(1.0);
    const double G3_3_4 = det*w[1][3]*w[1][4]*(1.0);
    const double G3_3_5 = det*w[1][3]*w[1][5]*(1.0);
    const double G3_4_0 = det*w[1][4]*w[1][0]*(1.0);
    const double G3_4_1 = det*w[1][4]*w[1][1]*(1.0);
    const double G3_4_2 = det*w[1][4]*w[1][2]*(1.0);
    const double G3_4_3 = det*w[1][4]*w[1][3]*(1.0);
    const double G3_4_4 = det*w[1][4]*w[1][4]*(1.0);
    const double G3_4_5 = det*w[1][4]*w[1][5]*(1.0);
    const double G3_5_0 = det*w[1][5]*w[1][0]*(1.0);
    const double G3_5_1 = det*w[1][5]*w[1][1]*(1.0);
    const double G3_5_2 = det*w[1][5]*w[1][2]*(1.0);
    const double G3_5_3 = det*w[1][5]*w[1][3]*(1.0);
    const double G3_5_4 = det*w[1][5]*w[1][4]*(1.0);
    const double G3_5_5 = det*w[1][5]*w[1][5]*(1.0);
    const double G4_0 = det*K_00*(1.0);
    const double G4_1 = det*K_10*(1.0);
    const double G5_0 = det*K_01*(1.0);
    const double G5_1 = det*K_11*(1.0);
    const double G6_0_0 = det*K_00*K_00*(1.0);
    const double G6_0_1 = det*K_00*K_10*(1.0);
    const double G6_1_0 = det*K_10*K_00*(1.0);
    const double G6_1_1 = det*K_10*K_10*(1.0);
    const double G7_0_0 = det*K_00*K_00*(1.0);
    const double G7_0_1 = det*K_00*K_10*(1.0);
    const double G7_1_0 = det*K_10*K_00*(1.0);
    const double G7_1_1 = det*K_10*K_10*(1.0);
    const double G8_0_0 = det*K_01*K_01*(1.0);
    const double G8_0_1 = det*K_01*K_11*(1.0);
    const double G8_1_0 = det*K_11*K_01*(1.0);
    const double G8_1_1 = det*K_11*K_11*(1.0);
    const double G9_0_0 = det*K_01*K_01*(1.0);
    const double G9_0_1 = det*K_01*K_11*(1.0);
    const double G9_1_0 = det*K_11*K_01*(1.0);
    const double G9_1_1 = det*K_11*K_11*(1.0);
    const double G10_0 = det*K_00*(1.0);
    const double G10_1 = det*K_10*(1.0);
    const double G11_0 = det*K_01*(1.0);
    const double G11_1 = det*K_11*(1.0);
    
    // Compute element tensor
    A[0] = 0.00476190476190473*G0_0_0 - 0.000396825396825395*G0_0_1 - 0.000396825396825395*G0_0_2 + 0.00158730158730158*G0_0_4 + 0.00158730158730158*G0_0_5 - 0.000396825396825395*G0_1_0 + 0.000158730158730158*G0_1_1 + 2.64550264550264e-05*G0_1_2 - 5.29100529100527e-05*G0_1_3 - 0.000264550264550264*G0_1_4 - 0.000264550264550263*G0_1_5 - 0.000396825396825395*G0_2_0 + 2.64550264550264e-05*G0_2_1 + 0.000158730158730158*G0_2_2 - 5.29100529100529e-05*G0_2_3 - 0.000264550264550263*G0_2_4 - 0.000264550264550264*G0_2_5 - 5.29100529100527e-05*G0_3_1 - 5.29100529100529e-05*G0_3_2 + 0.000634920634920633*G0_3_3 + 0.000529100529100528*G0_3_4 + 0.000529100529100528*G0_3_5 + 0.00158730158730158*G0_4_0 - 0.000264550264550264*G0_4_1 - 0.000264550264550263*G0_4_2 + 0.000529100529100528*G0_4_3 + 0.00211640211640211*G0_4_4 + 0.00105820105820105*G0_4_5 + 0.00158730158730158*G0_5_0 - 0.000264550264550263*G0_5_1 - 0.000264550264550264*G0_5_2 + 0.000529100529100528*G0_5_3 + 0.00105820105820105*G0_5_4 + 0.00211640211640211*G0_5_5 + 0.00199999999999999*G6_0_0 + 0.00199999999999999*G6_0_1 + 0.00199999999999999*G6_1_0 + 0.00199999999999999*G6_1_1 + 0.00199999999999999*G8_0_0 + 0.00199999999999999*G8_0_1 + 0.00199999999999999*G8_1_0 + 0.00199999999999999*G8_1_1;
    A[1] = -0.000396825396825395*G0_0_0 + 0.000158730158730158*G0_0_1 + 2.64550264550264e-05*G0_0_2 - 5.29100529100527e-05*G0_0_3 - 0.000264550264550264*G0_0_4 - 0.000264550264550263*G0_0_5 + 0.000158730158730158*G0_1_0 - 0.000396825396825395*G0_1_1 + 2.64550264550264e-05*G0_1_2 - 0.000264550264550264*G0_1_3 - 5.29100529100527e-05*G0_1_4 - 0.000264550264550263*G0_1_5 + 2.64550264550264e-05*G0_2_0 + 2.64550264550264e-05*G0_2_1 + 2.64550264550262e-05*G0_2_2 + 0.000105820105820105*G0_2_3 + 0.000105820105820105*G0_2_4 + 0.000105820105820105*G0_2_5 - 5.29100529100527e-05*G0_3_0 - 0.000264550264550264*G0_3_1 + 0.000105820105820105*G0_3_2 + 0.000105820105820105*G0_3_3 + 0.000211640211640211*G0_3_4 - 0.000105820105820105*G0_3_5 - 0.000264550264550264*G0_4_0 - 5.29100529100527e-05*G0_4_1 + 0.000105820105820105*G0_4_2 + 0.000211640211640211*G0_4_3 + 0.000105820105820105*G0_4_4 - 0.000105820105820105*G0_4_5 - 0.000264550264550263*G0_5_0 - 0.000264550264550263*G0_5_1 + 0.000105820105820105*G0_5_2 - 0.000105820105820105*G0_5_3 - 0.000105820105820105*G0_5_4 - 0.000952380952380948*G0_5_5 + 0.000666666666666663*G6_0_0 + 0.000666666666666664*G6_1_0 + 0.000666666666666663*G8_0_0 + 0.000666666666666664*G8_1_0;
    A[2] = -0.000396825396825395*G0_0_0 + 2.64550264550264e-05*G0_0_1 + 0.000158730158730158*G0_0_2 - 5.29100529100529e-05*G0_0_3 - 0.000264550264550263*G0_0_4 - 0.000264550264550264*G0_0_5 + 2.64550264550264e-05*G0_1_0 + 2.64550264550264e-05*G0_1_1 + 2.64550264550262e-05*G0_1_2 + 0.000105820105820105*G0_1_3 + 0.000105820105820105*G0_1_4 + 0.000105820105820105*G0_1_5 + 0.000158730158730158*G0_2_0 + 2.64550264550262e-05*G0_2_1 - 0.000396825396825395*G0_2_2 - 0.000264550264550263*G0_2_3 - 0.000264550264550263*G0_2_4 - 5.29100529100528e-05*G0_2_5 - 5.29100529100529e-05*G0_3_0 + 0.000105820105820105*G0_3_1 - 0.000264550264550263*G0_3_2 + 0.000105820105820106*G0_3_3 - 0.000105820105820105*G0_3_4 + 0.000211640211640211*G0_3_5 - 0.000264550264550263*G0_4_0 + 0.000105820105820105*G0_4_1 - 0.000264550264550263*G0_4_2 - 0.000105820105820105*G0_4_3 - 0.000952380952380949*G0_4_4 - 0.000105820105820105*G0_4_5 - 0.000264550264550264*G0_5_0 + 0.000105820105820105*G0_5_1 - 5.29100529100528e-05*G0_5_2 + 0.000211640211640211*G0_5_3 - 0.000105820105820105*G0_5_4 + 0.000105820105820106*G0_5_5 + 0.000666666666666663*G6_0_1 + 0.000666666666666663*G6_1_1 + 0.000666666666666663*G8_0_1 + 0.000666666666666663*G8_1_1;
    A[3] = -5.29100529100527e-05*G0_0_1 - 5.29100529100529e-05*G0_0_2 + 0.000634920634920633*G0_0_3 + 0.000529100529100528*G0_0_4 + 0.000529100529100528*G0_0_5 - 5.29100529100527e-05*G0_1_0 - 0.000264550264550264*G0_1_1 + 0.000105820105820105*G0_1_2 + 0.000105820105820105*G0_1_3 + 0.000211640211640211*G0_1_4 - 0.000105820105820105*G0_1_5 - 5.29100529100529e-05*G0_2_0 + 0.000105820105820105*G0_2_1 - 0.000264550264550263*G0_2_2 + 0.000105820105820106*G0_2_3 - 0.000105820105820105*G0_2_4 + 0.000211640211640211*G0_2_5 + 0.000634920634920633*G0_3_0 + 0.000105820105820105*G0_3_1 + 0.000105820105820106*G0_3_2 - 0.0038095238095238*G0_3_3 - 0.00169312169312169*G0_3_4 - 0.00169312169312169*G0_3_5 + 0.000529100529100528*G0_4_0 + 0.000211640211640211*G0_4_1 - 0.000105820105820106*G0_4_2 - 0.00169312169312169*G0_4_3 - 0.00126984126984126*G0_4_4 - 0.000846560846560844*G0_4_5 + 0.000529100529100528*G0_5_0 - 0.000105820105820105*G0_5_1 + 0.000211640211640211*G0_5_2 - 0.00169312169312169*G0_5_3 - 0.000846560846560844*G0_5_4 - 0.00126984126984127*G0_5_5;
    A[4] = 0.00158730158730158*G0_0_0 - 0.000264550264550264*G0_0_1 - 0.000264550264550263*G0_0_2 + 0.000529100529100528*G0_0_3 + 0.00211640211640211*G0_0_4 + 0.00105820105820105*G0_0_5 - 0.000264550264550264*G0_1_0 - 5.29100529100527e-05*G0_1_1 + 0.000105820105820105*G0_1_2 + 0.000211640211640211*G0_1_3 + 0.000105820105820105*G0_1_4 - 0.000105820105820105*G0_1_5 - 0.000264550264550263*G0_2_0 + 0.000105820105820106*G0_2_1 - 0.000264550264550263*G0_2_2 - 0.000105820105820105*G0_2_3 - 0.000952380952380949*G0_2_4 - 0.000105820105820105*G0_2_5 + 0.000529100529100528*G0_3_0 + 0.000211640211640211*G0_3_1 - 0.000105820105820105*G0_3_2 - 0.00169312169312169*G0_3_3 - 0.00126984126984126*G0_3_4 - 0.000846560846560844*G0_3_5 + 0.00211640211640211*G0_4_0 + 0.000105820105820105*G0_4_1 - 0.000952380952380949*G0_4_2 - 0.00126984126984126*G0_4_3 + 0.00105820105820105*G0_5_0 - 0.000105820105820105*G0_5_1 - 0.000105820105820105*G0_5_2 - 0.000846560846560844*G0_5_3 - 0.00266666666666665*G6_0_1 - 0.00266666666666665*G6_1_1 - 0.00266666666666665*G8_0_1 - 0.00266666666666665*G8_1_1;
    A[5] = 0.00158730158730158*G0_0_0 - 0.000264550264550263*G0_0_1 - 0.000264550264550264*G0_0_2 + 0.000529100529100528*G0_0_3 + 0.00105820105820105*G0_0_4 + 0.00211640211640211*G0_0_5 - 0.000264550264550263*G0_1_0 - 0.000264550264550263*G0_1_1 + 0.000105820105820105*G0_1_2 - 0.000105820105820105*G0_1_3 - 0.000105820105820105*G0_1_4 - 0.000952380952380947*G0_1_5 - 0.000264550264550264*G0_2_0 + 0.000105820105820105*G0_2_1 - 5.29100529100528e-05*G0_2_2 + 0.000211640211640211*G0_2_3 - 0.000105820105820105*G0_2_4 + 0.000105820105820106*G0_2_5 + 0.000529100529100528*G0_3_0 - 0.000105820105820105*G0_3_1 + 0.000211640211640211*G0_3_2 - 0.00169312169312169*G0_3_3 - 0.000846560846560844*G0_3_4 - 0.00126984126984127*G0_3_5 + 0.00105820105820105*G0_4_0 - 0.000105820105820105*G0_4_1 - 0.000105820105820105*G0_4_2 - 0.000846560846560844*G0_4_3 + 0.00211640211640211*G0_5_0 - 0.000952380952380948*G0_5_1 + 0.000105820105820106*G0_5_2 - 0.00126984126984127*G0_5_3 - 0.00266666666666665*G6_0_0 - 0.00266666666666665*G6_1_0 - 0.00266666666666665*G8_0_0 - 0.00266666666666665*G8_1_0;
    A[6] = 0.00476190476190473*G1_0_0 - 0.000396825396825395*G1_0_1 - 0.000396825396825395*G1_0_2 + 0.00158730158730158*G1_0_4 + 0.00158730158730158*G1_0_5 - 0.000396825396825395*G1_1_0 + 0.000158730158730158*G1_1_1 + 2.64550264550264e-05*G1_1_2 - 5.29100529100527e-05*G1_1_3 - 0.000264550264550264*G1_1_4 - 0.000264550264550263*G1_1_5 - 0.000396825396825395*G1_2_0 + 2.64550264550264e-05*G1_2_1 + 0.000158730158730158*G1_2_2 - 5.29100529100529e-05*G1_2_3 - 0.000264550264550263*G1_2_4 - 0.000264550264550264*G1_2_5 - 5.29100529100527e-05*G1_3_1 - 5.29100529100529e-05*G1_3_2 + 0.000634920634920633*G1_3_3 + 0.000529100529100528*G1_3_4 + 0.000529100529100528*G1_3_5 + 0.00158730158730158*G1_4_0 - 0.000264550264550264*G1_4_1 - 0.000264550264550263*G1_4_2 + 0.000529100529100528*G1_4_3 + 0.00211640211640211*G1_4_4 + 0.00105820105820105*G1_4_5 + 0.00158730158730158*G1_5_0 - 0.000264550264550263*G1_5_1 - 0.000264550264550264*G1_5_2 + 0.000529100529100528*G1_5_3 + 0.00105820105820105*G1_5_4 + 0.00211640211640211*G1_5_5;
    A[7] = -0.000396825396825395*G1_0_0 + 0.000158730158730158*G1_0_1 + 2.64550264550264e-05*G1_0_2 - 5.29100529100527e-05*G1_0_3 - 0.000264550264550264*G1_0_4 - 0.000264550264550263*G1_0_5 + 0.000158730158730158*G1_1_0 - 0.000396825396825395*G1_1_1 + 2.64550264550264e-05*G1_1_2 - 0.000264550264550264*G1_1_3 - 5.29100529100527e-05*G1_1_4 - 0.000264550264550263*G1_1_5 + 2.64550264550264e-05*G1_2_0 + 2.64550264550264e-05*G1_2_1 + 2.64550264550262e-05*G1_2_2 + 0.000105820105820105*G1_2_3 + 0.000105820105820105*G1_2_4 + 0.000105820105820105*G1_2_5 - 5.29100529100527e-05*G1_3_0 - 0.000264550264550264*G1_3_1 + 0.000105820105820105*G1_3_2 + 0.000105820105820105*G1_3_3 + 0.000211640211640211*G1_3_4 - 0.000105820105820105*G1_3_5 - 0.000264550264550264*G1_4_0 - 5.29100529100527e-05*G1_4_1 + 0.000105820105820105*G1_4_2 + 0.000211640211640211*G1_4_3 + 0.000105820105820105*G1_4_4 - 0.000105820105820105*G1_4_5 - 0.000264550264550263*G1_5_0 - 0.000264550264550263*G1_5_1 + 0.000105820105820105*G1_5_2 - 0.000105820105820105*G1_5_3 - 0.000105820105820105*G1_5_4 - 0.000952380952380948*G1_5_5;
    A[8] = -0.000396825396825395*G1_0_0 + 2.64550264550264e-05*G1_0_1 + 0.000158730158730158*G1_0_2 - 5.29100529100529e-05*G1_0_3 - 0.000264550264550263*G1_0_4 - 0.000264550264550264*G1_0_5 + 2.64550264550264e-05*G1_1_0 + 2.64550264550264e-05*G1_1_1 + 2.64550264550262e-05*G1_1_2 + 0.000105820105820105*G1_1_3 + 0.000105820105820105*G1_1_4 + 0.000105820105820105*G1_1_5 + 0.000158730158730158*G1_2_0 + 2.64550264550262e-05*G1_2_1 - 0.000396825396825395*G1_2_2 - 0.000264550264550263*G1_2_3 - 0.000264550264550263*G1_2_4 - 5.29100529100528e-05*G1_2_5 - 5.29100529100529e-05*G1_3_0 + 0.000105820105820105*G1_3_1 - 0.000264550264550263*G1_3_2 + 0.000105820105820106*G1_3_3 - 0.000105820105820105*G1_3_4 + 0.000211640211640211*G1_3_5 - 0.000264550264550263*G1_4_0 + 0.000105820105820105*G1_4_1 - 0.000264550264550263*G1_4_2 - 0.000105820105820105*G1_4_3 - 0.000952380952380949*G1_4_4 - 0.000105820105820105*G1_4_5 - 0.000264550264550264*G1_5_0 + 0.000105820105820105*G1_5_1 - 5.29100529100528e-05*G1_5_2 + 0.000211640211640211*G1_5_3 - 0.000105820105820105*G1_5_4 + 0.000105820105820106*G1_5_5;
    A[9] = -5.29100529100527e-05*G1_0_1 - 5.29100529100529e-05*G1_0_2 + 0.000634920634920633*G1_0_3 + 0.000529100529100528*G1_0_4 + 0.000529100529100528*G1_0_5 - 5.29100529100527e-05*G1_1_0 - 0.000264550264550264*G1_1_1 + 0.000105820105820105*G1_1_2 + 0.000105820105820105*G1_1_3 + 0.000211640211640211*G1_1_4 - 0.000105820105820105*G1_1_5 - 5.29100529100529e-05*G1_2_0 + 0.000105820105820105*G1_2_1 - 0.000264550264550263*G1_2_2 + 0.000105820105820106*G1_2_3 - 0.000105820105820105*G1_2_4 + 0.000211640211640211*G1_2_5 + 0.000634920634920633*G1_3_0 + 0.000105820105820105*G1_3_1 + 0.000105820105820106*G1_3_2 - 0.0038095238095238*G1_3_3 - 0.00169312169312169*G1_3_4 - 0.00169312169312169*G1_3_5 + 0.000529100529100528*G1_4_0 + 0.000211640211640211*G1_4_1 - 0.000105820105820106*G1_4_2 - 0.00169312169312169*G1_4_3 - 0.00126984126984126*G1_4_4 - 0.000846560846560844*G1_4_5 + 0.000529100529100528*G1_5_0 - 0.000105820105820105*G1_5_1 + 0.000211640211640211*G1_5_2 - 0.00169312169312169*G1_5_3 - 0.000846560846560844*G1_5_4 - 0.00126984126984127*G1_5_5;
    A[10] = 0.00158730158730158*G1_0_0 - 0.000264550264550264*G1_0_1 - 0.000264550264550263*G1_0_2 + 0.000529100529100528*G1_0_3 + 0.00211640211640211*G1_0_4 + 0.00105820105820105*G1_0_5 - 0.000264550264550264*G1_1_0 - 5.29100529100527e-05*G1_1_1 + 0.000105820105820105*G1_1_2 + 0.000211640211640211*G1_1_3 + 0.000105820105820105*G1_1_4 - 0.000105820105820105*G1_1_5 - 0.000264550264550263*G1_2_0 + 0.000105820105820106*G1_2_1 - 0.000264550264550263*G1_2_2 - 0.000105820105820105*G1_2_3 - 0.000952380952380949*G1_2_4 - 0.000105820105820105*G1_2_5 + 0.000529100529100528*G1_3_0 + 0.000211640211640211*G1_3_1 - 0.000105820105820105*G1_3_2 - 0.00169312169312169*G1_3_3 - 0.00126984126984126*G1_3_4 - 0.000846560846560844*G1_3_5 + 0.00211640211640211*G1_4_0 + 0.000105820105820105*G1_4_1 - 0.000952380952380949*G1_4_2 - 0.00126984126984126*G1_4_3 + 0.00105820105820105*G1_5_0 - 0.000105820105820105*G1_5_1 - 0.000105820105820105*G1_5_2 - 0.000846560846560844*G1_5_3;
    A[11] = 0.00158730158730158*G1_0_0 - 0.000264550264550263*G1_0_1 - 0.000264550264550264*G1_0_2 + 0.000529100529100528*G1_0_3 + 0.00105820105820105*G1_0_4 + 0.00211640211640211*G1_0_5 - 0.000264550264550263*G1_1_0 - 0.000264550264550263*G1_1_1 + 0.000105820105820105*G1_1_2 - 0.000105820105820105*G1_1_3 - 0.000105820105820105*G1_1_4 - 0.000952380952380947*G1_1_5 - 0.000264550264550264*G1_2_0 + 0.000105820105820105*G1_2_1 - 5.29100529100528e-05*G1_2_2 + 0.000211640211640211*G1_2_3 - 0.000105820105820105*G1_2_4 + 0.000105820105820106*G1_2_5 + 0.000529100529100528*G1_3_0 - 0.000105820105820105*G1_3_1 + 0.000211640211640211*G1_3_2 - 0.00169312169312169*G1_3_3 - 0.000846560846560844*G1_3_4 - 0.00126984126984127*G1_3_5 + 0.00105820105820105*G1_4_0 - 0.000105820105820105*G1_4_1 - 0.000105820105820105*G1_4_2 - 0.000846560846560844*G1_4_3 + 0.00211640211640211*G1_5_0 - 0.000952380952380948*G1_5_1 + 0.000105820105820106*G1_5_2 - 0.00126984126984127*G1_5_3;
    A[12] = 0.166666666666666*G10_0 + 0.166666666666666*G10_1;
    A[13] = 0.0;
    A[14] = 0.0;
    A[15] = -0.000396825396825395*G0_0_0 + 0.000158730158730158*G0_0_1 + 2.64550264550264e-05*G0_0_2 - 5.29100529100527e-05*G0_0_3 - 0.000264550264550264*G0_0_4 - 0.000264550264550263*G0_0_5 + 0.000158730158730158*G0_1_0 - 0.000396825396825395*G0_1_1 + 2.64550264550264e-05*G0_1_2 - 0.000264550264550264*G0_1_3 - 5.29100529100527e-05*G0_1_4 - 0.000264550264550263*G0_1_5 + 2.64550264550264e-05*G0_2_0 + 2.64550264550264e-05*G0_2_1 + 2.64550264550262e-05*G0_2_2 + 0.000105820105820105*G0_2_3 + 0.000105820105820106*G0_2_4 + 0.000105820105820105*G0_2_5 - 5.29100529100527e-05*G0_3_0 - 0.000264550264550264*G0_3_1 + 0.000105820105820105*G0_3_2 + 0.000105820105820105*G0_3_3 + 0.000211640211640211*G0_3_4 - 0.000105820105820105*G0_3_5 - 0.000264550264550264*G0_4_0 - 5.29100529100527e-05*G0_4_1 + 0.000105820105820106*G0_4_2 + 0.000211640211640211*G0_4_3 + 0.000105820105820105*G0_4_4 - 0.000105820105820105*G0_4_5 - 0.000264550264550263*G0_5_0 - 0.000264550264550263*G0_5_1 + 0.000105820105820105*G0_5_2 - 0.000105820105820105*G0_5_3 - 0.000105820105820105*G0_5_4 - 0.000952380952380947*G0_5_5 + 0.000666666666666663*G6_0_0 + 0.000666666666666664*G6_0_1 + 0.000666666666666663*G8_0_0 + 0.000666666666666664*G8_0_1;
    A[16] = 0.000158730158730158*G0_0_0 - 0.000396825396825395*G0_0_1 + 2.64550264550264e-05*G0_0_2 - 0.000264550264550264*G0_0_3 - 5.29100529100527e-05*G0_0_4 - 0.000264550264550263*G0_0_5 - 0.000396825396825395*G0_1_0 + 0.00476190476190474*G0_1_1 - 0.000396825396825395*G0_1_2 + 0.00158730158730158*G0_1_3 + 0.00158730158730158*G0_1_5 + 2.64550264550264e-05*G0_2_0 - 0.000396825396825395*G0_2_1 + 0.000158730158730158*G0_2_2 - 0.000264550264550264*G0_2_3 - 5.29100529100528e-05*G0_2_4 - 0.000264550264550264*G0_2_5 - 0.000264550264550264*G0_3_0 + 0.00158730158730158*G0_3_1 - 0.000264550264550264*G0_3_2 + 0.00211640211640211*G0_3_3 + 0.000529100529100527*G0_3_4 + 0.00105820105820105*G0_3_5 - 5.29100529100526e-05*G0_4_0 - 5.29100529100528e-05*G0_4_2 + 0.000529100529100527*G0_4_3 + 0.000634920634920633*G0_4_4 + 0.000529100529100527*G0_4_5 - 0.000264550264550263*G0_5_0 + 0.00158730158730158*G0_5_1 - 0.000264550264550264*G0_5_2 + 0.00105820105820105*G0_5_3 + 0.000529100529100527*G0_5_4 + 0.00211640211640211*G0_5_5 + 0.00199999999999999*G6_0_0 + 0.00199999999999999*G8_0_0;
    A[17] = 2.64550264550264e-05*G0_0_0 + 2.64550264550264e-05*G0_0_1 + 2.64550264550262e-05*G0_0_2 + 0.000105820105820105*G0_0_3 + 0.000105820105820106*G0_0_4 + 0.000105820105820105*G0_0_5 + 2.64550264550264e-05*G0_1_0 - 0.000396825396825395*G0_1_1 + 0.000158730158730158*G0_1_2 - 0.000264550264550264*G0_1_3 - 5.29100529100529e-05*G0_1_4 - 0.000264550264550263*G0_1_5 + 2.64550264550262e-05*G0_2_0 + 0.000158730158730158*G0_2_1 - 0.000396825396825394*G0_2_2 - 0.000264550264550263*G0_2_3 - 0.000264550264550263*G0_2_4 - 5.29100529100528e-05*G0_2_5 + 0.000105820105820105*G0_3_0 - 0.000264550264550264*G0_3_1 - 0.000264550264550263*G0_3_2 - 0.000952380952380948*G0_3_3 - 0.000105820105820105*G0_3_4 - 0.000105820105820105*G0_3_5 + 0.000105820105820106*G0_4_0 - 5.29100529100528e-05*G0_4_1 - 0.000264550264550263*G0_4_2 - 0.000105820105820105*G0_4_3 + 0.000105820105820106*G0_4_4 + 0.000211640211640211*G0_4_5 + 0.000105820105820105*G0_5_0 - 0.000264550264550263*G0_5_1 - 5.29100529100528e-05*G0_5_2 - 0.000105820105820105*G0_5_3 + 0.000211640211640211*G0_5_4 + 0.000105820105820106*G0_5_5 - 0.000666666666666663*G6_0_1 - 0.000666666666666663*G8_0_1;
    A[18] = -5.29100529100527e-05*G0_0_0 - 0.000264550264550264*G0_0_1 + 0.000105820105820105*G0_0_2 + 0.000105820105820105*G0_0_3 + 0.000211640211640211*G0_0_4 - 0.000105820105820105*G0_0_5 - 0.000264550264550264*G0_1_0 + 0.00158730158730158*G0_1_1 - 0.000264550264550264*G0_1_2 + 0.00211640211640211*G0_1_3 + 0.000529100529100527*G0_1_4 + 0.00105820105820105*G0_1_5 + 0.000105820105820105*G0_2_0 - 0.000264550264550264*G0_2_1 - 0.000264550264550263*G0_2_2 - 0.000952380952380948*G0_2_3 - 0.000105820105820105*G0_2_4 - 0.000105820105820105*G0_2_5 + 0.000105820105820105*G0_3_0 + 0.00211640211640211*G0_3_1 - 0.000952380952380948*G0_3_2 - 0.00126984126984127*G0_3_4 + 0.000211640211640211*G0_4_0 + 0.000529100529100527*G0_4_1 - 0.000105820105820105*G0_4_2 - 0.00126984126984127*G0_4_3 - 0.00169312169312169*G0_4_4 - 0.000846560846560844*G0_4_5 - 0.000105820105820105*G0_5_0 + 0.00105820105820105*G0_5_1 - 0.000105820105820105*G0_5_2 - 0.000846560846560844*G0_5_4 + 0.00266666666666665*G6_0_1 + 0.00266666666666665*G8_0_1;
    A[19] = -0.000264550264550264*G0_0_0 - 5.29100529100527e-05*G0_0_1 + 0.000105820105820106*G0_0_2 + 0.000211640211640211*G0_0_3 + 0.000105820105820105*G0_0_4 - 0.000105820105820105*G0_0_5 - 5.29100529100527e-05*G0_1_0 - 5.29100529100529e-05*G0_1_2 + 0.000529100529100527*G0_1_3 + 0.000634920634920633*G0_1_4 + 0.000529100529100527*G0_1_5 + 0.000105820105820105*G0_2_0 - 5.29100529100529e-05*G0_2_1 - 0.000264550264550263*G0_2_2 - 0.000105820105820105*G0_2_3 + 0.000105820105820106*G0_2_4 + 0.000211640211640211*G0_2_5 + 0.000211640211640211*G0_3_0 + 0.000529100529100527*G0_3_1 - 0.000105820105820105*G0_3_2 - 0.00126984126984127*G0_3_3 - 0.00169312169312169*G0_3_4 - 0.000846560846560844*G0_3_5 + 0.000105820105820105*G0_4_0 + 0.000634920634920633*G0_4_1 + 0.000105820105820106*G0_4_2 - 0.00169312169312169*G0_4_3 - 0.0038095238095238*G0_4_4 - 0.00169312169312169*G0_4_5 - 0.000105820105820105*G0_5_0 + 0.000529100529100527*G0_5_1 + 0.000211640211640211*G0_5_2 - 0.000846560846560844*G0_5_3 - 0.00169312169312169*G0_5_4 - 0.00126984126984127*G0_5_5;
    A[20] = -0.000264550264550263*G0_0_0 - 0.000264550264550263*G0_0_1 + 0.000105820105820105*G0_0_2 - 0.000105820105820105*G0_0_3 - 0.000105820105820105*G0_0_4 - 0.000952380952380948*G0_0_5 - 0.000264550264550263*G0_1_0 + 0.00158730158730158*G0_1_1 - 0.000264550264550263*G0_1_2 + 0.00105820105820105*G0_1_3 + 0.000529100529100527*G0_1_4 + 0.00211640211640211*G0_1_5 + 0.000105820105820105*G0_2_0 - 0.000264550264550264*G0_2_1 - 5.29100529100528e-05*G0_2_2 - 0.000105820105820105*G0_2_3 + 0.000211640211640211*G0_2_4 + 0.000105820105820106*G0_2_5 - 0.000105820105820105*G0_3_0 + 0.00105820105820105*G0_3_1 - 0.000105820105820105*G0_3_2 - 0.000846560846560844*G0_3_4 - 0.000105820105820105*G0_4_0 + 0.000529100529100527*G0_4_1 + 0.000211640211640211*G0_4_2 - 0.000846560846560844*G0_4_3 - 0.00169312169312169*G0_4_4 - 0.00126984126984127*G0_4_5 - 0.000952380952380947*G0_5_0 + 0.00211640211640211*G0_5_1 + 0.000105820105820106*G0_5_2 - 0.00126984126984127*G0_5_4 - 0.00266666666666665*G6_0_0 - 0.00266666666666665*G6_0_1 - 0.00266666666666665*G8_0_0 - 0.00266666666666665*G8_0_1;
    A[21] = -0.000396825396825395*G1_0_0 + 0.000158730158730158*G1_0_1 + 2.64550264550264e-05*G1_0_2 - 5.29100529100527e-05*G1_0_3 - 0.000264550264550264*G1_0_4 - 0.000264550264550263*G1_0_5 + 0.000158730158730158*G1_1_0 - 0.000396825396825395*G1_1_1 + 2.64550264550264e-05*G1_1_2 - 0.000264550264550264*G1_1_3 - 5.29100529100527e-05*G1_1_4 - 0.000264550264550263*G1_1_5 + 2.64550264550264e-05*G1_2_0 + 2.64550264550264e-05*G1_2_1 + 2.64550264550262e-05*G1_2_2 + 0.000105820105820105*G1_2_3 + 0.000105820105820106*G1_2_4 + 0.000105820105820105*G1_2_5 - 5.29100529100527e-05*G1_3_0 - 0.000264550264550264*G1_3_1 + 0.000105820105820105*G1_3_2 + 0.000105820105820105*G1_3_3 + 0.000211640211640211*G1_3_4 - 0.000105820105820105*G1_3_5 - 0.000264550264550264*G1_4_0 - 5.29100529100527e-05*G1_4_1 + 0.000105820105820106*G1_4_2 + 0.000211640211640211*G1_4_3 + 0.000105820105820105*G1_4_4 - 0.000105820105820105*G1_4_5 - 0.000264550264550263*G1_5_0 - 0.000264550264550263*G1_5_1 + 0.000105820105820105*G1_5_2 - 0.000105820105820105*G1_5_3 - 0.000105820105820105*G1_5_4 - 0.000952380952380947*G1_5_5;
    A[22] = 0.000158730158730158*G1_0_0 - 0.000396825396825395*G1_0_1 + 2.64550264550264e-05*G1_0_2 - 0.000264550264550264*G1_0_3 - 5.29100529100527e-05*G1_0_4 - 0.000264550264550263*G1_0_5 - 0.000396825396825395*G1_1_0 + 0.00476190476190474*G1_1_1 - 0.000396825396825395*G1_1_2 + 0.00158730158730158*G1_1_3 + 0.00158730158730158*G1_1_5 + 2.64550264550264e-05*G1_2_0 - 0.000396825396825395*G1_2_1 + 0.000158730158730158*G1_2_2 - 0.000264550264550264*G1_2_3 - 5.29100529100528e-05*G1_2_4 - 0.000264550264550264*G1_2_5 - 0.000264550264550264*G1_3_0 + 0.00158730158730158*G1_3_1 - 0.000264550264550264*G1_3_2 + 0.00211640211640211*G1_3_3 + 0.000529100529100527*G1_3_4 + 0.00105820105820105*G1_3_5 - 5.29100529100526e-05*G1_4_0 - 5.29100529100528e-05*G1_4_2 + 0.000529100529100527*G1_4_3 + 0.000634920634920633*G1_4_4 + 0.000529100529100527*G1_4_5 - 0.000264550264550263*G1_5_0 + 0.00158730158730158*G1_5_1 - 0.000264550264550264*G1_5_2 + 0.00105820105820105*G1_5_3 + 0.000529100529100527*G1_5_4 + 0.00211640211640211*G1_5_5;
    A[23] = 2.64550264550264e-05*G1_0_0 + 2.64550264550264e-05*G1_0_1 + 2.64550264550262e-05*G1_0_2 + 0.000105820105820105*G1_0_3 + 0.000105820105820106*G1_0_4 + 0.000105820105820105*G1_0_5 + 2.64550264550264e-05*G1_1_0 - 0.000396825396825395*G1_1_1 + 0.000158730158730158*G1_1_2 - 0.000264550264550264*G1_1_3 - 5.29100529100529e-05*G1_1_4 - 0.000264550264550263*G1_1_5 + 2.64550264550262e-05*G1_2_0 + 0.000158730158730158*G1_2_1 - 0.000396825396825394*G1_2_2 - 0.000264550264550263*G1_2_3 - 0.000264550264550263*G1_2_4 - 5.29100529100528e-05*G1_2_5 + 0.000105820105820105*G1_3_0 - 0.000264550264550264*G1_3_1 - 0.000264550264550263*G1_3_2 - 0.000952380952380948*G1_3_3 - 0.000105820105820105*G1_3_4 - 0.000105820105820105*G1_3_5 + 0.000105820105820106*G1_4_0 - 5.29100529100528e-05*G1_4_1 - 0.000264550264550263*G1_4_2 - 0.000105820105820105*G1_4_3 + 0.000105820105820106*G1_4_4 + 0.000211640211640211*G1_4_5 + 0.000105820105820105*G1_5_0 - 0.000264550264550263*G1_5_1 - 5.29100529100528e-05*G1_5_2 - 0.000105820105820105*G1_5_3 + 0.000211640211640211*G1_5_4 + 0.000105820105820106*G1_5_5;
    A[24] = -5.29100529100527e-05*G1_0_0 - 0.000264550264550264*G1_0_1 + 0.000105820105820105*G1_0_2 + 0.000105820105820105*G1_0_3 + 0.000211640211640211*G1_0_4 - 0.000105820105820105*G1_0_5 - 0.000264550264550264*G1_1_0 + 0.00158730158730158*G1_1_1 - 0.000264550264550264*G1_1_2 + 0.00211640211640211*G1_1_3 + 0.000529100529100527*G1_1_4 + 0.00105820105820105*G1_1_5 + 0.000105820105820105*G1_2_0 - 0.000264550264550264*G1_2_1 - 0.000264550264550263*G1_2_2 - 0.000952380952380948*G1_2_3 - 0.000105820105820105*G1_2_4 - 0.000105820105820105*G1_2_5 + 0.000105820105820105*G1_3_0 + 0.00211640211640211*G1_3_1 - 0.000952380952380948*G1_3_2 - 0.00126984126984127*G1_3_4 + 0.000211640211640211*G1_4_0 + 0.000529100529100527*G1_4_1 - 0.000105820105820105*G1_4_2 - 0.00126984126984127*G1_4_3 - 0.00169312169312169*G1_4_4 - 0.000846560846560844*G1_4_5 - 0.000105820105820105*G1_5_0 + 0.00105820105820105*G1_5_1 - 0.000105820105820105*G1_5_2 - 0.000846560846560844*G1_5_4;
    A[25] = -0.000264550264550264*G1_0_0 - 5.29100529100527e-05*G1_0_1 + 0.000105820105820106*G1_0_2 + 0.000211640211640211*G1_0_3 + 0.000105820105820105*G1_0_4 - 0.000105820105820105*G1_0_5 - 5.29100529100527e-05*G1_1_0 - 5.29100529100529e-05*G1_1_2 + 0.000529100529100527*G1_1_3 + 0.000634920634920633*G1_1_4 + 0.000529100529100527*G1_1_5 + 0.000105820105820105*G1_2_0 - 5.29100529100529e-05*G1_2_1 - 0.000264550264550263*G1_2_2 - 0.000105820105820105*G1_2_3 + 0.000105820105820106*G1_2_4 + 0.000211640211640211*G1_2_5 + 0.000211640211640211*G1_3_0 + 0.000529100529100527*G1_3_1 - 0.000105820105820105*G1_3_2 - 0.00126984126984127*G1_3_3 - 0.00169312169312169*G1_3_4 - 0.000846560846560844*G1_3_5 + 0.000105820105820105*G1_4_0 + 0.000634920634920633*G1_4_1 + 0.000105820105820106*G1_4_2 - 0.00169312169312169*G1_4_3 - 0.0038095238095238*G1_4_4 - 0.00169312169312169*G1_4_5 - 0.000105820105820105*G1_5_0 + 0.000529100529100527*G1_5_1 + 0.000211640211640211*G1_5_2 - 0.000846560846560844*G1_5_3 - 0.00169312169312169*G1_5_4 - 0.00126984126984127*G1_5_5;
    A[26] = -0.000264550264550263*G1_0_0 - 0.000264550264550263*G1_0_1 + 0.000105820105820105*G1_0_2 - 0.000105820105820105*G1_0_3 - 0.000105820105820105*G1_0_4 - 0.000952380952380948*G1_0_5 - 0.000264550264550263*G1_1_0 + 0.00158730158730158*G1_1_1 - 0.000264550264550263*G1_1_2 + 0.00105820105820105*G1_1_3 + 0.000529100529100527*G1_1_4 + 0.00211640211640211*G1_1_5 + 0.000105820105820105*G1_2_0 - 0.000264550264550264*G1_2_1 - 5.29100529100528e-05*G1_2_2 - 0.000105820105820105*G1_2_3 + 0.000211640211640211*G1_2_4 + 0.000105820105820106*G1_2_5 - 0.000105820105820105*G1_3_0 + 0.00105820105820105*G1_3_1 - 0.000105820105820105*G1_3_2 - 0.000846560846560844*G1_3_4 - 0.000105820105820105*G1_4_0 + 0.000529100529100527*G1_4_1 + 0.000211640211640211*G1_4_2 - 0.000846560846560844*G1_4_3 - 0.00169312169312169*G1_4_4 - 0.00126984126984127*G1_4_5 - 0.000952380952380947*G1_5_0 + 0.00211640211640211*G1_5_1 + 0.000105820105820106*G1_5_2 - 0.00126984126984127*G1_5_4;
    A[27] = 0.0;
    A[28] = -0.166666666666666*G10_0;
    A[29] = 0.0;
    A[30] = -0.000396825396825395*G0_0_0 + 2.64550264550264e-05*G0_0_1 + 0.000158730158730158*G0_0_2 - 5.29100529100529e-05*G0_0_3 - 0.000264550264550263*G0_0_4 - 0.000264550264550264*G0_0_5 + 2.64550264550264e-05*G0_1_0 + 2.64550264550264e-05*G0_1_1 + 2.64550264550262e-05*G0_1_2 + 0.000105820105820105*G0_1_3 + 0.000105820105820105*G0_1_4 + 0.000105820105820105*G0_1_5 + 0.000158730158730158*G0_2_0 + 2.64550264550262e-05*G0_2_1 - 0.000396825396825395*G0_2_2 - 0.000264550264550263*G0_2_3 - 0.000264550264550263*G0_2_4 - 5.29100529100528e-05*G0_2_5 - 5.29100529100529e-05*G0_3_0 + 0.000105820105820105*G0_3_1 - 0.000264550264550263*G0_3_2 + 0.000105820105820106*G0_3_3 - 0.000105820105820105*G0_3_4 + 0.000211640211640211*G0_3_5 - 0.000264550264550263*G0_4_0 + 0.000105820105820105*G0_4_1 - 0.000264550264550263*G0_4_2 - 0.000105820105820105*G0_4_3 - 0.000952380952380949*G0_4_4 - 0.000105820105820105*G0_4_5 - 0.000264550264550264*G0_5_0 + 0.000105820105820105*G0_5_1 - 5.29100529100528e-05*G0_5_2 + 0.000211640211640211*G0_5_3 - 0.000105820105820105*G0_5_4 + 0.000105820105820106*G0_5_5 + 0.000666666666666663*G6_1_0 + 0.000666666666666663*G6_1_1 + 0.000666666666666663*G8_1_0 + 0.000666666666666663*G8_1_1;
    A[31] = 2.64550264550264e-05*G0_0_0 + 2.64550264550264e-05*G0_0_1 + 2.64550264550262e-05*G0_0_2 + 0.000105820105820105*G0_0_3 + 0.000105820105820106*G0_0_4 + 0.000105820105820105*G0_0_5 + 2.64550264550264e-05*G0_1_0 - 0.000396825396825395*G0_1_1 + 0.000158730158730158*G0_1_2 - 0.000264550264550264*G0_1_3 - 5.29100529100529e-05*G0_1_4 - 0.000264550264550264*G0_1_5 + 2.64550264550262e-05*G0_2_0 + 0.000158730158730158*G0_2_1 - 0.000396825396825394*G0_2_2 - 0.000264550264550263*G0_2_3 - 0.000264550264550263*G0_2_4 - 5.29100529100528e-05*G0_2_5 + 0.000105820105820105*G0_3_0 - 0.000264550264550264*G0_3_1 - 0.000264550264550263*G0_3_2 - 0.000952380952380948*G0_3_3 - 0.000105820105820105*G0_3_4 - 0.000105820105820105*G0_3_5 + 0.000105820105820105*G0_4_0 - 5.29100529100528e-05*G0_4_1 - 0.000264550264550263*G0_4_2 - 0.000105820105820105*G0_4_3 + 0.000105820105820106*G0_4_4 + 0.000211640211640211*G0_4_5 + 0.000105820105820105*G0_5_0 - 0.000264550264550264*G0_5_1 - 5.29100529100528e-05*G0_5_2 - 0.000105820105820105*G0_5_3 + 0.000211640211640211*G0_5_4 + 0.000105820105820106*G0_5_5 - 0.000666666666666663*G6_1_0 - 0.000666666666666663*G8_1_0;
    A[32] = 0.000158730158730158*G0_0_0 + 2.64550264550262e-05*G0_0_1 - 0.000396825396825395*G0_0_2 - 0.000264550264550263*G0_0_3 - 0.000264550264550263*G0_0_4 - 5.29100529100528e-05*G0_0_5 + 2.64550264550262e-05*G0_1_0 + 0.000158730158730158*G0_1_1 - 0.000396825396825394*G0_1_2 - 0.000264550264550263*G0_1_3 - 0.000264550264550263*G0_1_4 - 5.29100529100528e-05*G0_1_5 - 0.000396825396825395*G0_2_0 - 0.000396825396825394*G0_2_1 + 0.00476190476190473*G0_2_2 + 0.00158730158730158*G0_2_3 + 0.00158730158730158*G0_2_4 - 0.000264550264550263*G0_3_0 - 0.000264550264550263*G0_3_1 + 0.00158730158730158*G0_3_2 + 0.00211640211640211*G0_3_3 + 0.00105820105820105*G0_3_4 + 0.000529100529100528*G0_3_5 - 0.000264550264550263*G0_4_0 - 0.000264550264550263*G0_4_1 + 0.00158730158730158*G0_4_2 + 0.00105820105820105*G0_4_3 + 0.00211640211640211*G0_4_4 + 0.000529100529100528*G0_4_5 - 5.29100529100528e-05*G0_5_0 - 5.29100529100528e-05*G0_5_1 + 0.000529100529100528*G0_5_3 + 0.000529100529100528*G0_5_4 + 0.000634920634920633*G0_5_5 + 0.00199999999999999*G6_1_1 + 0.00199999999999999*G8_1_1;
    A[33] = -5.29100529100529e-05*G0_0_0 + 0.000105820105820105*G0_0_1 - 0.000264550264550263*G0_0_2 + 0.000105820105820106*G0_0_3 - 0.000105820105820105*G0_0_4 + 0.000211640211640211*G0_0_5 + 0.000105820105820105*G0_1_0 - 0.000264550264550264*G0_1_1 - 0.000264550264550263*G0_1_2 - 0.000952380952380948*G0_1_3 - 0.000105820105820105*G0_1_4 - 0.000105820105820105*G0_1_5 - 0.000264550264550263*G0_2_0 - 0.000264550264550263*G0_2_1 + 0.00158730158730158*G0_2_2 + 0.00211640211640211*G0_2_3 + 0.00105820105820105*G0_2_4 + 0.000529100529100528*G0_2_5 + 0.000105820105820106*G0_3_0 - 0.000952380952380948*G0_3_1 + 0.00211640211640211*G0_3_2 - 0.00126984126984127*G0_3_5 - 0.000105820105820105*G0_4_0 - 0.000105820105820105*G0_4_1 + 0.00105820105820105*G0_4_2 - 0.000846560846560844*G0_4_5 + 0.000211640211640211*G0_5_0 - 0.000105820105820105*G0_5_1 + 0.000529100529100528*G0_5_2 - 0.00126984126984127*G0_5_3 - 0.000846560846560844*G0_5_4 - 0.00169312169312169*G0_5_5 + 0.00266666666666665*G6_1_0 + 0.00266666666666665*G8_1_0;
    A[34] = -0.000264550264550263*G0_0_0 + 0.000105820105820106*G0_0_1 - 0.000264550264550263*G0_0_2 - 0.000105820105820105*G0_0_3 - 0.000952380952380949*G0_0_4 - 0.000105820105820105*G0_0_5 + 0.000105820105820105*G0_1_0 - 5.29100529100529e-05*G0_1_1 - 0.000264550264550263*G0_1_2 - 0.000105820105820105*G0_1_3 + 0.000105820105820106*G0_1_4 + 0.000211640211640211*G0_1_5 - 0.000264550264550263*G0_2_0 - 0.000264550264550263*G0_2_1 + 0.00158730158730158*G0_2_2 + 0.00105820105820105*G0_2_3 + 0.00211640211640211*G0_2_4 + 0.000529100529100528*G0_2_5 - 0.000105820105820105*G0_3_0 - 0.000105820105820105*G0_3_1 + 0.00105820105820105*G0_3_2 - 0.000846560846560844*G0_3_5 - 0.000952380952380949*G0_4_0 + 0.000105820105820106*G0_4_1 + 0.00211640211640211*G0_4_2 - 0.00126984126984127*G0_4_5 - 0.000105820105820105*G0_5_0 + 0.000211640211640211*G0_5_1 + 0.000529100529100528*G0_5_2 - 0.000846560846560844*G0_5_3 - 0.00126984126984127*G0_5_4 - 0.00169312169312169*G0_5_5 - 0.00266666666666666*G6_1_0 - 0.00266666666666665*G6_1_1 - 0.00266666666666666*G8_1_0 - 0.00266666666666665*G8_1_1;
    A[35] = -0.000264550264550264*G0_0_0 + 0.000105820105820105*G0_0_1 - 5.29100529100528e-05*G0_0_2 + 0.000211640211640211*G0_0_3 - 0.000105820105820105*G0_0_4 + 0.000105820105820106*G0_0_5 + 0.000105820105820105*G0_1_0 - 0.000264550264550263*G0_1_1 - 5.29100529100528e-05*G0_1_2 - 0.000105820105820105*G0_1_3 + 0.000211640211640211*G0_1_4 + 0.000105820105820106*G0_1_5 - 5.29100529100528e-05*G0_2_0 - 5.29100529100528e-05*G0_2_1 + 0.000529100529100528*G0_2_3 + 0.000529100529100528*G0_2_4 + 0.000634920634920633*G0_2_5 + 0.000211640211640211*G0_3_0 - 0.000105820105820105*G0_3_1 + 0.000529100529100528*G0_3_2 - 0.00126984126984127*G0_3_3 - 0.000846560846560844*G0_3_4 - 0.00169312169312169*G0_3_5 - 0.000105820105820105*G0_4_0 + 0.000211640211640211*G0_4_1 + 0.000529100529100528*G0_4_2 - 0.000846560846560844*G0_4_3 - 0.00126984126984127*G0_4_4 - 0.00169312169312169*G0_4_5 + 0.000105820105820106*G0_5_0 + 0.000105820105820106*G0_5_1 + 0.000634920634920633*G0_5_2 - 0.00169312169312169*G0_5_3 - 0.00169312169312169*G0_5_4 - 0.00380952380952379*G0_5_5;
    A[36] = -0.000396825396825395*G1_0_0 + 2.64550264550264e-05*G1_0_1 + 0.000158730158730158*G1_0_2 - 5.29100529100529e-05*G1_0_3 - 0.000264550264550263*G1_0_4 - 0.000264550264550264*G1_0_5 + 2.64550264550264e-05*G1_1_0 + 2.64550264550264e-05*G1_1_1 + 2.64550264550262e-05*G1_1_2 + 0.000105820105820105*G1_1_3 + 0.000105820105820105*G1_1_4 + 0.000105820105820105*G1_1_5 + 0.000158730158730158*G1_2_0 + 2.64550264550262e-05*G1_2_1 - 0.000396825396825395*G1_2_2 - 0.000264550264550263*G1_2_3 - 0.000264550264550263*G1_2_4 - 5.29100529100528e-05*G1_2_5 - 5.29100529100529e-05*G1_3_0 + 0.000105820105820105*G1_3_1 - 0.000264550264550263*G1_3_2 + 0.000105820105820106*G1_3_3 - 0.000105820105820105*G1_3_4 + 0.000211640211640211*G1_3_5 - 0.000264550264550263*G1_4_0 + 0.000105820105820105*G1_4_1 - 0.000264550264550263*G1_4_2 - 0.000105820105820105*G1_4_3 - 0.000952380952380949*G1_4_4 - 0.000105820105820105*G1_4_5 - 0.000264550264550264*G1_5_0 + 0.000105820105820105*G1_5_1 - 5.29100529100528e-05*G1_5_2 + 0.000211640211640211*G1_5_3 - 0.000105820105820105*G1_5_4 + 0.000105820105820106*G1_5_5;
    A[37] = 2.64550264550264e-05*G1_0_0 + 2.64550264550264e-05*G1_0_1 + 2.64550264550262e-05*G1_0_2 + 0.000105820105820105*G1_0_3 + 0.000105820105820106*G1_0_4 + 0.000105820105820105*G1_0_5 + 2.64550264550264e-05*G1_1_0 - 0.000396825396825395*G1_1_1 + 0.000158730158730158*G1_1_2 - 0.000264550264550264*G1_1_3 - 5.29100529100529e-05*G1_1_4 - 0.000264550264550264*G1_1_5 + 2.64550264550262e-05*G1_2_0 + 0.000158730158730158*G1_2_1 - 0.000396825396825394*G1_2_2 - 0.000264550264550263*G1_2_3 - 0.000264550264550263*G1_2_4 - 5.29100529100528e-05*G1_2_5 + 0.000105820105820105*G1_3_0 - 0.000264550264550264*G1_3_1 - 0.000264550264550263*G1_3_2 - 0.000952380952380948*G1_3_3 - 0.000105820105820105*G1_3_4 - 0.000105820105820105*G1_3_5 + 0.000105820105820105*G1_4_0 - 5.29100529100528e-05*G1_4_1 - 0.000264550264550263*G1_4_2 - 0.000105820105820105*G1_4_3 + 0.000105820105820106*G1_4_4 + 0.000211640211640211*G1_4_5 + 0.000105820105820105*G1_5_0 - 0.000264550264550264*G1_5_1 - 5.29100529100528e-05*G1_5_2 - 0.000105820105820105*G1_5_3 + 0.000211640211640211*G1_5_4 + 0.000105820105820106*G1_5_5;
    A[38] = 0.000158730158730158*G1_0_0 + 2.64550264550262e-05*G1_0_1 - 0.000396825396825395*G1_0_2 - 0.000264550264550263*G1_0_3 - 0.000264550264550263*G1_0_4 - 5.29100529100528e-05*G1_0_5 + 2.64550264550262e-05*G1_1_0 + 0.000158730158730158*G1_1_1 - 0.000396825396825394*G1_1_2 - 0.000264550264550263*G1_1_3 - 0.000264550264550263*G1_1_4 - 5.29100529100528e-05*G1_1_5 - 0.000396825396825395*G1_2_0 - 0.000396825396825394*G1_2_1 + 0.00476190476190473*G1_2_2 + 0.00158730158730158*G1_2_3 + 0.00158730158730158*G1_2_4 - 0.000264550264550263*G1_3_0 - 0.000264550264550263*G1_3_1 + 0.00158730158730158*G1_3_2 + 0.00211640211640211*G1_3_3 + 0.00105820105820105*G1_3_4 + 0.000529100529100528*G1_3_5 - 0.000264550264550263*G1_4_0 - 0.000264550264550263*G1_4_1 + 0.00158730158730158*G1_4_2 + 0.00105820105820105*G1_4_3 + 0.00211640211640211*G1_4_4 + 0.000529100529100528*G1_4_5 - 5.29100529100528e-05*G1_5_0 - 5.29100529100528e-05*G1_5_1 + 0.000529100529100528*G1_5_3 + 0.000529100529100528*G1_5_4 + 0.000634920634920633*G1_5_5;
    A[39] = -5.29100529100529e-05*G1_0_0 + 0.000105820105820105*G1_0_1 - 0.000264550264550263*G1_0_2 + 0.000105820105820106*G1_0_3 - 0.000105820105820105*G1_0_4 + 0.000211640211640211*G1_0_5 + 0.000105820105820105*G1_1_0 - 0.000264550264550264*G1_1_1 - 0.000264550264550263*G1_1_2 - 0.000952380952380948*G1_1_3 - 0.000105820105820105*G1_1_4 - 0.000105820105820105*G1_1_5 - 0.000264550264550263*G1_2_0 - 0.000264550264550263*G1_2_1 + 0.00158730158730158*G1_2_2 + 0.00211640211640211*G1_2_3 + 0.00105820105820105*G1_2_4 + 0.000529100529100528*G1_2_5 + 0.000105820105820106*G1_3_0 - 0.000952380952380948*G1_3_1 + 0.00211640211640211*G1_3_2 - 0.00126984126984127*G1_3_5 - 0.000105820105820105*G1_4_0 - 0.000105820105820105*G1_4_1 + 0.00105820105820105*G1_4_2 - 0.000846560846560844*G1_4_5 + 0.000211640211640211*G1_5_0 - 0.000105820105820105*G1_5_1 + 0.000529100529100528*G1_5_2 - 0.00126984126984127*G1_5_3 - 0.000846560846560844*G1_5_4 - 0.00169312169312169*G1_5_5;
    A[40] = -0.000264550264550263*G1_0_0 + 0.000105820105820106*G1_0_1 - 0.000264550264550263*G1_0_2 - 0.000105820105820105*G1_0_3 - 0.000952380952380949*G1_0_4 - 0.000105820105820105*G1_0_5 + 0.000105820105820105*G1_1_0 - 5.29100529100529e-05*G1_1_1 - 0.000264550264550263*G1_1_2 - 0.000105820105820105*G1_1_3 + 0.000105820105820106*G1_1_4 + 0.000211640211640211*G1_1_5 - 0.000264550264550263*G1_2_0 - 0.000264550264550263*G1_2_1 + 0.00158730158730158*G1_2_2 + 0.00105820105820105*G1_2_3 + 0.00211640211640211*G1_2_4 + 0.000529100529100528*G1_2_5 - 0.000105820105820105*G1_3_0 - 0.000105820105820105*G1_3_1 + 0.00105820105820105*G1_3_2 - 0.000846560846560844*G1_3_5 - 0.000952380952380949*G1_4_0 + 0.000105820105820106*G1_4_1 + 0.00211640211640211*G1_4_2 - 0.00126984126984127*G1_4_5 - 0.000105820105820105*G1_5_0 + 0.000211640211640211*G1_5_1 + 0.000529100529100528*G1_5_2 - 0.000846560846560844*G1_5_3 - 0.00126984126984127*G1_5_4 - 0.00169312169312169*G1_5_5;
    A[41] = -0.000264550264550264*G1_0_0 + 0.000105820105820105*G1_0_1 - 5.29100529100528e-05*G1_0_2 + 0.000211640211640211*G1_0_3 - 0.000105820105820105*G1_0_4 + 0.000105820105820106*G1_0_5 + 0.000105820105820105*G1_1_0 - 0.000264550264550263*G1_1_1 - 5.29100529100528e-05*G1_1_2 - 0.000105820105820105*G1_1_3 + 0.000211640211640211*G1_1_4 + 0.000105820105820106*G1_1_5 - 5.29100529100528e-05*G1_2_0 - 5.29100529100528e-05*G1_2_1 + 0.000529100529100528*G1_2_3 + 0.000529100529100528*G1_2_4 + 0.000634920634920633*G1_2_5 + 0.000211640211640211*G1_3_0 - 0.000105820105820105*G1_3_1 + 0.000529100529100528*G1_3_2 - 0.00126984126984127*G1_3_3 - 0.000846560846560844*G1_3_4 - 0.00169312169312169*G1_3_5 - 0.000105820105820105*G1_4_0 + 0.000211640211640211*G1_4_1 + 0.000529100529100528*G1_4_2 - 0.000846560846560844*G1_4_3 - 0.00126984126984127*G1_4_4 - 0.00169312169312169*G1_4_5 + 0.000105820105820106*G1_5_0 + 0.000105820105820106*G1_5_1 + 0.000634920634920633*G1_5_2 - 0.00169312169312169*G1_5_3 - 0.00169312169312169*G1_5_4 - 0.00380952380952379*G1_5_5;
    A[42] = 0.0;
    A[43] = 0.0;
    A[44] = -0.166666666666666*G10_1;
    A[45] = -5.29100529100527e-05*G0_0_1 - 5.29100529100529e-05*G0_0_2 + 0.000634920634920633*G0_0_3 + 0.000529100529100528*G0_0_4 + 0.000529100529100528*G0_0_5 - 5.29100529100527e-05*G0_1_0 - 0.000264550264550264*G0_1_1 + 0.000105820105820105*G0_1_2 + 0.000105820105820105*G0_1_3 + 0.000211640211640211*G0_1_4 - 0.000105820105820105*G0_1_5 - 5.29100529100529e-05*G0_2_0 + 0.000105820105820105*G0_2_1 - 0.000264550264550263*G0_2_2 + 0.000105820105820106*G0_2_3 - 0.000105820105820105*G0_2_4 + 0.000211640211640211*G0_2_5 + 0.000634920634920633*G0_3_0 + 0.000105820105820105*G0_3_1 + 0.000105820105820106*G0_3_2 - 0.0038095238095238*G0_3_3 - 0.00169312169312169*G0_3_4 - 0.00169312169312169*G0_3_5 + 0.000529100529100528*G0_4_0 + 0.000211640211640211*G0_4_1 - 0.000105820105820105*G0_4_2 - 0.00169312169312169*G0_4_3 - 0.00126984126984126*G0_4_4 - 0.000846560846560844*G0_4_5 + 0.000529100529100528*G0_5_0 - 0.000105820105820105*G0_5_1 + 0.000211640211640211*G0_5_2 - 0.00169312169312169*G0_5_3 - 0.000846560846560844*G0_5_4 - 0.00126984126984127*G0_5_5;
    A[46] = -5.29100529100527e-05*G0_0_0 - 0.000264550264550264*G0_0_1 + 0.000105820105820105*G0_0_2 + 0.000105820105820105*G0_0_3 + 0.000211640211640211*G0_0_4 - 0.000105820105820105*G0_0_5 - 0.000264550264550264*G0_1_0 + 0.00158730158730158*G0_1_1 - 0.000264550264550264*G0_1_2 + 0.00211640211640211*G0_1_3 + 0.000529100529100527*G0_1_4 + 0.00105820105820105*G0_1_5 + 0.000105820105820105*G0_2_0 - 0.000264550264550264*G0_2_1 - 0.000264550264550263*G0_2_2 - 0.000952380952380948*G0_2_3 - 0.000105820105820105*G0_2_4 - 0.000105820105820105*G0_2_5 + 0.000105820105820105*G0_3_0 + 0.00211640211640211*G0_3_1 - 0.000952380952380948*G0_3_2 - 0.00126984126984127*G0_3_4 + 0.000211640211640211*G0_4_0 + 0.000529100529100527*G0_4_1 - 0.000105820105820105*G0_4_2 - 0.00126984126984127*G0_4_3 - 0.00169312169312169*G0_4_4 - 0.000846560846560844*G0_4_5 - 0.000105820105820105*G0_5_0 + 0.00105820105820105*G0_5_1 - 0.000105820105820105*G0_5_2 - 0.000846560846560844*G0_5_4 + 0.00266666666666665*G6_1_0 + 0.00266666666666665*G8_1_0;
    A[47] = -5.29100529100529e-05*G0_0_0 + 0.000105820105820105*G0_0_1 - 0.000264550264550263*G0_0_2 + 0.000105820105820106*G0_0_3 - 0.000105820105820105*G0_0_4 + 0.000211640211640211*G0_0_5 + 0.000105820105820105*G0_1_0 - 0.000264550264550264*G0_1_1 - 0.000264550264550263*G0_1_2 - 0.000952380952380948*G0_1_3 - 0.000105820105820105*G0_1_4 - 0.000105820105820105*G0_1_5 - 0.000264550264550263*G0_2_0 - 0.000264550264550263*G0_2_1 + 0.00158730158730158*G0_2_2 + 0.00211640211640211*G0_2_3 + 0.00105820105820105*G0_2_4 + 0.000529100529100528*G0_2_5 + 0.000105820105820106*G0_3_0 - 0.000952380952380948*G0_3_1 + 0.00211640211640211*G0_3_2 - 0.00126984126984127*G0_3_5 - 0.000105820105820105*G0_4_0 - 0.000105820105820105*G0_4_1 + 0.00105820105820105*G0_4_2 - 0.000846560846560844*G0_4_5 + 0.000211640211640211*G0_5_0 - 0.000105820105820105*G0_5_1 + 0.000529100529100528*G0_5_2 - 0.00126984126984127*G0_5_3 - 0.000846560846560844*G0_5_4 - 0.00169312169312169*G0_5_5 + 0.00266666666666665*G6_0_1 + 0.00266666666666665*G8_0_1;
    A[48] = 0.000634920634920633*G0_0_0 + 0.000105820105820105*G0_0_1 + 0.000105820105820106*G0_0_2 - 0.0038095238095238*G0_0_3 - 0.00169312169312169*G0_0_4 - 0.00169312169312169*G0_0_5 + 0.000105820105820105*G0_1_0 + 0.00211640211640211*G0_1_1 - 0.000952380952380948*G0_1_2 - 0.00126984126984127*G0_1_4 + 0.000105820105820106*G0_2_0 - 0.000952380952380948*G0_2_1 + 0.00211640211640211*G0_2_2 - 0.00126984126984127*G0_2_5 - 0.0038095238095238*G0_3_0 + 0.0406349206349205*G0_3_3 + 0.0101587301587301*G0_3_4 + 0.0101587301587301*G0_3_5 - 0.00169312169312169*G0_4_0 - 0.00126984126984127*G0_4_1 + 0.0101587301587301*G0_4_3 + 0.00677248677248675*G0_4_4 + 0.00507936507936506*G0_4_5 - 0.00169312169312169*G0_5_0 - 0.00126984126984127*G0_5_2 + 0.0101587301587301*G0_5_3 + 0.00507936507936506*G0_5_4 + 0.00677248677248675*G0_5_5 + 0.00533333333333331*G6_0_0 + 0.00266666666666665*G6_0_1 + 0.00266666666666665*G6_1_0 + 0.0053333333333333*G6_1_1 + 0.00533333333333331*G8_0_0 + 0.00266666666666665*G8_0_1 + 0.00266666666666665*G8_1_0 + 0.0053333333333333*G8_1_1;
    A[49] = 0.000529100529100528*G0_0_0 + 0.000211640211640211*G0_0_1 - 0.000105820105820105*G0_0_2 - 0.00169312169312169*G0_0_3 - 0.00126984126984126*G0_0_4 - 0.000846560846560844*G0_0_5 + 0.000211640211640211*G0_1_0 + 0.000529100529100527*G0_1_1 - 0.000105820105820105*G0_1_2 - 0.00126984126984127*G0_1_3 - 0.00169312169312169*G0_1_4 - 0.000846560846560844*G0_1_5 - 0.000105820105820105*G0_2_0 - 0.000105820105820105*G0_2_1 + 0.00105820105820105*G0_2_2 - 0.000846560846560844*G0_2_5 - 0.00169312169312169*G0_3_0 - 0.00126984126984127*G0_3_1 + 0.0101587301587301*G0_3_3 + 0.00677248677248675*G0_3_4 + 0.00507936507936506*G0_3_5 - 0.00126984126984126*G0_4_0 - 0.00169312169312169*G0_4_1 + 0.00677248677248675*G0_4_3 + 0.0101587301587301*G0_4_4 + 0.00507936507936506*G0_4_5 - 0.000846560846560844*G0_5_0 - 0.000846560846560844*G0_5_1 - 0.000846560846560844*G0_5_2 + 0.00507936507936506*G0_5_3 + 0.00507936507936507*G0_5_4 + 0.00507936507936506*G0_5_5 - 0.00533333333333331*G6_0_0 - 0.00266666666666665*G6_0_1 - 0.00266666666666665*G6_1_0 - 0.00533333333333331*G8_0_0 - 0.00266666666666665*G8_0_1 - 0.00266666666666665*G8_1_0;
    A[50] = 0.000529100529100528*G0_0_0 - 0.000105820105820105*G0_0_1 + 0.000211640211640211*G0_0_2 - 0.00169312169312169*G0_0_3 - 0.000846560846560844*G0_0_4 - 0.00126984126984127*G0_0_5 - 0.000105820105820105*G0_1_0 + 0.00105820105820105*G0_1_1 - 0.000105820105820105*G0_1_2 - 0.000846560846560844*G0_1_4 + 0.000211640211640211*G0_2_0 - 0.000105820105820105*G0_2_1 + 0.000529100529100528*G0_2_2 - 0.00126984126984127*G0_2_3 - 0.000846560846560844*G0_2_4 - 0.00169312169312169*G0_2_5 - 0.00169312169312169*G0_3_0 - 0.00126984126984127*G0_3_2 + 0.0101587301587301*G0_3_3 + 0.00507936507936506*G0_3_4 + 0.00677248677248675*G0_3_5 - 0.000846560846560844*G0_4_0 - 0.000846560846560844*G0_4_1 - 0.000846560846560844*G0_4_2 + 0.00507936507936506*G0_4_3 + 0.00507936507936506*G0_4_4 + 0.00507936507936506*G0_4_5 - 0.00126984126984127*G0_5_0 - 0.00169312169312169*G0_5_2 + 0.00677248677248675*G0_5_3 + 0.00507936507936506*G0_5_4 + 0.0101587301587301*G0_5_5 - 0.00266666666666665*G6_0_1 - 0.00266666666666665*G6_1_0 - 0.00533333333333331*G6_1_1 - 0.00266666666666665*G8_0_1 - 0.00266666666666665*G8_1_0 - 0.00533333333333331*G8_1_1;
    A[51] = -5.29100529100527e-05*G1_0_1 - 5.29100529100529e-05*G1_0_2 + 0.000634920634920633*G1_0_3 + 0.000529100529100528*G1_0_4 + 0.000529100529100528*G1_0_5 - 5.29100529100527e-05*G1_1_0 - 0.000264550264550264*G1_1_1 + 0.000105820105820105*G1_1_2 + 0.000105820105820105*G1_1_3 + 0.000211640211640211*G1_1_4 - 0.000105820105820105*G1_1_5 - 5.29100529100529e-05*G1_2_0 + 0.000105820105820105*G1_2_1 - 0.000264550264550263*G1_2_2 + 0.000105820105820106*G1_2_3 - 0.000105820105820105*G1_2_4 + 0.000211640211640211*G1_2_5 + 0.000634920634920633*G1_3_0 + 0.000105820105820105*G1_3_1 + 0.000105820105820106*G1_3_2 - 0.0038095238095238*G1_3_3 - 0.00169312169312169*G1_3_4 - 0.00169312169312169*G1_3_5 + 0.000529100529100528*G1_4_0 + 0.000211640211640211*G1_4_1 - 0.000105820105820105*G1_4_2 - 0.00169312169312169*G1_4_3 - 0.00126984126984126*G1_4_4 - 0.000846560846560844*G1_4_5 + 0.000529100529100528*G1_5_0 - 0.000105820105820105*G1_5_1 + 0.000211640211640211*G1_5_2 - 0.00169312169312169*G1_5_3 - 0.000846560846560844*G1_5_4 - 0.00126984126984127*G1_5_5;
    A[52] = -5.29100529100527e-05*G1_0_0 - 0.000264550264550264*G1_0_1 + 0.000105820105820105*G1_0_2 + 0.000105820105820105*G1_0_3 + 0.000211640211640211*G1_0_4 - 0.000105820105820105*G1_0_5 - 0.000264550264550264*G1_1_0 + 0.00158730158730158*G1_1_1 - 0.000264550264550264*G1_1_2 + 0.00211640211640211*G1_1_3 + 0.000529100529100527*G1_1_4 + 0.00105820105820105*G1_1_5 + 0.000105820105820105*G1_2_0 - 0.000264550264550264*G1_2_1 - 0.000264550264550263*G1_2_2 - 0.000952380952380948*G1_2_3 - 0.000105820105820105*G1_2_4 - 0.000105820105820105*G1_2_5 + 0.000105820105820105*G1_3_0 + 0.00211640211640211*G1_3_1 - 0.000952380952380948*G1_3_2 - 0.00126984126984127*G1_3_4 + 0.000211640211640211*G1_4_0 + 0.000529100529100527*G1_4_1 - 0.000105820105820105*G1_4_2 - 0.00126984126984127*G1_4_3 - 0.00169312169312169*G1_4_4 - 0.000846560846560844*G1_4_5 - 0.000105820105820105*G1_5_0 + 0.00105820105820105*G1_5_1 - 0.000105820105820105*G1_5_2 - 0.000846560846560844*G1_5_4;
    A[53] = -5.29100529100529e-05*G1_0_0 + 0.000105820105820105*G1_0_1 - 0.000264550264550263*G1_0_2 + 0.000105820105820106*G1_0_3 - 0.000105820105820105*G1_0_4 + 0.000211640211640211*G1_0_5 + 0.000105820105820105*G1_1_0 - 0.000264550264550264*G1_1_1 - 0.000264550264550263*G1_1_2 - 0.000952380952380948*G1_1_3 - 0.000105820105820105*G1_1_4 - 0.000105820105820105*G1_1_5 - 0.000264550264550263*G1_2_0 - 0.000264550264550263*G1_2_1 + 0.00158730158730158*G1_2_2 + 0.00211640211640211*G1_2_3 + 0.00105820105820105*G1_2_4 + 0.000529100529100528*G1_2_5 + 0.000105820105820106*G1_3_0 - 0.000952380952380948*G1_3_1 + 0.00211640211640211*G1_3_2 - 0.00126984126984127*G1_3_5 - 0.000105820105820105*G1_4_0 - 0.000105820105820105*G1_4_1 + 0.00105820105820105*G1_4_2 - 0.000846560846560844*G1_4_5 + 0.000211640211640211*G1_5_0 - 0.000105820105820105*G1_5_1 + 0.000529100529100528*G1_5_2 - 0.00126984126984127*G1_5_3 - 0.000846560846560844*G1_5_4 - 0.00169312169312169*G1_5_5;
    A[54] = 0.000634920634920633*G1_0_0 + 0.000105820105820105*G1_0_1 + 0.000105820105820106*G1_0_2 - 0.0038095238095238*G1_0_3 - 0.00169312169312169*G1_0_4 - 0.00169312169312169*G1_0_5 + 0.000105820105820105*G1_1_0 + 0.00211640211640211*G1_1_1 - 0.000952380952380948*G1_1_2 - 0.00126984126984127*G1_1_4 + 0.000105820105820106*G1_2_0 - 0.000952380952380948*G1_2_1 + 0.00211640211640211*G1_2_2 - 0.00126984126984127*G1_2_5 - 0.0038095238095238*G1_3_0 + 0.0406349206349205*G1_3_3 + 0.0101587301587301*G1_3_4 + 0.0101587301587301*G1_3_5 - 0.00169312169312169*G1_4_0 - 0.00126984126984127*G1_4_1 + 0.0101587301587301*G1_4_3 + 0.00677248677248675*G1_4_4 + 0.00507936507936506*G1_4_5 - 0.00169312169312169*G1_5_0 - 0.00126984126984127*G1_5_2 + 0.0101587301587301*G1_5_3 + 0.00507936507936506*G1_5_4 + 0.00677248677248675*G1_5_5;
    A[55] = 0.000529100529100528*G1_0_0 + 0.000211640211640211*G1_0_1 - 0.000105820105820105*G1_0_2 - 0.00169312169312169*G1_0_3 - 0.00126984126984126*G1_0_4 - 0.000846560846560844*G1_0_5 + 0.000211640211640211*G1_1_0 + 0.000529100529100527*G1_1_1 - 0.000105820105820105*G1_1_2 - 0.00126984126984127*G1_1_3 - 0.00169312169312169*G1_1_4 - 0.000846560846560844*G1_1_5 - 0.000105820105820105*G1_2_0 - 0.000105820105820105*G1_2_1 + 0.00105820105820105*G1_2_2 - 0.000846560846560844*G1_2_5 - 0.00169312169312169*G1_3_0 - 0.00126984126984127*G1_3_1 + 0.0101587301587301*G1_3_3 + 0.00677248677248675*G1_3_4 + 0.00507936507936506*G1_3_5 - 0.00126984126984126*G1_4_0 - 0.00169312169312169*G1_4_1 + 0.00677248677248675*G1_4_3 + 0.0101587301587301*G1_4_4 + 0.00507936507936506*G1_4_5 - 0.000846560846560844*G1_5_0 - 0.000846560846560844*G1_5_1 - 0.000846560846560844*G1_5_2 + 0.00507936507936506*G1_5_3 + 0.00507936507936507*G1_5_4 + 0.00507936507936506*G1_5_5;
    A[56] = 0.000529100529100528*G1_0_0 - 0.000105820105820105*G1_0_1 + 0.000211640211640211*G1_0_2 - 0.00169312169312169*G1_0_3 - 0.000846560846560844*G1_0_4 - 0.00126984126984127*G1_0_5 - 0.000105820105820105*G1_1_0 + 0.00105820105820105*G1_1_1 - 0.000105820105820105*G1_1_2 - 0.000846560846560844*G1_1_4 + 0.000211640211640211*G1_2_0 - 0.000105820105820105*G1_2_1 + 0.000529100529100528*G1_2_2 - 0.00126984126984127*G1_2_3 - 0.000846560846560844*G1_2_4 - 0.00169312169312169*G1_2_5 - 0.00169312169312169*G1_3_0 - 0.00126984126984127*G1_3_2 + 0.0101587301587301*G1_3_3 + 0.00507936507936506*G1_3_4 + 0.00677248677248675*G1_3_5 - 0.000846560846560844*G1_4_0 - 0.000846560846560844*G1_4_1 - 0.000846560846560844*G1_4_2 + 0.00507936507936506*G1_4_3 + 0.00507936507936506*G1_4_4 + 0.00507936507936506*G1_4_5 - 0.00126984126984127*G1_5_0 - 0.00169312169312169*G1_5_2 + 0.00677248677248675*G1_5_3 + 0.00507936507936506*G1_5_4 + 0.0101587301587301*G1_5_5;
    A[57] = -0.166666666666666*G10_0 - 0.166666666666666*G10_1;
    A[58] = -0.166666666666666*G10_0 - 0.333333333333332*G10_1;
    A[59] = -0.333333333333332*G10_0 - 0.166666666666666*G10_1;
    A[60] = 0.00158730158730158*G0_0_0 - 0.000264550264550264*G0_0_1 - 0.000264550264550263*G0_0_2 + 0.000529100529100528*G0_0_3 + 0.00211640211640211*G0_0_4 + 0.00105820105820105*G0_0_5 - 0.000264550264550264*G0_1_0 - 5.29100529100527e-05*G0_1_1 + 0.000105820105820105*G0_1_2 + 0.000211640211640211*G0_1_3 + 0.000105820105820105*G0_1_4 - 0.000105820105820105*G0_1_5 - 0.000264550264550263*G0_2_0 + 0.000105820105820105*G0_2_1 - 0.000264550264550263*G0_2_2 - 0.000105820105820105*G0_2_3 - 0.000952380952380949*G0_2_4 - 0.000105820105820105*G0_2_5 + 0.000529100529100528*G0_3_0 + 0.000211640211640211*G0_3_1 - 0.000105820105820105*G0_3_2 - 0.00169312169312169*G0_3_3 - 0.00126984126984126*G0_3_4 - 0.000846560846560844*G0_3_5 + 0.00211640211640211*G0_4_0 + 0.000105820105820105*G0_4_1 - 0.000952380952380949*G0_4_2 - 0.00126984126984126*G0_4_3 + 0.00105820105820105*G0_5_0 - 0.000105820105820105*G0_5_1 - 0.000105820105820105*G0_5_2 - 0.000846560846560844*G0_5_3 - 0.00266666666666665*G6_1_0 - 0.00266666666666665*G6_1_1 - 0.00266666666666665*G8_1_0 - 0.00266666666666665*G8_1_1;
    A[61] = -0.000264550264550264*G0_0_0 - 5.29100529100527e-05*G0_0_1 + 0.000105820105820106*G0_0_2 + 0.000211640211640211*G0_0_3 + 0.000105820105820105*G0_0_4 - 0.000105820105820105*G0_0_5 - 5.29100529100527e-05*G0_1_0 - 5.29100529100528e-05*G0_1_2 + 0.000529100529100527*G0_1_3 + 0.000634920634920633*G0_1_4 + 0.000529100529100527*G0_1_5 + 0.000105820105820105*G0_2_0 - 5.29100529100528e-05*G0_2_1 - 0.000264550264550263*G0_2_2 - 0.000105820105820105*G0_2_3 + 0.000105820105820106*G0_2_4 + 0.000211640211640211*G0_2_5 + 0.000211640211640211*G0_3_0 + 0.000529100529100527*G0_3_1 - 0.000105820105820105*G0_3_2 - 0.00126984126984127*G0_3_3 - 0.00169312169312169*G0_3_4 - 0.000846560846560844*G0_3_5 + 0.000105820105820105*G0_4_0 + 0.000634920634920633*G0_4_1 + 0.000105820105820106*G0_4_2 - 0.00169312169312169*G0_4_3 - 0.0038095238095238*G0_4_4 - 0.00169312169312169*G0_4_5 - 0.000105820105820105*G0_5_0 + 0.000529100529100527*G0_5_1 + 0.000211640211640211*G0_5_2 - 0.000846560846560844*G0_5_3 - 0.00169312169312169*G0_5_4 - 0.00126984126984127*G0_5_5;
    A[62] = -0.000264550264550263*G0_0_0 + 0.000105820105820106*G0_0_1 - 0.000264550264550263*G0_0_2 - 0.000105820105820105*G0_0_3 - 0.000952380952380949*G0_0_4 - 0.000105820105820105*G0_0_5 + 0.000105820105820105*G0_1_0 - 5.29100529100528e-05*G0_1_1 - 0.000264550264550263*G0_1_2 - 0.000105820105820105*G0_1_3 + 0.000105820105820106*G0_1_4 + 0.000211640211640211*G0_1_5 - 0.000264550264550263*G0_2_0 - 0.000264550264550263*G0_2_1 + 0.00158730158730158*G0_2_2 + 0.00105820105820105*G0_2_3 + 0.00211640211640211*G0_2_4 + 0.000529100529100528*G0_2_5 - 0.000105820105820105*G0_3_0 - 0.000105820105820105*G0_3_1 + 0.00105820105820105*G0_3_2 - 0.000846560846560844*G0_3_5 - 0.000952380952380949*G0_4_0 + 0.000105820105820106*G0_4_1 + 0.00211640211640211*G0_4_2 - 0.00126984126984127*G0_4_5 - 0.000105820105820105*G0_5_0 + 0.000211640211640211*G0_5_1 + 0.000529100529100528*G0_5_2 - 0.000846560846560844*G0_5_3 - 0.00126984126984127*G0_5_4 - 0.00169312169312169*G0_5_5 - 0.00266666666666666*G6_0_1 - 0.00266666666666665*G6_1_1 - 0.00266666666666666*G8_0_1 - 0.00266666666666665*G8_1_1;
    A[63] = 0.000529100529100528*G0_0_0 + 0.000211640211640211*G0_0_1 - 0.000105820105820106*G0_0_2 - 0.00169312169312169*G0_0_3 - 0.00126984126984126*G0_0_4 - 0.000846560846560844*G0_0_5 + 0.000211640211640211*G0_1_0 + 0.000529100529100527*G0_1_1 - 0.000105820105820105*G0_1_2 - 0.00126984126984127*G0_1_3 - 0.00169312169312169*G0_1_4 - 0.000846560846560844*G0_1_5 - 0.000105820105820105*G0_2_0 - 0.000105820105820105*G0_2_1 + 0.00105820105820105*G0_2_2 - 0.000846560846560844*G0_2_5 - 0.00169312169312169*G0_3_0 - 0.00126984126984127*G0_3_1 + 0.0101587301587301*G0_3_3 + 0.00677248677248675*G0_3_4 + 0.00507936507936506*G0_3_5 - 0.00126984126984126*G0_4_0 - 0.00169312169312169*G0_4_1 + 0.00677248677248675*G0_4_3 + 0.0101587301587301*G0_4_4 + 0.00507936507936507*G0_4_5 - 0.000846560846560844*G0_5_0 - 0.000846560846560844*G0_5_1 - 0.000846560846560844*G0_5_2 + 0.00507936507936506*G0_5_3 + 0.00507936507936506*G0_5_4 + 0.00507936507936506*G0_5_5 - 0.00533333333333331*G6_0_0 - 0.00266666666666665*G6_0_1 - 0.00266666666666665*G6_1_0 - 0.00533333333333331*G8_0_0 - 0.00266666666666665*G8_0_1 - 0.00266666666666665*G8_1_0;
    A[64] = 0.00211640211640211*G0_0_0 + 0.000105820105820105*G0_0_1 - 0.000952380952380949*G0_0_2 - 0.00126984126984126*G0_0_3 + 0.000105820105820105*G0_1_0 + 0.000634920634920633*G0_1_1 + 0.000105820105820106*G0_1_2 - 0.00169312169312169*G0_1_3 - 0.0038095238095238*G0_1_4 - 0.00169312169312169*G0_1_5 - 0.000952380952380949*G0_2_0 + 0.000105820105820106*G0_2_1 + 0.00211640211640211*G0_2_2 - 0.00126984126984127*G0_2_5 - 0.00126984126984126*G0_3_0 - 0.00169312169312169*G0_3_1 + 0.00677248677248675*G0_3_3 + 0.0101587301587301*G0_3_4 + 0.00507936507936506*G0_3_5 - 0.0038095238095238*G0_4_1 + 0.0101587301587301*G0_4_3 + 0.0406349206349205*G0_4_4 + 0.0101587301587301*G0_4_5 - 0.00169312169312169*G0_5_1 - 0.00126984126984127*G0_5_2 + 0.00507936507936507*G0_5_3 + 0.0101587301587301*G0_5_4 + 0.00677248677248675*G0_5_5 + 0.00533333333333331*G6_0_0 + 0.00266666666666665*G6_0_1 + 0.00266666666666665*G6_1_0 + 0.00533333333333331*G6_1_1 + 0.00533333333333331*G8_0_0 + 0.00266666666666665*G8_0_1 + 0.00266666666666665*G8_1_0 + 0.00533333333333331*G8_1_1;
    A[65] = 0.00105820105820105*G0_0_0 - 0.000105820105820105*G0_0_1 - 0.000105820105820105*G0_0_2 - 0.000846560846560844*G0_0_3 - 0.000105820105820105*G0_1_0 + 0.000529100529100527*G0_1_1 + 0.000211640211640211*G0_1_2 - 0.000846560846560844*G0_1_3 - 0.00169312169312169*G0_1_4 - 0.00126984126984127*G0_1_5 - 0.000105820105820105*G0_2_0 + 0.000211640211640211*G0_2_1 + 0.000529100529100528*G0_2_2 - 0.000846560846560844*G0_2_3 - 0.00126984126984127*G0_2_4 - 0.00169312169312169*G0_2_5 - 0.000846560846560844*G0_3_0 - 0.000846560846560844*G0_3_1 - 0.000846560846560844*G0_3_2 + 0.00507936507936506*G0_3_3 + 0.00507936507936506*G0_3_4 + 0.00507936507936506*G0_3_5 - 0.00169312169312169*G0_4_1 - 0.00126984126984127*G0_4_2 + 0.00507936507936506*G0_4_3 + 0.0101587301587301*G0_4_4 + 0.00677248677248675*G0_4_5 - 0.00126984126984127*G0_5_1 - 0.00169312169312169*G0_5_2 + 0.00507936507936506*G0_5_3 + 0.00677248677248675*G0_5_4 + 0.0101587301587301*G0_5_5 + 0.00266666666666666*G6_0_1 + 0.00266666666666665*G6_1_0 + 0.00266666666666666*G8_0_1 + 0.00266666666666665*G8_1_0;
    A[66] = 0.00158730158730158*G1_0_0 - 0.000264550264550264*G1_0_1 - 0.000264550264550263*G1_0_2 + 0.000529100529100528*G1_0_3 + 0.00211640211640211*G1_0_4 + 0.00105820105820105*G1_0_5 - 0.000264550264550264*G1_1_0 - 5.29100529100527e-05*G1_1_1 + 0.000105820105820105*G1_1_2 + 0.000211640211640211*G1_1_3 + 0.000105820105820105*G1_1_4 - 0.000105820105820105*G1_1_5 - 0.000264550264550263*G1_2_0 + 0.000105820105820105*G1_2_1 - 0.000264550264550263*G1_2_2 - 0.000105820105820105*G1_2_3 - 0.000952380952380949*G1_2_4 - 0.000105820105820105*G1_2_5 + 0.000529100529100528*G1_3_0 + 0.000211640211640211*G1_3_1 - 0.000105820105820105*G1_3_2 - 0.00169312169312169*G1_3_3 - 0.00126984126984126*G1_3_4 - 0.000846560846560844*G1_3_5 + 0.00211640211640211*G1_4_0 + 0.000105820105820105*G1_4_1 - 0.000952380952380949*G1_4_2 - 0.00126984126984126*G1_4_3 + 0.00105820105820105*G1_5_0 - 0.000105820105820105*G1_5_1 - 0.000105820105820105*G1_5_2 - 0.000846560846560844*G1_5_3;
    A[67] = -0.000264550264550264*G1_0_0 - 5.29100529100527e-05*G1_0_1 + 0.000105820105820106*G1_0_2 + 0.000211640211640211*G1_0_3 + 0.000105820105820105*G1_0_4 - 0.000105820105820105*G1_0_5 - 5.29100529100527e-05*G1_1_0 - 5.29100529100528e-05*G1_1_2 + 0.000529100529100527*G1_1_3 + 0.000634920634920633*G1_1_4 + 0.000529100529100527*G1_1_5 + 0.000105820105820105*G1_2_0 - 5.29100529100528e-05*G1_2_1 - 0.000264550264550263*G1_2_2 - 0.000105820105820105*G1_2_3 + 0.000105820105820106*G1_2_4 + 0.000211640211640211*G1_2_5 + 0.000211640211640211*G1_3_0 + 0.000529100529100527*G1_3_1 - 0.000105820105820105*G1_3_2 - 0.00126984126984127*G1_3_3 - 0.00169312169312169*G1_3_4 - 0.000846560846560844*G1_3_5 + 0.000105820105820105*G1_4_0 + 0.000634920634920633*G1_4_1 + 0.000105820105820106*G1_4_2 - 0.00169312169312169*G1_4_3 - 0.0038095238095238*G1_4_4 - 0.00169312169312169*G1_4_5 - 0.000105820105820105*G1_5_0 + 0.000529100529100527*G1_5_1 + 0.000211640211640211*G1_5_2 - 0.000846560846560844*G1_5_3 - 0.00169312169312169*G1_5_4 - 0.00126984126984127*G1_5_5;
    A[68] = -0.000264550264550263*G1_0_0 + 0.000105820105820106*G1_0_1 - 0.000264550264550263*G1_0_2 - 0.000105820105820105*G1_0_3 - 0.000952380952380949*G1_0_4 - 0.000105820105820105*G1_0_5 + 0.000105820105820105*G1_1_0 - 5.29100529100528e-05*G1_1_1 - 0.000264550264550263*G1_1_2 - 0.000105820105820105*G1_1_3 + 0.000105820105820106*G1_1_4 + 0.000211640211640211*G1_1_5 - 0.000264550264550263*G1_2_0 - 0.000264550264550263*G1_2_1 + 0.00158730158730158*G1_2_2 + 0.00105820105820105*G1_2_3 + 0.00211640211640211*G1_2_4 + 0.000529100529100528*G1_2_5 - 0.000105820105820105*G1_3_0 - 0.000105820105820105*G1_3_1 + 0.00105820105820105*G1_3_2 - 0.000846560846560844*G1_3_5 - 0.000952380952380949*G1_4_0 + 0.000105820105820106*G1_4_1 + 0.00211640211640211*G1_4_2 - 0.00126984126984127*G1_4_5 - 0.000105820105820105*G1_5_0 + 0.000211640211640211*G1_5_1 + 0.000529100529100528*G1_5_2 - 0.000846560846560844*G1_5_3 - 0.00126984126984127*G1_5_4 - 0.00169312169312169*G1_5_5;
    A[69] = 0.000529100529100528*G1_0_0 + 0.000211640211640211*G1_0_1 - 0.000105820105820106*G1_0_2 - 0.00169312169312169*G1_0_3 - 0.00126984126984126*G1_0_4 - 0.000846560846560844*G1_0_5 + 0.000211640211640211*G1_1_0 + 0.000529100529100527*G1_1_1 - 0.000105820105820105*G1_1_2 - 0.00126984126984127*G1_1_3 - 0.00169312169312169*G1_1_4 - 0.000846560846560844*G1_1_5 - 0.000105820105820105*G1_2_0 - 0.000105820105820105*G1_2_1 + 0.00105820105820105*G1_2_2 - 0.000846560846560844*G1_2_5 - 0.00169312169312169*G1_3_0 - 0.00126984126984127*G1_3_1 + 0.0101587301587301*G1_3_3 + 0.00677248677248675*G1_3_4 + 0.00507936507936506*G1_3_5 - 0.00126984126984126*G1_4_0 - 0.00169312169312169*G1_4_1 + 0.00677248677248675*G1_4_3 + 0.0101587301587301*G1_4_4 + 0.00507936507936507*G1_4_5 - 0.000846560846560844*G1_5_0 - 0.000846560846560844*G1_5_1 - 0.000846560846560844*G1_5_2 + 0.00507936507936506*G1_5_3 + 0.00507936507936506*G1_5_4 + 0.00507936507936506*G1_5_5;
    A[70] = 0.00211640211640211*G1_0_0 + 0.000105820105820105*G1_0_1 - 0.000952380952380949*G1_0_2 - 0.00126984126984126*G1_0_3 + 0.000105820105820105*G1_1_0 + 0.000634920634920633*G1_1_1 + 0.000105820105820106*G1_1_2 - 0.00169312169312169*G1_1_3 - 0.0038095238095238*G1_1_4 - 0.00169312169312169*G1_1_5 - 0.000952380952380949*G1_2_0 + 0.000105820105820106*G1_2_1 + 0.00211640211640211*G1_2_2 - 0.00126984126984127*G1_2_5 - 0.00126984126984126*G1_3_0 - 0.00169312169312169*G1_3_1 + 0.00677248677248675*G1_3_3 + 0.0101587301587301*G1_3_4 + 0.00507936507936506*G1_3_5 - 0.0038095238095238*G1_4_1 + 0.0101587301587301*G1_4_3 + 0.0406349206349205*G1_4_4 + 0.0101587301587301*G1_4_5 - 0.00169312169312169*G1_5_1 - 0.00126984126984127*G1_5_2 + 0.00507936507936507*G1_5_3 + 0.0101587301587301*G1_5_4 + 0.00677248677248675*G1_5_5;
    A[71] = 0.00105820105820105*G1_0_0 - 0.000105820105820105*G1_0_1 - 0.000105820105820105*G1_0_2 - 0.000846560846560844*G1_0_3 - 0.000105820105820105*G1_1_0 + 0.000529100529100527*G1_1_1 + 0.000211640211640211*G1_1_2 - 0.000846560846560844*G1_1_3 - 0.00169312169312169*G1_1_4 - 0.00126984126984127*G1_1_5 - 0.000105820105820105*G1_2_0 + 0.000211640211640211*G1_2_1 + 0.000529100529100528*G1_2_2 - 0.000846560846560844*G1_2_3 - 0.00126984126984127*G1_2_4 - 0.00169312169312169*G1_2_5 - 0.000846560846560844*G1_3_0 - 0.000846560846560844*G1_3_1 - 0.000846560846560844*G1_3_2 + 0.00507936507936506*G1_3_3 + 0.00507936507936506*G1_3_4 + 0.00507936507936506*G1_3_5 - 0.00169312169312169*G1_4_1 - 0.00126984126984127*G1_4_2 + 0.00507936507936506*G1_4_3 + 0.0101587301587301*G1_4_4 + 0.00677248677248675*G1_4_5 - 0.00126984126984127*G1_5_1 - 0.00169312169312169*G1_5_2 + 0.00507936507936506*G1_5_3 + 0.00677248677248675*G1_5_4 + 0.0101587301587301*G1_5_5;
    A[72] = 0.166666666666666*G10_0 - 0.166666666666666*G10_1;
    A[73] = 0.166666666666666*G10_0;
    A[74] = 0.333333333333332*G10_0 + 0.166666666666666*G10_1;
    A[75] = 0.00158730158730158*G0_0_0 - 0.000264550264550263*G0_0_1 - 0.000264550264550264*G0_0_2 + 0.000529100529100528*G0_0_3 + 0.00105820105820105*G0_0_4 + 0.00211640211640211*G0_0_5 - 0.000264550264550263*G0_1_0 - 0.000264550264550263*G0_1_1 + 0.000105820105820105*G0_1_2 - 0.000105820105820105*G0_1_3 - 0.000105820105820105*G0_1_4 - 0.000952380952380948*G0_1_5 - 0.000264550264550264*G0_2_0 + 0.000105820105820105*G0_2_1 - 5.29100529100528e-05*G0_2_2 + 0.000211640211640211*G0_2_3 - 0.000105820105820105*G0_2_4 + 0.000105820105820106*G0_2_5 + 0.000529100529100528*G0_3_0 - 0.000105820105820105*G0_3_1 + 0.000211640211640211*G0_3_2 - 0.00169312169312169*G0_3_3 - 0.000846560846560844*G0_3_4 - 0.00126984126984127*G0_3_5 + 0.00105820105820105*G0_4_0 - 0.000105820105820105*G0_4_1 - 0.000105820105820105*G0_4_2 - 0.000846560846560844*G0_4_3 + 0.00211640211640211*G0_5_0 - 0.000952380952380948*G0_5_1 + 0.000105820105820106*G0_5_2 - 0.00126984126984127*G0_5_3 - 0.00266666666666665*G6_0_0 - 0.00266666666666665*G6_0_1 - 0.00266666666666665*G8_0_0 - 0.00266666666666665*G8_0_1;
    A[76] = -0.000264550264550263*G0_0_0 - 0.000264550264550263*G0_0_1 + 0.000105820105820105*G0_0_2 - 0.000105820105820105*G0_0_3 - 0.000105820105820105*G0_0_4 - 0.000952380952380948*G0_0_5 - 0.000264550264550263*G0_1_0 + 0.00158730158730158*G0_1_1 - 0.000264550264550264*G0_1_2 + 0.00105820105820105*G0_1_3 + 0.000529100529100527*G0_1_4 + 0.00211640211640211*G0_1_5 + 0.000105820105820105*G0_2_0 - 0.000264550264550264*G0_2_1 - 5.29100529100528e-05*G0_2_2 - 0.000105820105820105*G0_2_3 + 0.000211640211640211*G0_2_4 + 0.000105820105820106*G0_2_5 - 0.000105820105820105*G0_3_0 + 0.00105820105820105*G0_3_1 - 0.000105820105820105*G0_3_2 - 0.000846560846560844*G0_3_4 - 0.000105820105820105*G0_4_0 + 0.000529100529100527*G0_4_1 + 0.000211640211640211*G0_4_2 - 0.000846560846560844*G0_4_3 - 0.00169312169312169*G0_4_4 - 0.00126984126984127*G0_4_5 - 0.000952380952380948*G0_5_0 + 0.00211640211640211*G0_5_1 + 0.000105820105820106*G0_5_2 - 0.00126984126984127*G0_5_4 - 0.00266666666666665*G6_0_0 - 0.00266666666666665*G6_1_0 - 0.00266666666666665*G8_0_0 - 0.00266666666666665*G8_1_0;
    A[77] = -0.000264550264550264*G0_0_0 + 0.000105820105820105*G0_0_1 - 5.29100529100528e-05*G0_0_2 + 0.000211640211640211*G0_0_3 - 0.000105820105820105*G0_0_4 + 0.000105820105820106*G0_0_5 + 0.000105820105820105*G0_1_0 - 0.000264550264550263*G0_1_1 - 5.29100529100528e-05*G0_1_2 - 0.000105820105820105*G0_1_3 + 0.000211640211640211*G0_1_4 + 0.000105820105820106*G0_1_5 - 5.29100529100528e-05*G0_2_0 - 5.29100529100528e-05*G0_2_1 + 0.000529100529100528*G0_2_3 + 0.000529100529100528*G0_2_4 + 0.000634920634920633*G0_2_5 + 0.000211640211640211*G0_3_0 - 0.000105820105820105*G0_3_1 + 0.000529100529100528*G0_3_2 - 0.00126984126984127*G0_3_3 - 0.000846560846560844*G0_3_4 - 0.00169312169312169*G0_3_5 - 0.000105820105820105*G0_4_0 + 0.000211640211640211*G0_4_1 + 0.000529100529100528*G0_4_2 - 0.000846560846560844*G0_4_3 - 0.00126984126984127*G0_4_4 - 0.00169312169312169*G0_4_5 + 0.000105820105820106*G0_5_0 + 0.000105820105820106*G0_5_1 + 0.000634920634920633*G0_5_2 - 0.00169312169312169*G0_5_3 - 0.00169312169312169*G0_5_4 - 0.00380952380952379*G0_5_5;
    A[78] = 0.000529100529100528*G0_0_0 - 0.000105820105820105*G0_0_1 + 0.000211640211640211*G0_0_2 - 0.00169312169312169*G0_0_3 - 0.000846560846560844*G0_0_4 - 0.00126984126984127*G0_0_5 - 0.000105820105820105*G0_1_0 + 0.00105820105820105*G0_1_1 - 0.000105820105820105*G0_1_2 - 0.000846560846560844*G0_1_4 + 0.000211640211640211*G0_2_0 - 0.000105820105820105*G0_2_1 + 0.000529100529100528*G0_2_2 - 0.00126984126984127*G0_2_3 - 0.000846560846560844*G0_2_4 - 0.00169312169312169*G0_2_5 - 0.00169312169312169*G0_3_0 - 0.00126984126984127*G0_3_2 + 0.0101587301587301*G0_3_3 + 0.00507936507936506*G0_3_4 + 0.00677248677248675*G0_3_5 - 0.000846560846560844*G0_4_0 - 0.000846560846560844*G0_4_1 - 0.000846560846560844*G0_4_2 + 0.00507936507936506*G0_4_3 + 0.00507936507936506*G0_4_4 + 0.00507936507936506*G0_4_5 - 0.00126984126984127*G0_5_0 - 0.00169312169312169*G0_5_2 + 0.00677248677248675*G0_5_3 + 0.00507936507936506*G0_5_4 + 0.0101587301587301*G0_5_5 - 0.00266666666666665*G6_0_1 - 0.00266666666666665*G6_1_0 - 0.00533333333333331*G6_1_1 - 0.00266666666666665*G8_0_1 - 0.00266666666666665*G8_1_0 - 0.00533333333333331*G8_1_1;
    A[79] = 0.00105820105820105*G0_0_0 - 0.000105820105820105*G0_0_1 - 0.000105820105820105*G0_0_2 - 0.000846560846560844*G0_0_3 - 0.000105820105820105*G0_1_0 + 0.000529100529100527*G0_1_1 + 0.000211640211640211*G0_1_2 - 0.000846560846560844*G0_1_3 - 0.00169312169312169*G0_1_4 - 0.00126984126984127*G0_1_5 - 0.000105820105820105*G0_2_0 + 0.000211640211640211*G0_2_1 + 0.000529100529100528*G0_2_2 - 0.000846560846560844*G0_2_3 - 0.00126984126984127*G0_2_4 - 0.00169312169312169*G0_2_5 - 0.000846560846560844*G0_3_0 - 0.000846560846560844*G0_3_1 - 0.000846560846560844*G0_3_2 + 0.00507936507936506*G0_3_3 + 0.00507936507936506*G0_3_4 + 0.00507936507936506*G0_3_5 - 0.00169312169312169*G0_4_1 - 0.00126984126984127*G0_4_2 + 0.00507936507936507*G0_4_3 + 0.0101587301587301*G0_4_4 + 0.00677248677248675*G0_4_5 - 0.00126984126984127*G0_5_1 - 0.00169312169312169*G0_5_2 + 0.00507936507936506*G0_5_3 + 0.00677248677248675*G0_5_4 + 0.0101587301587301*G0_5_5 + 0.00266666666666665*G6_0_1 + 0.00266666666666666*G6_1_0 + 0.00266666666666665*G8_0_1 + 0.00266666666666666*G8_1_0;
    A[80] = 0.00211640211640211*G0_0_0 - 0.000952380952380948*G0_0_1 + 0.000105820105820106*G0_0_2 - 0.00126984126984127*G0_0_3 - 0.000952380952380948*G0_1_0 + 0.00211640211640211*G0_1_1 + 0.000105820105820106*G0_1_2 - 0.00126984126984127*G0_1_4 + 0.000105820105820106*G0_2_0 + 0.000105820105820106*G0_2_1 + 0.000634920634920633*G0_2_2 - 0.00169312169312169*G0_2_3 - 0.00169312169312169*G0_2_4 - 0.0038095238095238*G0_2_5 - 0.00126984126984127*G0_3_0 - 0.00169312169312169*G0_3_2 + 0.00677248677248675*G0_3_3 + 0.00507936507936506*G0_3_4 + 0.0101587301587301*G0_3_5 - 0.00126984126984127*G0_4_1 - 0.00169312169312169*G0_4_2 + 0.00507936507936506*G0_4_3 + 0.00677248677248675*G0_4_4 + 0.0101587301587301*G0_4_5 - 0.00380952380952379*G0_5_2 + 0.0101587301587301*G0_5_3 + 0.0101587301587301*G0_5_4 + 0.0406349206349204*G0_5_5 + 0.00533333333333331*G6_0_0 + 0.00266666666666665*G6_0_1 + 0.00266666666666665*G6_1_0 + 0.00533333333333331*G6_1_1 + 0.00533333333333331*G8_0_0 + 0.00266666666666665*G8_0_1 + 0.00266666666666665*G8_1_0 + 0.00533333333333331*G8_1_1;
    A[81] = 0.00158730158730158*G1_0_0 - 0.000264550264550263*G1_0_1 - 0.000264550264550264*G1_0_2 + 0.000529100529100528*G1_0_3 + 0.00105820105820105*G1_0_4 + 0.00211640211640211*G1_0_5 - 0.000264550264550263*G1_1_0 - 0.000264550264550263*G1_1_1 + 0.000105820105820105*G1_1_2 - 0.000105820105820105*G1_1_3 - 0.000105820105820105*G1_1_4 - 0.000952380952380948*G1_1_5 - 0.000264550264550264*G1_2_0 + 0.000105820105820105*G1_2_1 - 5.29100529100528e-05*G1_2_2 + 0.000211640211640211*G1_2_3 - 0.000105820105820105*G1_2_4 + 0.000105820105820106*G1_2_5 + 0.000529100529100528*G1_3_0 - 0.000105820105820105*G1_3_1 + 0.000211640211640211*G1_3_2 - 0.00169312169312169*G1_3_3 - 0.000846560846560844*G1_3_4 - 0.00126984126984127*G1_3_5 + 0.00105820105820105*G1_4_0 - 0.000105820105820105*G1_4_1 - 0.000105820105820105*G1_4_2 - 0.000846560846560844*G1_4_3 + 0.00211640211640211*G1_5_0 - 0.000952380952380948*G1_5_1 + 0.000105820105820106*G1_5_2 - 0.00126984126984127*G1_5_3;
    A[82] = -0.000264550264550263*G1_0_0 - 0.000264550264550263*G1_0_1 + 0.000105820105820105*G1_0_2 - 0.000105820105820105*G1_0_3 - 0.000105820105820105*G1_0_4 - 0.000952380952380948*G1_0_5 - 0.000264550264550263*G1_1_0 + 0.00158730158730158*G1_1_1 - 0.000264550264550264*G1_1_2 + 0.00105820105820105*G1_1_3 + 0.000529100529100527*G1_1_4 + 0.00211640211640211*G1_1_5 + 0.000105820105820105*G1_2_0 - 0.000264550264550264*G1_2_1 - 5.29100529100528e-05*G1_2_2 - 0.000105820105820105*G1_2_3 + 0.000211640211640211*G1_2_4 + 0.000105820105820106*G1_2_5 - 0.000105820105820105*G1_3_0 + 0.00105820105820105*G1_3_1 - 0.000105820105820105*G1_3_2 - 0.000846560846560844*G1_3_4 - 0.000105820105820105*G1_4_0 + 0.000529100529100527*G1_4_1 + 0.000211640211640211*G1_4_2 - 0.000846560846560844*G1_4_3 - 0.00169312169312169*G1_4_4 - 0.00126984126984127*G1_4_5 - 0.000952380952380948*G1_5_0 + 0.00211640211640211*G1_5_1 + 0.000105820105820106*G1_5_2 - 0.00126984126984127*G1_5_4;
    A[83] = -0.000264550264550264*G1_0_0 + 0.000105820105820105*G1_0_1 - 5.29100529100528e-05*G1_0_2 + 0.000211640211640211*G1_0_3 - 0.000105820105820105*G1_0_4 + 0.000105820105820106*G1_0_5 + 0.000105820105820105*G1_1_0 - 0.000264550264550263*G1_1_1 - 5.29100529100528e-05*G1_1_2 - 0.000105820105820105*G1_1_3 + 0.000211640211640211*G1_1_4 + 0.000105820105820106*G1_1_5 - 5.29100529100528e-05*G1_2_0 - 5.29100529100528e-05*G1_2_1 + 0.000529100529100528*G1_2_3 + 0.000529100529100528*G1_2_4 + 0.000634920634920633*G1_2_5 + 0.000211640211640211*G1_3_0 - 0.000105820105820105*G1_3_1 + 0.000529100529100528*G1_3_2 - 0.00126984126984127*G1_3_3 - 0.000846560846560844*G1_3_4 - 0.00169312169312169*G1_3_5 - 0.000105820105820105*G1_4_0 + 0.000211640211640211*G1_4_1 + 0.000529100529100528*G1_4_2 - 0.000846560846560844*G1_4_3 - 0.00126984126984127*G1_4_4 - 0.00169312169312169*G1_4_5 + 0.000105820105820106*G1_5_0 + 0.000105820105820106*G1_5_1 + 0.000634920634920633*G1_5_2 - 0.00169312169312169*G1_5_3 - 0.00169312169312169*G1_5_4 - 0.00380952380952379*G1_5_5;
    A[84] = 0.000529100529100528*G1_0_0 - 0.000105820105820105*G1_0_1 + 0.000211640211640211*G1_0_2 - 0.00169312169312169*G1_0_3 - 0.000846560846560844*G1_0_4 - 0.00126984126984127*G1_0_5 - 0.000105820105820105*G1_1_0 + 0.00105820105820105*G1_1_1 - 0.000105820105820105*G1_1_2 - 0.000846560846560844*G1_1_4 + 0.000211640211640211*G1_2_0 - 0.000105820105820105*G1_2_1 + 0.000529100529100528*G1_2_2 - 0.00126984126984127*G1_2_3 - 0.000846560846560844*G1_2_4 - 0.00169312169312169*G1_2_5 - 0.00169312169312169*G1_3_0 - 0.00126984126984127*G1_3_2 + 0.0101587301587301*G1_3_3 + 0.00507936507936506*G1_3_4 + 0.00677248677248675*G1_3_5 - 0.000846560846560844*G1_4_0 - 0.000846560846560844*G1_4_1 - 0.000846560846560844*G1_4_2 + 0.00507936507936506*G1_4_3 + 0.00507936507936506*G1_4_4 + 0.00507936507936506*G1_4_5 - 0.00126984126984127*G1_5_0 - 0.00169312169312169*G1_5_2 + 0.00677248677248675*G1_5_3 + 0.00507936507936506*G1_5_4 + 0.0101587301587301*G1_5_5;
    A[85] = 0.00105820105820105*G1_0_0 - 0.000105820105820105*G1_0_1 - 0.000105820105820105*G1_0_2 - 0.000846560846560844*G1_0_3 - 0.000105820105820105*G1_1_0 + 0.000529100529100527*G1_1_1 + 0.000211640211640211*G1_1_2 - 0.000846560846560844*G1_1_3 - 0.00169312169312169*G1_1_4 - 0.00126984126984127*G1_1_5 - 0.000105820105820105*G1_2_0 + 0.000211640211640211*G1_2_1 + 0.000529100529100528*G1_2_2 - 0.000846560846560844*G1_2_3 - 0.00126984126984127*G1_2_4 - 0.00169312169312169*G1_2_5 - 0.000846560846560844*G1_3_0 - 0.000846560846560844*G1_3_1 - 0.000846560846560844*G1_3_2 + 0.00507936507936506*G1_3_3 + 0.00507936507936506*G1_3_4 + 0.00507936507936506*G1_3_5 - 0.00169312169312169*G1_4_1 - 0.00126984126984127*G1_4_2 + 0.00507936507936507*G1_4_3 + 0.0101587301587301*G1_4_4 + 0.00677248677248675*G1_4_5 - 0.00126984126984127*G1_5_1 - 0.00169312169312169*G1_5_2 + 0.00507936507936506*G1_5_3 + 0.00677248677248675*G1_5_4 + 0.0101587301587301*G1_5_5;
    A[86] = 0.00211640211640211*G1_0_0 - 0.000952380952380948*G1_0_1 + 0.000105820105820106*G1_0_2 - 0.00126984126984127*G1_0_3 - 0.000952380952380948*G1_1_0 + 0.00211640211640211*G1_1_1 + 0.000105820105820106*G1_1_2 - 0.00126984126984127*G1_1_4 + 0.000105820105820106*G1_2_0 + 0.000105820105820106*G1_2_1 + 0.000634920634920633*G1_2_2 - 0.00169312169312169*G1_2_3 - 0.00169312169312169*G1_2_4 - 0.0038095238095238*G1_2_5 - 0.00126984126984127*G1_3_0 - 0.00169312169312169*G1_3_2 + 0.00677248677248675*G1_3_3 + 0.00507936507936506*G1_3_4 + 0.0101587301587301*G1_3_5 - 0.00126984126984127*G1_4_1 - 0.00169312169312169*G1_4_2 + 0.00507936507936506*G1_4_3 + 0.00677248677248675*G1_4_4 + 0.0101587301587301*G1_4_5 - 0.00380952380952379*G1_5_2 + 0.0101587301587301*G1_5_3 + 0.0101587301587301*G1_5_4 + 0.0406349206349204*G1_5_5;
    A[87] = -0.166666666666666*G10_0 + 0.166666666666666*G10_1;
    A[88] = 0.166666666666666*G10_0 + 0.333333333333332*G10_1;
    A[89] = 0.166666666666666*G10_1;
    A[90] = 0.00476190476190473*G2_0_0 - 0.000396825396825395*G2_0_1 - 0.000396825396825395*G2_0_2 + 0.00158730158730158*G2_0_4 + 0.00158730158730158*G2_0_5 - 0.000396825396825395*G2_1_0 + 0.000158730158730158*G2_1_1 + 2.64550264550264e-05*G2_1_2 - 5.29100529100527e-05*G2_1_3 - 0.000264550264550264*G2_1_4 - 0.000264550264550263*G2_1_5 - 0.000396825396825395*G2_2_0 + 2.64550264550264e-05*G2_2_1 + 0.000158730158730158*G2_2_2 - 5.29100529100529e-05*G2_2_3 - 0.000264550264550263*G2_2_4 - 0.000264550264550264*G2_2_5 - 5.29100529100527e-05*G2_3_1 - 5.29100529100529e-05*G2_3_2 + 0.000634920634920633*G2_3_3 + 0.000529100529100528*G2_3_4 + 0.000529100529100528*G2_3_5 + 0.00158730158730158*G2_4_0 - 0.000264550264550264*G2_4_1 - 0.000264550264550263*G2_4_2 + 0.000529100529100528*G2_4_3 + 0.00211640211640211*G2_4_4 + 0.00105820105820105*G2_4_5 + 0.00158730158730158*G2_5_0 - 0.000264550264550263*G2_5_1 - 0.000264550264550264*G2_5_2 + 0.000529100529100528*G2_5_3 + 0.00105820105820105*G2_5_4 + 0.00211640211640211*G2_5_5;
    A[91] = -0.000396825396825395*G2_0_0 + 0.000158730158730158*G2_0_1 + 2.64550264550264e-05*G2_0_2 - 5.29100529100527e-05*G2_0_3 - 0.000264550264550264*G2_0_4 - 0.000264550264550263*G2_0_5 + 0.000158730158730158*G2_1_0 - 0.000396825396825395*G2_1_1 + 2.64550264550264e-05*G2_1_2 - 0.000264550264550264*G2_1_3 - 5.29100529100527e-05*G2_1_4 - 0.000264550264550263*G2_1_5 + 2.64550264550264e-05*G2_2_0 + 2.64550264550264e-05*G2_2_1 + 2.64550264550262e-05*G2_2_2 + 0.000105820105820105*G2_2_3 + 0.000105820105820105*G2_2_4 + 0.000105820105820105*G2_2_5 - 5.29100529100527e-05*G2_3_0 - 0.000264550264550264*G2_3_1 + 0.000105820105820105*G2_3_2 + 0.000105820105820105*G2_3_3 + 0.000211640211640211*G2_3_4 - 0.000105820105820105*G2_3_5 - 0.000264550264550264*G2_4_0 - 5.29100529100527e-05*G2_4_1 + 0.000105820105820105*G2_4_2 + 0.000211640211640211*G2_4_3 + 0.000105820105820105*G2_4_4 - 0.000105820105820105*G2_4_5 - 0.000264550264550263*G2_5_0 - 0.000264550264550263*G2_5_1 + 0.000105820105820105*G2_5_2 - 0.000105820105820105*G2_5_3 - 0.000105820105820105*G2_5_4 - 0.000952380952380948*G2_5_5;
    A[92] = -0.000396825396825395*G2_0_0 + 2.64550264550264e-05*G2_0_1 + 0.000158730158730158*G2_0_2 - 5.29100529100529e-05*G2_0_3 - 0.000264550264550263*G2_0_4 - 0.000264550264550264*G2_0_5 + 2.64550264550264e-05*G2_1_0 + 2.64550264550264e-05*G2_1_1 + 2.64550264550262e-05*G2_1_2 + 0.000105820105820105*G2_1_3 + 0.000105820105820105*G2_1_4 + 0.000105820105820105*G2_1_5 + 0.000158730158730158*G2_2_0 + 2.64550264550262e-05*G2_2_1 - 0.000396825396825395*G2_2_2 - 0.000264550264550263*G2_2_3 - 0.000264550264550263*G2_2_4 - 5.29100529100528e-05*G2_2_5 - 5.29100529100529e-05*G2_3_0 + 0.000105820105820105*G2_3_1 - 0.000264550264550263*G2_3_2 + 0.000105820105820106*G2_3_3 - 0.000105820105820105*G2_3_4 + 0.000211640211640211*G2_3_5 - 0.000264550264550263*G2_4_0 + 0.000105820105820105*G2_4_1 - 0.000264550264550263*G2_4_2 - 0.000105820105820105*G2_4_3 - 0.000952380952380949*G2_4_4 - 0.000105820105820105*G2_4_5 - 0.000264550264550264*G2_5_0 + 0.000105820105820105*G2_5_1 - 5.29100529100528e-05*G2_5_2 + 0.000211640211640211*G2_5_3 - 0.000105820105820105*G2_5_4 + 0.000105820105820106*G2_5_5;
    A[93] = -5.29100529100527e-05*G2_0_1 - 5.29100529100529e-05*G2_0_2 + 0.000634920634920633*G2_0_3 + 0.000529100529100528*G2_0_4 + 0.000529100529100528*G2_0_5 - 5.29100529100527e-05*G2_1_0 - 0.000264550264550264*G2_1_1 + 0.000105820105820105*G2_1_2 + 0.000105820105820105*G2_1_3 + 0.000211640211640211*G2_1_4 - 0.000105820105820105*G2_1_5 - 5.29100529100529e-05*G2_2_0 + 0.000105820105820105*G2_2_1 - 0.000264550264550263*G2_2_2 + 0.000105820105820106*G2_2_3 - 0.000105820105820105*G2_2_4 + 0.000211640211640211*G2_2_5 + 0.000634920634920633*G2_3_0 + 0.000105820105820105*G2_3_1 + 0.000105820105820106*G2_3_2 - 0.0038095238095238*G2_3_3 - 0.00169312169312169*G2_3_4 - 0.00169312169312169*G2_3_5 + 0.000529100529100528*G2_4_0 + 0.000211640211640211*G2_4_1 - 0.000105820105820106*G2_4_2 - 0.00169312169312169*G2_4_3 - 0.00126984126984126*G2_4_4 - 0.000846560846560844*G2_4_5 + 0.000529100529100528*G2_5_0 - 0.000105820105820105*G2_5_1 + 0.000211640211640211*G2_5_2 - 0.00169312169312169*G2_5_3 - 0.000846560846560844*G2_5_4 - 0.00126984126984127*G2_5_5;
    A[94] = 0.00158730158730158*G2_0_0 - 0.000264550264550264*G2_0_1 - 0.000264550264550263*G2_0_2 + 0.000529100529100528*G2_0_3 + 0.00211640211640211*G2_0_4 + 0.00105820105820105*G2_0_5 - 0.000264550264550264*G2_1_0 - 5.29100529100527e-05*G2_1_1 + 0.000105820105820105*G2_1_2 + 0.000211640211640211*G2_1_3 + 0.000105820105820105*G2_1_4 - 0.000105820105820105*G2_1_5 - 0.000264550264550263*G2_2_0 + 0.000105820105820106*G2_2_1 - 0.000264550264550263*G2_2_2 - 0.000105820105820105*G2_2_3 - 0.000952380952380949*G2_2_4 - 0.000105820105820105*G2_2_5 + 0.000529100529100528*G2_3_0 + 0.000211640211640211*G2_3_1 - 0.000105820105820105*G2_3_2 - 0.00169312169312169*G2_3_3 - 0.00126984126984126*G2_3_4 - 0.000846560846560844*G2_3_5 + 0.00211640211640211*G2_4_0 + 0.000105820105820105*G2_4_1 - 0.000952380952380949*G2_4_2 - 0.00126984126984126*G2_4_3 + 0.00105820105820105*G2_5_0 - 0.000105820105820105*G2_5_1 - 0.000105820105820105*G2_5_2 - 0.000846560846560844*G2_5_3;
    A[95] = 0.00158730158730158*G2_0_0 - 0.000264550264550263*G2_0_1 - 0.000264550264550264*G2_0_2 + 0.000529100529100528*G2_0_3 + 0.00105820105820105*G2_0_4 + 0.00211640211640211*G2_0_5 - 0.000264550264550263*G2_1_0 - 0.000264550264550263*G2_1_1 + 0.000105820105820105*G2_1_2 - 0.000105820105820105*G2_1_3 - 0.000105820105820105*G2_1_4 - 0.000952380952380947*G2_1_5 - 0.000264550264550264*G2_2_0 + 0.000105820105820105*G2_2_1 - 5.29100529100528e-05*G2_2_2 + 0.000211640211640211*G2_2_3 - 0.000105820105820105*G2_2_4 + 0.000105820105820106*G2_2_5 + 0.000529100529100528*G2_3_0 - 0.000105820105820105*G2_3_1 + 0.000211640211640211*G2_3_2 - 0.00169312169312169*G2_3_3 - 0.000846560846560844*G2_3_4 - 0.00126984126984127*G2_3_5 + 0.00105820105820105*G2_4_0 - 0.000105820105820105*G2_4_1 - 0.000105820105820105*G2_4_2 - 0.000846560846560844*G2_4_3 + 0.00211640211640211*G2_5_0 - 0.000952380952380948*G2_5_1 + 0.000105820105820106*G2_5_2 - 0.00126984126984127*G2_5_3;
    A[96] = 0.00476190476190473*G3_0_0 - 0.000396825396825395*G3_0_1 - 0.000396825396825395*G3_0_2 + 0.00158730158730158*G3_0_4 + 0.00158730158730158*G3_0_5 - 0.000396825396825395*G3_1_0 + 0.000158730158730158*G3_1_1 + 2.64550264550264e-05*G3_1_2 - 5.29100529100527e-05*G3_1_3 - 0.000264550264550264*G3_1_4 - 0.000264550264550263*G3_1_5 - 0.000396825396825395*G3_2_0 + 2.64550264550264e-05*G3_2_1 + 0.000158730158730158*G3_2_2 - 5.29100529100529e-05*G3_2_3 - 0.000264550264550263*G3_2_4 - 0.000264550264550264*G3_2_5 - 5.29100529100527e-05*G3_3_1 - 5.29100529100529e-05*G3_3_2 + 0.000634920634920633*G3_3_3 + 0.000529100529100528*G3_3_4 + 0.000529100529100528*G3_3_5 + 0.00158730158730158*G3_4_0 - 0.000264550264550264*G3_4_1 - 0.000264550264550263*G3_4_2 + 0.000529100529100528*G3_4_3 + 0.00211640211640211*G3_4_4 + 0.00105820105820105*G3_4_5 + 0.00158730158730158*G3_5_0 - 0.000264550264550263*G3_5_1 - 0.000264550264550264*G3_5_2 + 0.000529100529100528*G3_5_3 + 0.00105820105820105*G3_5_4 + 0.00211640211640211*G3_5_5 + 0.00199999999999999*G7_0_0 + 0.00199999999999999*G7_0_1 + 0.00199999999999999*G7_1_0 + 0.00199999999999999*G7_1_1 + 0.00199999999999999*G9_0_0 + 0.00199999999999999*G9_0_1 + 0.00199999999999999*G9_1_0 + 0.00199999999999999*G9_1_1;
    A[97] = -0.000396825396825395*G3_0_0 + 0.000158730158730158*G3_0_1 + 2.64550264550264e-05*G3_0_2 - 5.29100529100527e-05*G3_0_3 - 0.000264550264550264*G3_0_4 - 0.000264550264550263*G3_0_5 + 0.000158730158730158*G3_1_0 - 0.000396825396825395*G3_1_1 + 2.64550264550264e-05*G3_1_2 - 0.000264550264550264*G3_1_3 - 5.29100529100527e-05*G3_1_4 - 0.000264550264550263*G3_1_5 + 2.64550264550264e-05*G3_2_0 + 2.64550264550264e-05*G3_2_1 + 2.64550264550262e-05*G3_2_2 + 0.000105820105820105*G3_2_3 + 0.000105820105820105*G3_2_4 + 0.000105820105820105*G3_2_5 - 5.29100529100527e-05*G3_3_0 - 0.000264550264550264*G3_3_1 + 0.000105820105820105*G3_3_2 + 0.000105820105820105*G3_3_3 + 0.000211640211640211*G3_3_4 - 0.000105820105820105*G3_3_5 - 0.000264550264550264*G3_4_0 - 5.29100529100527e-05*G3_4_1 + 0.000105820105820105*G3_4_2 + 0.000211640211640211*G3_4_3 + 0.000105820105820105*G3_4_4 - 0.000105820105820105*G3_4_5 - 0.000264550264550263*G3_5_0 - 0.000264550264550263*G3_5_1 + 0.000105820105820105*G3_5_2 - 0.000105820105820105*G3_5_3 - 0.000105820105820105*G3_5_4 - 0.000952380952380948*G3_5_5 + 0.000666666666666663*G7_0_0 + 0.000666666666666664*G7_1_0 + 0.000666666666666663*G9_0_0 + 0.000666666666666664*G9_1_0;
    A[98] = -0.000396825396825395*G3_0_0 + 2.64550264550264e-05*G3_0_1 + 0.000158730158730158*G3_0_2 - 5.29100529100529e-05*G3_0_3 - 0.000264550264550263*G3_0_4 - 0.000264550264550264*G3_0_5 + 2.64550264550264e-05*G3_1_0 + 2.64550264550264e-05*G3_1_1 + 2.64550264550262e-05*G3_1_2 + 0.000105820105820105*G3_1_3 + 0.000105820105820105*G3_1_4 + 0.000105820105820105*G3_1_5 + 0.000158730158730158*G3_2_0 + 2.64550264550262e-05*G3_2_1 - 0.000396825396825395*G3_2_2 - 0.000264550264550263*G3_2_3 - 0.000264550264550263*G3_2_4 - 5.29100529100528e-05*G3_2_5 - 5.29100529100529e-05*G3_3_0 + 0.000105820105820105*G3_3_1 - 0.000264550264550263*G3_3_2 + 0.000105820105820106*G3_3_3 - 0.000105820105820105*G3_3_4 + 0.000211640211640211*G3_3_5 - 0.000264550264550263*G3_4_0 + 0.000105820105820105*G3_4_1 - 0.000264550264550263*G3_4_2 - 0.000105820105820105*G3_4_3 - 0.000952380952380949*G3_4_4 - 0.000105820105820105*G3_4_5 - 0.000264550264550264*G3_5_0 + 0.000105820105820105*G3_5_1 - 5.29100529100528e-05*G3_5_2 + 0.000211640211640211*G3_5_3 - 0.000105820105820105*G3_5_4 + 0.000105820105820106*G3_5_5 + 0.000666666666666663*G7_0_1 + 0.000666666666666663*G7_1_1 + 0.000666666666666663*G9_0_1 + 0.000666666666666663*G9_1_1;
    A[99] = -5.29100529100527e-05*G3_0_1 - 5.29100529100529e-05*G3_0_2 + 0.000634920634920633*G3_0_3 + 0.000529100529100528*G3_0_4 + 0.000529100529100528*G3_0_5 - 5.29100529100527e-05*G3_1_0 - 0.000264550264550264*G3_1_1 + 0.000105820105820105*G3_1_2 + 0.000105820105820105*G3_1_3 + 0.000211640211640211*G3_1_4 - 0.000105820105820105*G3_1_5 - 5.29100529100529e-05*G3_2_0 + 0.000105820105820105*G3_2_1 - 0.000264550264550263*G3_2_2 + 0.000105820105820106*G3_2_3 - 0.000105820105820105*G3_2_4 + 0.000211640211640211*G3_2_5 + 0.000634920634920633*G3_3_0 + 0.000105820105820105*G3_3_1 + 0.000105820105820106*G3_3_2 - 0.0038095238095238*G3_3_3 - 0.00169312169312169*G3_3_4 - 0.00169312169312169*G3_3_5 + 0.000529100529100528*G3_4_0 + 0.000211640211640211*G3_4_1 - 0.000105820105820106*G3_4_2 - 0.00169312169312169*G3_4_3 - 0.00126984126984126*G3_4_4 - 0.000846560846560844*G3_4_5 + 0.000529100529100528*G3_5_0 - 0.000105820105820105*G3_5_1 + 0.000211640211640211*G3_5_2 - 0.00169312169312169*G3_5_3 - 0.000846560846560844*G3_5_4 - 0.00126984126984127*G3_5_5;
    A[100] = 0.00158730158730158*G3_0_0 - 0.000264550264550264*G3_0_1 - 0.000264550264550263*G3_0_2 + 0.000529100529100528*G3_0_3 + 0.00211640211640211*G3_0_4 + 0.00105820105820105*G3_0_5 - 0.000264550264550264*G3_1_0 - 5.29100529100527e-05*G3_1_1 + 0.000105820105820105*G3_1_2 + 0.000211640211640211*G3_1_3 + 0.000105820105820105*G3_1_4 - 0.000105820105820105*G3_1_5 - 0.000264550264550263*G3_2_0 + 0.000105820105820106*G3_2_1 - 0.000264550264550263*G3_2_2 - 0.000105820105820105*G3_2_3 - 0.000952380952380949*G3_2_4 - 0.000105820105820105*G3_2_5 + 0.000529100529100528*G3_3_0 + 0.000211640211640211*G3_3_1 - 0.000105820105820105*G3_3_2 - 0.00169312169312169*G3_3_3 - 0.00126984126984126*G3_3_4 - 0.000846560846560844*G3_3_5 + 0.00211640211640211*G3_4_0 + 0.000105820105820105*G3_4_1 - 0.000952380952380949*G3_4_2 - 0.00126984126984126*G3_4_3 + 0.00105820105820105*G3_5_0 - 0.000105820105820105*G3_5_1 - 0.000105820105820105*G3_5_2 - 0.000846560846560844*G3_5_3 - 0.00266666666666665*G7_0_1 - 0.00266666666666665*G7_1_1 - 0.00266666666666665*G9_0_1 - 0.00266666666666665*G9_1_1;
    A[101] = 0.00158730158730158*G3_0_0 - 0.000264550264550263*G3_0_1 - 0.000264550264550264*G3_0_2 + 0.000529100529100528*G3_0_3 + 0.00105820105820105*G3_0_4 + 0.00211640211640211*G3_0_5 - 0.000264550264550263*G3_1_0 - 0.000264550264550263*G3_1_1 + 0.000105820105820105*G3_1_2 - 0.000105820105820105*G3_1_3 - 0.000105820105820105*G3_1_4 - 0.000952380952380947*G3_1_5 - 0.000264550264550264*G3_2_0 + 0.000105820105820105*G3_2_1 - 5.29100529100528e-05*G3_2_2 + 0.000211640211640211*G3_2_3 - 0.000105820105820105*G3_2_4 + 0.000105820105820106*G3_2_5 + 0.000529100529100528*G3_3_0 - 0.000105820105820105*G3_3_1 + 0.000211640211640211*G3_3_2 - 0.00169312169312169*G3_3_3 - 0.000846560846560844*G3_3_4 - 0.00126984126984127*G3_3_5 + 0.00105820105820105*G3_4_0 - 0.000105820105820105*G3_4_1 - 0.000105820105820105*G3_4_2 - 0.000846560846560844*G3_4_3 + 0.00211640211640211*G3_5_0 - 0.000952380952380948*G3_5_1 + 0.000105820105820106*G3_5_2 - 0.00126984126984127*G3_5_3 - 0.00266666666666665*G7_0_0 - 0.00266666666666665*G7_1_0 - 0.00266666666666665*G9_0_0 - 0.00266666666666665*G9_1_0;
    A[102] = 0.166666666666666*G11_0 + 0.166666666666666*G11_1;
    A[103] = 0.0;
    A[104] = 0.0;
    A[105] = -0.000396825396825395*G2_0_0 + 0.000158730158730158*G2_0_1 + 2.64550264550264e-05*G2_0_2 - 5.29100529100527e-05*G2_0_3 - 0.000264550264550264*G2_0_4 - 0.000264550264550263*G2_0_5 + 0.000158730158730158*G2_1_0 - 0.000396825396825395*G2_1_1 + 2.64550264550264e-05*G2_1_2 - 0.000264550264550264*G2_1_3 - 5.29100529100527e-05*G2_1_4 - 0.000264550264550263*G2_1_5 + 2.64550264550264e-05*G2_2_0 + 2.64550264550264e-05*G2_2_1 + 2.64550264550262e-05*G2_2_2 + 0.000105820105820105*G2_2_3 + 0.000105820105820106*G2_2_4 + 0.000105820105820105*G2_2_5 - 5.29100529100527e-05*G2_3_0 - 0.000264550264550264*G2_3_1 + 0.000105820105820105*G2_3_2 + 0.000105820105820105*G2_3_3 + 0.000211640211640211*G2_3_4 - 0.000105820105820105*G2_3_5 - 0.000264550264550264*G2_4_0 - 5.29100529100527e-05*G2_4_1 + 0.000105820105820106*G2_4_2 + 0.000211640211640211*G2_4_3 + 0.000105820105820105*G2_4_4 - 0.000105820105820105*G2_4_5 - 0.000264550264550263*G2_5_0 - 0.000264550264550263*G2_5_1 + 0.000105820105820105*G2_5_2 - 0.000105820105820105*G2_5_3 - 0.000105820105820105*G2_5_4 - 0.000952380952380947*G2_5_5;
    A[106] = 0.000158730158730158*G2_0_0 - 0.000396825396825395*G2_0_1 + 2.64550264550264e-05*G2_0_2 - 0.000264550264550264*G2_0_3 - 5.29100529100527e-05*G2_0_4 - 0.000264550264550263*G2_0_5 - 0.000396825396825395*G2_1_0 + 0.00476190476190474*G2_1_1 - 0.000396825396825395*G2_1_2 + 0.00158730158730158*G2_1_3 + 0.00158730158730158*G2_1_5 + 2.64550264550264e-05*G2_2_0 - 0.000396825396825395*G2_2_1 + 0.000158730158730158*G2_2_2 - 0.000264550264550264*G2_2_3 - 5.29100529100528e-05*G2_2_4 - 0.000264550264550264*G2_2_5 - 0.000264550264550264*G2_3_0 + 0.00158730158730158*G2_3_1 - 0.000264550264550264*G2_3_2 + 0.00211640211640211*G2_3_3 + 0.000529100529100527*G2_3_4 + 0.00105820105820105*G2_3_5 - 5.29100529100526e-05*G2_4_0 - 5.29100529100528e-05*G2_4_2 + 0.000529100529100527*G2_4_3 + 0.000634920634920633*G2_4_4 + 0.000529100529100527*G2_4_5 - 0.000264550264550263*G2_5_0 + 0.00158730158730158*G2_5_1 - 0.000264550264550264*G2_5_2 + 0.00105820105820105*G2_5_3 + 0.000529100529100527*G2_5_4 + 0.00211640211640211*G2_5_5;
    A[107] = 2.64550264550264e-05*G2_0_0 + 2.64550264550264e-05*G2_0_1 + 2.64550264550262e-05*G2_0_2 + 0.000105820105820105*G2_0_3 + 0.000105820105820106*G2_0_4 + 0.000105820105820105*G2_0_5 + 2.64550264550264e-05*G2_1_0 - 0.000396825396825395*G2_1_1 + 0.000158730158730158*G2_1_2 - 0.000264550264550264*G2_1_3 - 5.29100529100529e-05*G2_1_4 - 0.000264550264550263*G2_1_5 + 2.64550264550262e-05*G2_2_0 + 0.000158730158730158*G2_2_1 - 0.000396825396825394*G2_2_2 - 0.000264550264550263*G2_2_3 - 0.000264550264550263*G2_2_4 - 5.29100529100528e-05*G2_2_5 + 0.000105820105820105*G2_3_0 - 0.000264550264550264*G2_3_1 - 0.000264550264550263*G2_3_2 - 0.000952380952380948*G2_3_3 - 0.000105820105820105*G2_3_4 - 0.000105820105820105*G2_3_5 + 0.000105820105820106*G2_4_0 - 5.29100529100528e-05*G2_4_1 - 0.000264550264550263*G2_4_2 - 0.000105820105820105*G2_4_3 + 0.000105820105820106*G2_4_4 + 0.000211640211640211*G2_4_5 + 0.000105820105820105*G2_5_0 - 0.000264550264550263*G2_5_1 - 5.29100529100528e-05*G2_5_2 - 0.000105820105820105*G2_5_3 + 0.000211640211640211*G2_5_4 + 0.000105820105820106*G2_5_5;
    A[108] = -5.29100529100527e-05*G2_0_0 - 0.000264550264550264*G2_0_1 + 0.000105820105820105*G2_0_2 + 0.000105820105820105*G2_0_3 + 0.000211640211640211*G2_0_4 - 0.000105820105820105*G2_0_5 - 0.000264550264550264*G2_1_0 + 0.00158730158730158*G2_1_1 - 0.000264550264550264*G2_1_2 + 0.00211640211640211*G2_1_3 + 0.000529100529100527*G2_1_4 + 0.00105820105820105*G2_1_5 + 0.000105820105820105*G2_2_0 - 0.000264550264550264*G2_2_1 - 0.000264550264550263*G2_2_2 - 0.000952380952380948*G2_2_3 - 0.000105820105820105*G2_2_4 - 0.000105820105820105*G2_2_5 + 0.000105820105820105*G2_3_0 + 0.00211640211640211*G2_3_1 - 0.000952380952380948*G2_3_2 - 0.00126984126984127*G2_3_4 + 0.000211640211640211*G2_4_0 + 0.000529100529100527*G2_4_1 - 0.000105820105820105*G2_4_2 - 0.00126984126984127*G2_4_3 - 0.00169312169312169*G2_4_4 - 0.000846560846560844*G2_4_5 - 0.000105820105820105*G2_5_0 + 0.00105820105820105*G2_5_1 - 0.000105820105820105*G2_5_2 - 0.000846560846560844*G2_5_4;
    A[109] = -0.000264550264550264*G2_0_0 - 5.29100529100527e-05*G2_0_1 + 0.000105820105820106*G2_0_2 + 0.000211640211640211*G2_0_3 + 0.000105820105820105*G2_0_4 - 0.000105820105820105*G2_0_5 - 5.29100529100527e-05*G2_1_0 - 5.29100529100529e-05*G2_1_2 + 0.000529100529100527*G2_1_3 + 0.000634920634920633*G2_1_4 + 0.000529100529100527*G2_1_5 + 0.000105820105820105*G2_2_0 - 5.29100529100529e-05*G2_2_1 - 0.000264550264550263*G2_2_2 - 0.000105820105820105*G2_2_3 + 0.000105820105820106*G2_2_4 + 0.000211640211640211*G2_2_5 + 0.000211640211640211*G2_3_0 + 0.000529100529100527*G2_3_1 - 0.000105820105820105*G2_3_2 - 0.00126984126984127*G2_3_3 - 0.00169312169312169*G2_3_4 - 0.000846560846560844*G2_3_5 + 0.000105820105820105*G2_4_0 + 0.000634920634920633*G2_4_1 + 0.000105820105820106*G2_4_2 - 0.00169312169312169*G2_4_3 - 0.0038095238095238*G2_4_4 - 0.00169312169312169*G2_4_5 - 0.000105820105820105*G2_5_0 + 0.000529100529100527*G2_5_1 + 0.000211640211640211*G2_5_2 - 0.000846560846560844*G2_5_3 - 0.00169312169312169*G2_5_4 - 0.00126984126984127*G2_5_5;
    A[110] = -0.000264550264550263*G2_0_0 - 0.000264550264550263*G2_0_1 + 0.000105820105820105*G2_0_2 - 0.000105820105820105*G2_0_3 - 0.000105820105820105*G2_0_4 - 0.000952380952380948*G2_0_5 - 0.000264550264550263*G2_1_0 + 0.00158730158730158*G2_1_1 - 0.000264550264550263*G2_1_2 + 0.00105820105820105*G2_1_3 + 0.000529100529100527*G2_1_4 + 0.00211640211640211*G2_1_5 + 0.000105820105820105*G2_2_0 - 0.000264550264550264*G2_2_1 - 5.29100529100528e-05*G2_2_2 - 0.000105820105820105*G2_2_3 + 0.000211640211640211*G2_2_4 + 0.000105820105820106*G2_2_5 - 0.000105820105820105*G2_3_0 + 0.00105820105820105*G2_3_1 - 0.000105820105820105*G2_3_2 - 0.000846560846560844*G2_3_4 - 0.000105820105820105*G2_4_0 + 0.000529100529100527*G2_4_1 + 0.000211640211640211*G2_4_2 - 0.000846560846560844*G2_4_3 - 0.00169312169312169*G2_4_4 - 0.00126984126984127*G2_4_5 - 0.000952380952380947*G2_5_0 + 0.00211640211640211*G2_5_1 + 0.000105820105820106*G2_5_2 - 0.00126984126984127*G2_5_4;
    A[111] = -0.000396825396825395*G3_0_0 + 0.000158730158730158*G3_0_1 + 2.64550264550264e-05*G3_0_2 - 5.29100529100527e-05*G3_0_3 - 0.000264550264550264*G3_0_4 - 0.000264550264550263*G3_0_5 + 0.000158730158730158*G3_1_0 - 0.000396825396825395*G3_1_1 + 2.64550264550264e-05*G3_1_2 - 0.000264550264550264*G3_1_3 - 5.29100529100527e-05*G3_1_4 - 0.000264550264550263*G3_1_5 + 2.64550264550264e-05*G3_2_0 + 2.64550264550264e-05*G3_2_1 + 2.64550264550262e-05*G3_2_2 + 0.000105820105820105*G3_2_3 + 0.000105820105820106*G3_2_4 + 0.000105820105820105*G3_2_5 - 5.29100529100527e-05*G3_3_0 - 0.000264550264550264*G3_3_1 + 0.000105820105820105*G3_3_2 + 0.000105820105820105*G3_3_3 + 0.000211640211640211*G3_3_4 - 0.000105820105820105*G3_3_5 - 0.000264550264550264*G3_4_0 - 5.29100529100527e-05*G3_4_1 + 0.000105820105820106*G3_4_2 + 0.000211640211640211*G3_4_3 + 0.000105820105820105*G3_4_4 - 0.000105820105820105*G3_4_5 - 0.000264550264550263*G3_5_0 - 0.000264550264550263*G3_5_1 + 0.000105820105820105*G3_5_2 - 0.000105820105820105*G3_5_3 - 0.000105820105820105*G3_5_4 - 0.000952380952380947*G3_5_5 + 0.000666666666666663*G7_0_0 + 0.000666666666666664*G7_0_1 + 0.000666666666666663*G9_0_0 + 0.000666666666666664*G9_0_1;
    A[112] = 0.000158730158730158*G3_0_0 - 0.000396825396825395*G3_0_1 + 2.64550264550264e-05*G3_0_2 - 0.000264550264550264*G3_0_3 - 5.29100529100527e-05*G3_0_4 - 0.000264550264550263*G3_0_5 - 0.000396825396825395*G3_1_0 + 0.00476190476190474*G3_1_1 - 0.000396825396825395*G3_1_2 + 0.00158730158730158*G3_1_3 + 0.00158730158730158*G3_1_5 + 2.64550264550264e-05*G3_2_0 - 0.000396825396825395*G3_2_1 + 0.000158730158730158*G3_2_2 - 0.000264550264550264*G3_2_3 - 5.29100529100528e-05*G3_2_4 - 0.000264550264550264*G3_2_5 - 0.000264550264550264*G3_3_0 + 0.00158730158730158*G3_3_1 - 0.000264550264550264*G3_3_2 + 0.00211640211640211*G3_3_3 + 0.000529100529100527*G3_3_4 + 0.00105820105820105*G3_3_5 - 5.29100529100526e-05*G3_4_0 - 5.29100529100528e-05*G3_4_2 + 0.000529100529100527*G3_4_3 + 0.000634920634920633*G3_4_4 + 0.000529100529100527*G3_4_5 - 0.000264550264550263*G3_5_0 + 0.00158730158730158*G3_5_1 - 0.000264550264550264*G3_5_2 + 0.00105820105820105*G3_5_3 + 0.000529100529100527*G3_5_4 + 0.00211640211640211*G3_5_5 + 0.00199999999999999*G7_0_0 + 0.00199999999999999*G9_0_0;
    A[113] = 2.64550264550264e-05*G3_0_0 + 2.64550264550264e-05*G3_0_1 + 2.64550264550262e-05*G3_0_2 + 0.000105820105820105*G3_0_3 + 0.000105820105820106*G3_0_4 + 0.000105820105820105*G3_0_5 + 2.64550264550264e-05*G3_1_0 - 0.000396825396825395*G3_1_1 + 0.000158730158730158*G3_1_2 - 0.000264550264550264*G3_1_3 - 5.29100529100529e-05*G3_1_4 - 0.000264550264550263*G3_1_5 + 2.64550264550262e-05*G3_2_0 + 0.000158730158730158*G3_2_1 - 0.000396825396825394*G3_2_2 - 0.000264550264550263*G3_2_3 - 0.000264550264550263*G3_2_4 - 5.29100529100528e-05*G3_2_5 + 0.000105820105820105*G3_3_0 - 0.000264550264550264*G3_3_1 - 0.000264550264550263*G3_3_2 - 0.000952380952380948*G3_3_3 - 0.000105820105820105*G3_3_4 - 0.000105820105820105*G3_3_5 + 0.000105820105820106*G3_4_0 - 5.29100529100528e-05*G3_4_1 - 0.000264550264550263*G3_4_2 - 0.000105820105820105*G3_4_3 + 0.000105820105820106*G3_4_4 + 0.000211640211640211*G3_4_5 + 0.000105820105820105*G3_5_0 - 0.000264550264550263*G3_5_1 - 5.29100529100528e-05*G3_5_2 - 0.000105820105820105*G3_5_3 + 0.000211640211640211*G3_5_4 + 0.000105820105820106*G3_5_5 - 0.000666666666666663*G7_0_1 - 0.000666666666666663*G9_0_1;
    A[114] = -5.29100529100527e-05*G3_0_0 - 0.000264550264550264*G3_0_1 + 0.000105820105820105*G3_0_2 + 0.000105820105820105*G3_0_3 + 0.000211640211640211*G3_0_4 - 0.000105820105820105*G3_0_5 - 0.000264550264550264*G3_1_0 + 0.00158730158730158*G3_1_1 - 0.000264550264550264*G3_1_2 + 0.00211640211640211*G3_1_3 + 0.000529100529100527*G3_1_4 + 0.00105820105820105*G3_1_5 + 0.000105820105820105*G3_2_0 - 0.000264550264550264*G3_2_1 - 0.000264550264550263*G3_2_2 - 0.000952380952380948*G3_2_3 - 0.000105820105820105*G3_2_4 - 0.000105820105820105*G3_2_5 + 0.000105820105820105*G3_3_0 + 0.00211640211640211*G3_3_1 - 0.000952380952380948*G3_3_2 - 0.00126984126984127*G3_3_4 + 0.000211640211640211*G3_4_0 + 0.000529100529100527*G3_4_1 - 0.000105820105820105*G3_4_2 - 0.00126984126984127*G3_4_3 - 0.00169312169312169*G3_4_4 - 0.000846560846560844*G3_4_5 - 0.000105820105820105*G3_5_0 + 0.00105820105820105*G3_5_1 - 0.000105820105820105*G3_5_2 - 0.000846560846560844*G3_5_4 + 0.00266666666666665*G7_0_1 + 0.00266666666666665*G9_0_1;
    A[115] = -0.000264550264550264*G3_0_0 - 5.29100529100527e-05*G3_0_1 + 0.000105820105820106*G3_0_2 + 0.000211640211640211*G3_0_3 + 0.000105820105820105*G3_0_4 - 0.000105820105820105*G3_0_5 - 5.29100529100527e-05*G3_1_0 - 5.29100529100529e-05*G3_1_2 + 0.000529100529100527*G3_1_3 + 0.000634920634920633*G3_1_4 + 0.000529100529100527*G3_1_5 + 0.000105820105820105*G3_2_0 - 5.29100529100529e-05*G3_2_1 - 0.000264550264550263*G3_2_2 - 0.000105820105820105*G3_2_3 + 0.000105820105820106*G3_2_4 + 0.000211640211640211*G3_2_5 + 0.000211640211640211*G3_3_0 + 0.000529100529100527*G3_3_1 - 0.000105820105820105*G3_3_2 - 0.00126984126984127*G3_3_3 - 0.00169312169312169*G3_3_4 - 0.000846560846560844*G3_3_5 + 0.000105820105820105*G3_4_0 + 0.000634920634920633*G3_4_1 + 0.000105820105820106*G3_4_2 - 0.00169312169312169*G3_4_3 - 0.0038095238095238*G3_4_4 - 0.00169312169312169*G3_4_5 - 0.000105820105820105*G3_5_0 + 0.000529100529100527*G3_5_1 + 0.000211640211640211*G3_5_2 - 0.000846560846560844*G3_5_3 - 0.00169312169312169*G3_5_4 - 0.00126984126984127*G3_5_5;
    A[116] = -0.000264550264550263*G3_0_0 - 0.000264550264550263*G3_0_1 + 0.000105820105820105*G3_0_2 - 0.000105820105820105*G3_0_3 - 0.000105820105820105*G3_0_4 - 0.000952380952380948*G3_0_5 - 0.000264550264550263*G3_1_0 + 0.00158730158730158*G3_1_1 - 0.000264550264550263*G3_1_2 + 0.00105820105820105*G3_1_3 + 0.000529100529100527*G3_1_4 + 0.00211640211640211*G3_1_5 + 0.000105820105820105*G3_2_0 - 0.000264550264550264*G3_2_1 - 5.29100529100528e-05*G3_2_2 - 0.000105820105820105*G3_2_3 + 0.000211640211640211*G3_2_4 + 0.000105820105820106*G3_2_5 - 0.000105820105820105*G3_3_0 + 0.00105820105820105*G3_3_1 - 0.000105820105820105*G3_3_2 - 0.000846560846560844*G3_3_4 - 0.000105820105820105*G3_4_0 + 0.000529100529100527*G3_4_1 + 0.000211640211640211*G3_4_2 - 0.000846560846560844*G3_4_3 - 0.00169312169312169*G3_4_4 - 0.00126984126984127*G3_4_5 - 0.000952380952380947*G3_5_0 + 0.00211640211640211*G3_5_1 + 0.000105820105820106*G3_5_2 - 0.00126984126984127*G3_5_4 - 0.00266666666666665*G7_0_0 - 0.00266666666666665*G7_0_1 - 0.00266666666666665*G9_0_0 - 0.00266666666666665*G9_0_1;
    A[117] = 0.0;
    A[118] = -0.166666666666666*G11_0;
    A[119] = 0.0;
    A[120] = -0.000396825396825395*G2_0_0 + 2.64550264550264e-05*G2_0_1 + 0.000158730158730158*G2_0_2 - 5.29100529100529e-05*G2_0_3 - 0.000264550264550263*G2_0_4 - 0.000264550264550264*G2_0_5 + 2.64550264550264e-05*G2_1_0 + 2.64550264550264e-05*G2_1_1 + 2.64550264550262e-05*G2_1_2 + 0.000105820105820105*G2_1_3 + 0.000105820105820105*G2_1_4 + 0.000105820105820105*G2_1_5 + 0.000158730158730158*G2_2_0 + 2.64550264550262e-05*G2_2_1 - 0.000396825396825395*G2_2_2 - 0.000264550264550263*G2_2_3 - 0.000264550264550263*G2_2_4 - 5.29100529100528e-05*G2_2_5 - 5.29100529100529e-05*G2_3_0 + 0.000105820105820105*G2_3_1 - 0.000264550264550263*G2_3_2 + 0.000105820105820106*G2_3_3 - 0.000105820105820105*G2_3_4 + 0.000211640211640211*G2_3_5 - 0.000264550264550263*G2_4_0 + 0.000105820105820105*G2_4_1 - 0.000264550264550263*G2_4_2 - 0.000105820105820105*G2_4_3 - 0.000952380952380949*G2_4_4 - 0.000105820105820105*G2_4_5 - 0.000264550264550264*G2_5_0 + 0.000105820105820105*G2_5_1 - 5.29100529100528e-05*G2_5_2 + 0.000211640211640211*G2_5_3 - 0.000105820105820105*G2_5_4 + 0.000105820105820106*G2_5_5;
    A[121] = 2.64550264550264e-05*G2_0_0 + 2.64550264550264e-05*G2_0_1 + 2.64550264550262e-05*G2_0_2 + 0.000105820105820105*G2_0_3 + 0.000105820105820106*G2_0_4 + 0.000105820105820105*G2_0_5 + 2.64550264550264e-05*G2_1_0 - 0.000396825396825395*G2_1_1 + 0.000158730158730158*G2_1_2 - 0.000264550264550264*G2_1_3 - 5.29100529100529e-05*G2_1_4 - 0.000264550264550264*G2_1_5 + 2.64550264550262e-05*G2_2_0 + 0.000158730158730158*G2_2_1 - 0.000396825396825394*G2_2_2 - 0.000264550264550263*G2_2_3 - 0.000264550264550263*G2_2_4 - 5.29100529100528e-05*G2_2_5 + 0.000105820105820105*G2_3_0 - 0.000264550264550264*G2_3_1 - 0.000264550264550263*G2_3_2 - 0.000952380952380948*G2_3_3 - 0.000105820105820105*G2_3_4 - 0.000105820105820105*G2_3_5 + 0.000105820105820105*G2_4_0 - 5.29100529100528e-05*G2_4_1 - 0.000264550264550263*G2_4_2 - 0.000105820105820105*G2_4_3 + 0.000105820105820106*G2_4_4 + 0.000211640211640211*G2_4_5 + 0.000105820105820105*G2_5_0 - 0.000264550264550264*G2_5_1 - 5.29100529100528e-05*G2_5_2 - 0.000105820105820105*G2_5_3 + 0.000211640211640211*G2_5_4 + 0.000105820105820106*G2_5_5;
    A[122] = 0.000158730158730158*G2_0_0 + 2.64550264550262e-05*G2_0_1 - 0.000396825396825395*G2_0_2 - 0.000264550264550263*G2_0_3 - 0.000264550264550263*G2_0_4 - 5.29100529100528e-05*G2_0_5 + 2.64550264550262e-05*G2_1_0 + 0.000158730158730158*G2_1_1 - 0.000396825396825394*G2_1_2 - 0.000264550264550263*G2_1_3 - 0.000264550264550263*G2_1_4 - 5.29100529100528e-05*G2_1_5 - 0.000396825396825395*G2_2_0 - 0.000396825396825394*G2_2_1 + 0.00476190476190473*G2_2_2 + 0.00158730158730158*G2_2_3 + 0.00158730158730158*G2_2_4 - 0.000264550264550263*G2_3_0 - 0.000264550264550263*G2_3_1 + 0.00158730158730158*G2_3_2 + 0.00211640211640211*G2_3_3 + 0.00105820105820105*G2_3_4 + 0.000529100529100528*G2_3_5 - 0.000264550264550263*G2_4_0 - 0.000264550264550263*G2_4_1 + 0.00158730158730158*G2_4_2 + 0.00105820105820105*G2_4_3 + 0.00211640211640211*G2_4_4 + 0.000529100529100528*G2_4_5 - 5.29100529100528e-05*G2_5_0 - 5.29100529100528e-05*G2_5_1 + 0.000529100529100528*G2_5_3 + 0.000529100529100528*G2_5_4 + 0.000634920634920633*G2_5_5;
    A[123] = -5.29100529100529e-05*G2_0_0 + 0.000105820105820105*G2_0_1 - 0.000264550264550263*G2_0_2 + 0.000105820105820106*G2_0_3 - 0.000105820105820105*G2_0_4 + 0.000211640211640211*G2_0_5 + 0.000105820105820105*G2_1_0 - 0.000264550264550264*G2_1_1 - 0.000264550264550263*G2_1_2 - 0.000952380952380948*G2_1_3 - 0.000105820105820105*G2_1_4 - 0.000105820105820105*G2_1_5 - 0.000264550264550263*G2_2_0 - 0.000264550264550263*G2_2_1 + 0.00158730158730158*G2_2_2 + 0.00211640211640211*G2_2_3 + 0.00105820105820105*G2_2_4 + 0.000529100529100528*G2_2_5 + 0.000105820105820106*G2_3_0 - 0.000952380952380948*G2_3_1 + 0.00211640211640211*G2_3_2 - 0.00126984126984127*G2_3_5 - 0.000105820105820105*G2_4_0 - 0.000105820105820105*G2_4_1 + 0.00105820105820105*G2_4_2 - 0.000846560846560844*G2_4_5 + 0.000211640211640211*G2_5_0 - 0.000105820105820105*G2_5_1 + 0.000529100529100528*G2_5_2 - 0.00126984126984127*G2_5_3 - 0.000846560846560844*G2_5_4 - 0.00169312169312169*G2_5_5;
    A[124] = -0.000264550264550263*G2_0_0 + 0.000105820105820106*G2_0_1 - 0.000264550264550263*G2_0_2 - 0.000105820105820105*G2_0_3 - 0.000952380952380949*G2_0_4 - 0.000105820105820105*G2_0_5 + 0.000105820105820105*G2_1_0 - 5.29100529100529e-05*G2_1_1 - 0.000264550264550263*G2_1_2 - 0.000105820105820105*G2_1_3 + 0.000105820105820106*G2_1_4 + 0.000211640211640211*G2_1_5 - 0.000264550264550263*G2_2_0 - 0.000264550264550263*G2_2_1 + 0.00158730158730158*G2_2_2 + 0.00105820105820105*G2_2_3 + 0.00211640211640211*G2_2_4 + 0.000529100529100528*G2_2_5 - 0.000105820105820105*G2_3_0 - 0.000105820105820105*G2_3_1 + 0.00105820105820105*G2_3_2 - 0.000846560846560844*G2_3_5 - 0.000952380952380949*G2_4_0 + 0.000105820105820106*G2_4_1 + 0.00211640211640211*G2_4_2 - 0.00126984126984127*G2_4_5 - 0.000105820105820105*G2_5_0 + 0.000211640211640211*G2_5_1 + 0.000529100529100528*G2_5_2 - 0.000846560846560844*G2_5_3 - 0.00126984126984127*G2_5_4 - 0.00169312169312169*G2_5_5;
    A[125] = -0.000264550264550264*G2_0_0 + 0.000105820105820105*G2_0_1 - 5.29100529100528e-05*G2_0_2 + 0.000211640211640211*G2_0_3 - 0.000105820105820105*G2_0_4 + 0.000105820105820106*G2_0_5 + 0.000105820105820105*G2_1_0 - 0.000264550264550263*G2_1_1 - 5.29100529100528e-05*G2_1_2 - 0.000105820105820105*G2_1_3 + 0.000211640211640211*G2_1_4 + 0.000105820105820106*G2_1_5 - 5.29100529100528e-05*G2_2_0 - 5.29100529100528e-05*G2_2_1 + 0.000529100529100528*G2_2_3 + 0.000529100529100528*G2_2_4 + 0.000634920634920633*G2_2_5 + 0.000211640211640211*G2_3_0 - 0.000105820105820105*G2_3_1 + 0.000529100529100528*G2_3_2 - 0.00126984126984127*G2_3_3 - 0.000846560846560844*G2_3_4 - 0.00169312169312169*G2_3_5 - 0.000105820105820105*G2_4_0 + 0.000211640211640211*G2_4_1 + 0.000529100529100528*G2_4_2 - 0.000846560846560844*G2_4_3 - 0.00126984126984127*G2_4_4 - 0.00169312169312169*G2_4_5 + 0.000105820105820106*G2_5_0 + 0.000105820105820106*G2_5_1 + 0.000634920634920633*G2_5_2 - 0.00169312169312169*G2_5_3 - 0.00169312169312169*G2_5_4 - 0.00380952380952379*G2_5_5;
    A[126] = -0.000396825396825395*G3_0_0 + 2.64550264550264e-05*G3_0_1 + 0.000158730158730158*G3_0_2 - 5.29100529100529e-05*G3_0_3 - 0.000264550264550263*G3_0_4 - 0.000264550264550264*G3_0_5 + 2.64550264550264e-05*G3_1_0 + 2.64550264550264e-05*G3_1_1 + 2.64550264550262e-05*G3_1_2 + 0.000105820105820105*G3_1_3 + 0.000105820105820105*G3_1_4 + 0.000105820105820105*G3_1_5 + 0.000158730158730158*G3_2_0 + 2.64550264550262e-05*G3_2_1 - 0.000396825396825395*G3_2_2 - 0.000264550264550263*G3_2_3 - 0.000264550264550263*G3_2_4 - 5.29100529100528e-05*G3_2_5 - 5.29100529100529e-05*G3_3_0 + 0.000105820105820105*G3_3_1 - 0.000264550264550263*G3_3_2 + 0.000105820105820106*G3_3_3 - 0.000105820105820105*G3_3_4 + 0.000211640211640211*G3_3_5 - 0.000264550264550263*G3_4_0 + 0.000105820105820105*G3_4_1 - 0.000264550264550263*G3_4_2 - 0.000105820105820105*G3_4_3 - 0.000952380952380949*G3_4_4 - 0.000105820105820105*G3_4_5 - 0.000264550264550264*G3_5_0 + 0.000105820105820105*G3_5_1 - 5.29100529100528e-05*G3_5_2 + 0.000211640211640211*G3_5_3 - 0.000105820105820105*G3_5_4 + 0.000105820105820106*G3_5_5 + 0.000666666666666663*G7_1_0 + 0.000666666666666663*G7_1_1 + 0.000666666666666663*G9_1_0 + 0.000666666666666663*G9_1_1;
    A[127] = 2.64550264550264e-05*G3_0_0 + 2.64550264550264e-05*G3_0_1 + 2.64550264550262e-05*G3_0_2 + 0.000105820105820105*G3_0_3 + 0.000105820105820106*G3_0_4 + 0.000105820105820105*G3_0_5 + 2.64550264550264e-05*G3_1_0 - 0.000396825396825395*G3_1_1 + 0.000158730158730158*G3_1_2 - 0.000264550264550264*G3_1_3 - 5.29100529100529e-05*G3_1_4 - 0.000264550264550264*G3_1_5 + 2.64550264550262e-05*G3_2_0 + 0.000158730158730158*G3_2_1 - 0.000396825396825394*G3_2_2 - 0.000264550264550263*G3_2_3 - 0.000264550264550263*G3_2_4 - 5.29100529100528e-05*G3_2_5 + 0.000105820105820105*G3_3_0 - 0.000264550264550264*G3_3_1 - 0.000264550264550263*G3_3_2 - 0.000952380952380948*G3_3_3 - 0.000105820105820105*G3_3_4 - 0.000105820105820105*G3_3_5 + 0.000105820105820105*G3_4_0 - 5.29100529100528e-05*G3_4_1 - 0.000264550264550263*G3_4_2 - 0.000105820105820105*G3_4_3 + 0.000105820105820106*G3_4_4 + 0.000211640211640211*G3_4_5 + 0.000105820105820105*G3_5_0 - 0.000264550264550264*G3_5_1 - 5.29100529100528e-05*G3_5_2 - 0.000105820105820105*G3_5_3 + 0.000211640211640211*G3_5_4 + 0.000105820105820106*G3_5_5 - 0.000666666666666663*G7_1_0 - 0.000666666666666663*G9_1_0;
    A[128] = 0.000158730158730158*G3_0_0 + 2.64550264550262e-05*G3_0_1 - 0.000396825396825395*G3_0_2 - 0.000264550264550263*G3_0_3 - 0.000264550264550263*G3_0_4 - 5.29100529100528e-05*G3_0_5 + 2.64550264550262e-05*G3_1_0 + 0.000158730158730158*G3_1_1 - 0.000396825396825394*G3_1_2 - 0.000264550264550263*G3_1_3 - 0.000264550264550263*G3_1_4 - 5.29100529100528e-05*G3_1_5 - 0.000396825396825395*G3_2_0 - 0.000396825396825394*G3_2_1 + 0.00476190476190473*G3_2_2 + 0.00158730158730158*G3_2_3 + 0.00158730158730158*G3_2_4 - 0.000264550264550263*G3_3_0 - 0.000264550264550263*G3_3_1 + 0.00158730158730158*G3_3_2 + 0.00211640211640211*G3_3_3 + 0.00105820105820105*G3_3_4 + 0.000529100529100528*G3_3_5 - 0.000264550264550263*G3_4_0 - 0.000264550264550263*G3_4_1 + 0.00158730158730158*G3_4_2 + 0.00105820105820105*G3_4_3 + 0.00211640211640211*G3_4_4 + 0.000529100529100528*G3_4_5 - 5.29100529100528e-05*G3_5_0 - 5.29100529100528e-05*G3_5_1 + 0.000529100529100528*G3_5_3 + 0.000529100529100528*G3_5_4 + 0.000634920634920633*G3_5_5 + 0.00199999999999999*G7_1_1 + 0.00199999999999999*G9_1_1;
    A[129] = -5.29100529100529e-05*G3_0_0 + 0.000105820105820105*G3_0_1 - 0.000264550264550263*G3_0_2 + 0.000105820105820106*G3_0_3 - 0.000105820105820105*G3_0_4 + 0.000211640211640211*G3_0_5 + 0.000105820105820105*G3_1_0 - 0.000264550264550264*G3_1_1 - 0.000264550264550263*G3_1_2 - 0.000952380952380948*G3_1_3 - 0.000105820105820105*G3_1_4 - 0.000105820105820105*G3_1_5 - 0.000264550264550263*G3_2_0 - 0.000264550264550263*G3_2_1 + 0.00158730158730158*G3_2_2 + 0.00211640211640211*G3_2_3 + 0.00105820105820105*G3_2_4 + 0.000529100529100528*G3_2_5 + 0.000105820105820106*G3_3_0 - 0.000952380952380948*G3_3_1 + 0.00211640211640211*G3_3_2 - 0.00126984126984127*G3_3_5 - 0.000105820105820105*G3_4_0 - 0.000105820105820105*G3_4_1 + 0.00105820105820105*G3_4_2 - 0.000846560846560844*G3_4_5 + 0.000211640211640211*G3_5_0 - 0.000105820105820105*G3_5_1 + 0.000529100529100528*G3_5_2 - 0.00126984126984127*G3_5_3 - 0.000846560846560844*G3_5_4 - 0.00169312169312169*G3_5_5 + 0.00266666666666665*G7_1_0 + 0.00266666666666665*G9_1_0;
    A[130] = -0.000264550264550263*G3_0_0 + 0.000105820105820106*G3_0_1 - 0.000264550264550263*G3_0_2 - 0.000105820105820105*G3_0_3 - 0.000952380952380949*G3_0_4 - 0.000105820105820105*G3_0_5 + 0.000105820105820105*G3_1_0 - 5.29100529100529e-05*G3_1_1 - 0.000264550264550263*G3_1_2 - 0.000105820105820105*G3_1_3 + 0.000105820105820106*G3_1_4 + 0.000211640211640211*G3_1_5 - 0.000264550264550263*G3_2_0 - 0.000264550264550263*G3_2_1 + 0.00158730158730158*G3_2_2 + 0.00105820105820105*G3_2_3 + 0.00211640211640211*G3_2_4 + 0.000529100529100528*G3_2_5 - 0.000105820105820105*G3_3_0 - 0.000105820105820105*G3_3_1 + 0.00105820105820105*G3_3_2 - 0.000846560846560844*G3_3_5 - 0.000952380952380949*G3_4_0 + 0.000105820105820106*G3_4_1 + 0.00211640211640211*G3_4_2 - 0.00126984126984127*G3_4_5 - 0.000105820105820105*G3_5_0 + 0.000211640211640211*G3_5_1 + 0.000529100529100528*G3_5_2 - 0.000846560846560844*G3_5_3 - 0.00126984126984127*G3_5_4 - 0.00169312169312169*G3_5_5 - 0.00266666666666666*G7_1_0 - 0.00266666666666665*G7_1_1 - 0.00266666666666666*G9_1_0 - 0.00266666666666665*G9_1_1;
    A[131] = -0.000264550264550264*G3_0_0 + 0.000105820105820105*G3_0_1 - 5.29100529100528e-05*G3_0_2 + 0.000211640211640211*G3_0_3 - 0.000105820105820105*G3_0_4 + 0.000105820105820106*G3_0_5 + 0.000105820105820105*G3_1_0 - 0.000264550264550263*G3_1_1 - 5.29100529100528e-05*G3_1_2 - 0.000105820105820105*G3_1_3 + 0.000211640211640211*G3_1_4 + 0.000105820105820106*G3_1_5 - 5.29100529100528e-05*G3_2_0 - 5.29100529100528e-05*G3_2_1 + 0.000529100529100528*G3_2_3 + 0.000529100529100528*G3_2_4 + 0.000634920634920633*G3_2_5 + 0.000211640211640211*G3_3_0 - 0.000105820105820105*G3_3_1 + 0.000529100529100528*G3_3_2 - 0.00126984126984127*G3_3_3 - 0.000846560846560844*G3_3_4 - 0.00169312169312169*G3_3_5 - 0.000105820105820105*G3_4_0 + 0.000211640211640211*G3_4_1 + 0.000529100529100528*G3_4_2 - 0.000846560846560844*G3_4_3 - 0.00126984126984127*G3_4_4 - 0.00169312169312169*G3_4_5 + 0.000105820105820106*G3_5_0 + 0.000105820105820106*G3_5_1 + 0.000634920634920633*G3_5_2 - 0.00169312169312169*G3_5_3 - 0.00169312169312169*G3_5_4 - 0.00380952380952379*G3_5_5;
    A[132] = 0.0;
    A[133] = 0.0;
    A[134] = -0.166666666666666*G11_1;
    A[135] = -5.29100529100527e-05*G2_0_1 - 5.29100529100529e-05*G2_0_2 + 0.000634920634920633*G2_0_3 + 0.000529100529100528*G2_0_4 + 0.000529100529100528*G2_0_5 - 5.29100529100527e-05*G2_1_0 - 0.000264550264550264*G2_1_1 + 0.000105820105820105*G2_1_2 + 0.000105820105820105*G2_1_3 + 0.000211640211640211*G2_1_4 - 0.000105820105820105*G2_1_5 - 5.29100529100529e-05*G2_2_0 + 0.000105820105820105*G2_2_1 - 0.000264550264550263*G2_2_2 + 0.000105820105820106*G2_2_3 - 0.000105820105820105*G2_2_4 + 0.000211640211640211*G2_2_5 + 0.000634920634920633*G2_3_0 + 0.000105820105820105*G2_3_1 + 0.000105820105820106*G2_3_2 - 0.0038095238095238*G2_3_3 - 0.00169312169312169*G2_3_4 - 0.00169312169312169*G2_3_5 + 0.000529100529100528*G2_4_0 + 0.000211640211640211*G2_4_1 - 0.000105820105820105*G2_4_2 - 0.00169312169312169*G2_4_3 - 0.00126984126984126*G2_4_4 - 0.000846560846560844*G2_4_5 + 0.000529100529100528*G2_5_0 - 0.000105820105820105*G2_5_1 + 0.000211640211640211*G2_5_2 - 0.00169312169312169*G2_5_3 - 0.000846560846560844*G2_5_4 - 0.00126984126984127*G2_5_5;
    A[136] = -5.29100529100527e-05*G2_0_0 - 0.000264550264550264*G2_0_1 + 0.000105820105820105*G2_0_2 + 0.000105820105820105*G2_0_3 + 0.000211640211640211*G2_0_4 - 0.000105820105820105*G2_0_5 - 0.000264550264550264*G2_1_0 + 0.00158730158730158*G2_1_1 - 0.000264550264550264*G2_1_2 + 0.00211640211640211*G2_1_3 + 0.000529100529100527*G2_1_4 + 0.00105820105820105*G2_1_5 + 0.000105820105820105*G2_2_0 - 0.000264550264550264*G2_2_1 - 0.000264550264550263*G2_2_2 - 0.000952380952380948*G2_2_3 - 0.000105820105820105*G2_2_4 - 0.000105820105820105*G2_2_5 + 0.000105820105820105*G2_3_0 + 0.00211640211640211*G2_3_1 - 0.000952380952380948*G2_3_2 - 0.00126984126984127*G2_3_4 + 0.000211640211640211*G2_4_0 + 0.000529100529100527*G2_4_1 - 0.000105820105820105*G2_4_2 - 0.00126984126984127*G2_4_3 - 0.00169312169312169*G2_4_4 - 0.000846560846560844*G2_4_5 - 0.000105820105820105*G2_5_0 + 0.00105820105820105*G2_5_1 - 0.000105820105820105*G2_5_2 - 0.000846560846560844*G2_5_4;
    A[137] = -5.29100529100529e-05*G2_0_0 + 0.000105820105820105*G2_0_1 - 0.000264550264550263*G2_0_2 + 0.000105820105820106*G2_0_3 - 0.000105820105820105*G2_0_4 + 0.000211640211640211*G2_0_5 + 0.000105820105820105*G2_1_0 - 0.000264550264550264*G2_1_1 - 0.000264550264550263*G2_1_2 - 0.000952380952380948*G2_1_3 - 0.000105820105820105*G2_1_4 - 0.000105820105820105*G2_1_5 - 0.000264550264550263*G2_2_0 - 0.000264550264550263*G2_2_1 + 0.00158730158730158*G2_2_2 + 0.00211640211640211*G2_2_3 + 0.00105820105820105*G2_2_4 + 0.000529100529100528*G2_2_5 + 0.000105820105820106*G2_3_0 - 0.000952380952380948*G2_3_1 + 0.00211640211640211*G2_3_2 - 0.00126984126984127*G2_3_5 - 0.000105820105820105*G2_4_0 - 0.000105820105820105*G2_4_1 + 0.00105820105820105*G2_4_2 - 0.000846560846560844*G2_4_5 + 0.000211640211640211*G2_5_0 - 0.000105820105820105*G2_5_1 + 0.000529100529100528*G2_5_2 - 0.00126984126984127*G2_5_3 - 0.000846560846560844*G2_5_4 - 0.00169312169312169*G2_5_5;
    A[138] = 0.000634920634920633*G2_0_0 + 0.000105820105820105*G2_0_1 + 0.000105820105820106*G2_0_2 - 0.0038095238095238*G2_0_3 - 0.00169312169312169*G2_0_4 - 0.00169312169312169*G2_0_5 + 0.000105820105820105*G2_1_0 + 0.00211640211640211*G2_1_1 - 0.000952380952380948*G2_1_2 - 0.00126984126984127*G2_1_4 + 0.000105820105820106*G2_2_0 - 0.000952380952380948*G2_2_1 + 0.00211640211640211*G2_2_2 - 0.00126984126984127*G2_2_5 - 0.0038095238095238*G2_3_0 + 0.0406349206349205*G2_3_3 + 0.0101587301587301*G2_3_4 + 0.0101587301587301*G2_3_5 - 0.00169312169312169*G2_4_0 - 0.00126984126984127*G2_4_1 + 0.0101587301587301*G2_4_3 + 0.00677248677248675*G2_4_4 + 0.00507936507936506*G2_4_5 - 0.00169312169312169*G2_5_0 - 0.00126984126984127*G2_5_2 + 0.0101587301587301*G2_5_3 + 0.00507936507936506*G2_5_4 + 0.00677248677248675*G2_5_5;
    A[139] = 0.000529100529100528*G2_0_0 + 0.000211640211640211*G2_0_1 - 0.000105820105820105*G2_0_2 - 0.00169312169312169*G2_0_3 - 0.00126984126984126*G2_0_4 - 0.000846560846560844*G2_0_5 + 0.000211640211640211*G2_1_0 + 0.000529100529100527*G2_1_1 - 0.000105820105820105*G2_1_2 - 0.00126984126984127*G2_1_3 - 0.00169312169312169*G2_1_4 - 0.000846560846560844*G2_1_5 - 0.000105820105820105*G2_2_0 - 0.000105820105820105*G2_2_1 + 0.00105820105820105*G2_2_2 - 0.000846560846560844*G2_2_5 - 0.00169312169312169*G2_3_0 - 0.00126984126984127*G2_3_1 + 0.0101587301587301*G2_3_3 + 0.00677248677248675*G2_3_4 + 0.00507936507936506*G2_3_5 - 0.00126984126984126*G2_4_0 - 0.00169312169312169*G2_4_1 + 0.00677248677248675*G2_4_3 + 0.0101587301587301*G2_4_4 + 0.00507936507936506*G2_4_5 - 0.000846560846560844*G2_5_0 - 0.000846560846560844*G2_5_1 - 0.000846560846560844*G2_5_2 + 0.00507936507936506*G2_5_3 + 0.00507936507936507*G2_5_4 + 0.00507936507936506*G2_5_5;
    A[140] = 0.000529100529100528*G2_0_0 - 0.000105820105820105*G2_0_1 + 0.000211640211640211*G2_0_2 - 0.00169312169312169*G2_0_3 - 0.000846560846560844*G2_0_4 - 0.00126984126984127*G2_0_5 - 0.000105820105820105*G2_1_0 + 0.00105820105820105*G2_1_1 - 0.000105820105820105*G2_1_2 - 0.000846560846560844*G2_1_4 + 0.000211640211640211*G2_2_0 - 0.000105820105820105*G2_2_1 + 0.000529100529100528*G2_2_2 - 0.00126984126984127*G2_2_3 - 0.000846560846560844*G2_2_4 - 0.00169312169312169*G2_2_5 - 0.00169312169312169*G2_3_0 - 0.00126984126984127*G2_3_2 + 0.0101587301587301*G2_3_3 + 0.00507936507936506*G2_3_4 + 0.00677248677248675*G2_3_5 - 0.000846560846560844*G2_4_0 - 0.000846560846560844*G2_4_1 - 0.000846560846560844*G2_4_2 + 0.00507936507936506*G2_4_3 + 0.00507936507936506*G2_4_4 + 0.00507936507936506*G2_4_5 - 0.00126984126984127*G2_5_0 - 0.00169312169312169*G2_5_2 + 0.00677248677248675*G2_5_3 + 0.00507936507936506*G2_5_4 + 0.0101587301587301*G2_5_5;
    A[141] = -5.29100529100527e-05*G3_0_1 - 5.29100529100529e-05*G3_0_2 + 0.000634920634920633*G3_0_3 + 0.000529100529100528*G3_0_4 + 0.000529100529100528*G3_0_5 - 5.29100529100527e-05*G3_1_0 - 0.000264550264550264*G3_1_1 + 0.000105820105820105*G3_1_2 + 0.000105820105820105*G3_1_3 + 0.000211640211640211*G3_1_4 - 0.000105820105820105*G3_1_5 - 5.29100529100529e-05*G3_2_0 + 0.000105820105820105*G3_2_1 - 0.000264550264550263*G3_2_2 + 0.000105820105820106*G3_2_3 - 0.000105820105820105*G3_2_4 + 0.000211640211640211*G3_2_5 + 0.000634920634920633*G3_3_0 + 0.000105820105820105*G3_3_1 + 0.000105820105820106*G3_3_2 - 0.0038095238095238*G3_3_3 - 0.00169312169312169*G3_3_4 - 0.00169312169312169*G3_3_5 + 0.000529100529100528*G3_4_0 + 0.000211640211640211*G3_4_1 - 0.000105820105820105*G3_4_2 - 0.00169312169312169*G3_4_3 - 0.00126984126984126*G3_4_4 - 0.000846560846560844*G3_4_5 + 0.000529100529100528*G3_5_0 - 0.000105820105820105*G3_5_1 + 0.000211640211640211*G3_5_2 - 0.00169312169312169*G3_5_3 - 0.000846560846560844*G3_5_4 - 0.00126984126984127*G3_5_5;
    A[142] = -5.29100529100527e-05*G3_0_0 - 0.000264550264550264*G3_0_1 + 0.000105820105820105*G3_0_2 + 0.000105820105820105*G3_0_3 + 0.000211640211640211*G3_0_4 - 0.000105820105820105*G3_0_5 - 0.000264550264550264*G3_1_0 + 0.00158730158730158*G3_1_1 - 0.000264550264550264*G3_1_2 + 0.00211640211640211*G3_1_3 + 0.000529100529100527*G3_1_4 + 0.00105820105820105*G3_1_5 + 0.000105820105820105*G3_2_0 - 0.000264550264550264*G3_2_1 - 0.000264550264550263*G3_2_2 - 0.000952380952380948*G3_2_3 - 0.000105820105820105*G3_2_4 - 0.000105820105820105*G3_2_5 + 0.000105820105820105*G3_3_0 + 0.00211640211640211*G3_3_1 - 0.000952380952380948*G3_3_2 - 0.00126984126984127*G3_3_4 + 0.000211640211640211*G3_4_0 + 0.000529100529100527*G3_4_1 - 0.000105820105820105*G3_4_2 - 0.00126984126984127*G3_4_3 - 0.00169312169312169*G3_4_4 - 0.000846560846560844*G3_4_5 - 0.000105820105820105*G3_5_0 + 0.00105820105820105*G3_5_1 - 0.000105820105820105*G3_5_2 - 0.000846560846560844*G3_5_4 + 0.00266666666666665*G7_1_0 + 0.00266666666666665*G9_1_0;
    A[143] = -5.29100529100529e-05*G3_0_0 + 0.000105820105820105*G3_0_1 - 0.000264550264550263*G3_0_2 + 0.000105820105820106*G3_0_3 - 0.000105820105820105*G3_0_4 + 0.000211640211640211*G3_0_5 + 0.000105820105820105*G3_1_0 - 0.000264550264550264*G3_1_1 - 0.000264550264550263*G3_1_2 - 0.000952380952380948*G3_1_3 - 0.000105820105820105*G3_1_4 - 0.000105820105820105*G3_1_5 - 0.000264550264550263*G3_2_0 - 0.000264550264550263*G3_2_1 + 0.00158730158730158*G3_2_2 + 0.00211640211640211*G3_2_3 + 0.00105820105820105*G3_2_4 + 0.000529100529100528*G3_2_5 + 0.000105820105820106*G3_3_0 - 0.000952380952380948*G3_3_1 + 0.00211640211640211*G3_3_2 - 0.00126984126984127*G3_3_5 - 0.000105820105820105*G3_4_0 - 0.000105820105820105*G3_4_1 + 0.00105820105820105*G3_4_2 - 0.000846560846560844*G3_4_5 + 0.000211640211640211*G3_5_0 - 0.000105820105820105*G3_5_1 + 0.000529100529100528*G3_5_2 - 0.00126984126984127*G3_5_3 - 0.000846560846560844*G3_5_4 - 0.00169312169312169*G3_5_5 + 0.00266666666666665*G7_0_1 + 0.00266666666666665*G9_0_1;
    A[144] = 0.000634920634920633*G3_0_0 + 0.000105820105820105*G3_0_1 + 0.000105820105820106*G3_0_2 - 0.0038095238095238*G3_0_3 - 0.00169312169312169*G3_0_4 - 0.00169312169312169*G3_0_5 + 0.000105820105820105*G3_1_0 + 0.00211640211640211*G3_1_1 - 0.000952380952380948*G3_1_2 - 0.00126984126984127*G3_1_4 + 0.000105820105820106*G3_2_0 - 0.000952380952380948*G3_2_1 + 0.00211640211640211*G3_2_2 - 0.00126984126984127*G3_2_5 - 0.0038095238095238*G3_3_0 + 0.0406349206349205*G3_3_3 + 0.0101587301587301*G3_3_4 + 0.0101587301587301*G3_3_5 - 0.00169312169312169*G3_4_0 - 0.00126984126984127*G3_4_1 + 0.0101587301587301*G3_4_3 + 0.00677248677248675*G3_4_4 + 0.00507936507936506*G3_4_5 - 0.00169312169312169*G3_5_0 - 0.00126984126984127*G3_5_2 + 0.0101587301587301*G3_5_3 + 0.00507936507936506*G3_5_4 + 0.00677248677248675*G3_5_5 + 0.00533333333333331*G7_0_0 + 0.00266666666666665*G7_0_1 + 0.00266666666666665*G7_1_0 + 0.0053333333333333*G7_1_1 + 0.00533333333333331*G9_0_0 + 0.00266666666666665*G9_0_1 + 0.00266666666666665*G9_1_0 + 0.0053333333333333*G9_1_1;
    A[145] = 0.000529100529100528*G3_0_0 + 0.000211640211640211*G3_0_1 - 0.000105820105820105*G3_0_2 - 0.00169312169312169*G3_0_3 - 0.00126984126984126*G3_0_4 - 0.000846560846560844*G3_0_5 + 0.000211640211640211*G3_1_0 + 0.000529100529100527*G3_1_1 - 0.000105820105820105*G3_1_2 - 0.00126984126984127*G3_1_3 - 0.00169312169312169*G3_1_4 - 0.000846560846560844*G3_1_5 - 0.000105820105820105*G3_2_0 - 0.000105820105820105*G3_2_1 + 0.00105820105820105*G3_2_2 - 0.000846560846560844*G3_2_5 - 0.00169312169312169*G3_3_0 - 0.00126984126984127*G3_3_1 + 0.0101587301587301*G3_3_3 + 0.00677248677248675*G3_3_4 + 0.00507936507936506*G3_3_5 - 0.00126984126984126*G3_4_0 - 0.00169312169312169*G3_4_1 + 0.00677248677248675*G3_4_3 + 0.0101587301587301*G3_4_4 + 0.00507936507936506*G3_4_5 - 0.000846560846560844*G3_5_0 - 0.000846560846560844*G3_5_1 - 0.000846560846560844*G3_5_2 + 0.00507936507936506*G3_5_3 + 0.00507936507936507*G3_5_4 + 0.00507936507936506*G3_5_5 - 0.00533333333333331*G7_0_0 - 0.00266666666666665*G7_0_1 - 0.00266666666666665*G7_1_0 - 0.00533333333333331*G9_0_0 - 0.00266666666666665*G9_0_1 - 0.00266666666666665*G9_1_0;
    A[146] = 0.000529100529100528*G3_0_0 - 0.000105820105820105*G3_0_1 + 0.000211640211640211*G3_0_2 - 0.00169312169312169*G3_0_3 - 0.000846560846560844*G3_0_4 - 0.00126984126984127*G3_0_5 - 0.000105820105820105*G3_1_0 + 0.00105820105820105*G3_1_1 - 0.000105820105820105*G3_1_2 - 0.000846560846560844*G3_1_4 + 0.000211640211640211*G3_2_0 - 0.000105820105820105*G3_2_1 + 0.000529100529100528*G3_2_2 - 0.00126984126984127*G3_2_3 - 0.000846560846560844*G3_2_4 - 0.00169312169312169*G3_2_5 - 0.00169312169312169*G3_3_0 - 0.00126984126984127*G3_3_2 + 0.0101587301587301*G3_3_3 + 0.00507936507936506*G3_3_4 + 0.00677248677248675*G3_3_5 - 0.000846560846560844*G3_4_0 - 0.000846560846560844*G3_4_1 - 0.000846560846560844*G3_4_2 + 0.00507936507936506*G3_4_3 + 0.00507936507936506*G3_4_4 + 0.00507936507936506*G3_4_5 - 0.00126984126984127*G3_5_0 - 0.00169312169312169*G3_5_2 + 0.00677248677248675*G3_5_3 + 0.00507936507936506*G3_5_4 + 0.0101587301587301*G3_5_5 - 0.00266666666666665*G7_0_1 - 0.00266666666666665*G7_1_0 - 0.00533333333333331*G7_1_1 - 0.00266666666666665*G9_0_1 - 0.00266666666666665*G9_1_0 - 0.00533333333333331*G9_1_1;
    A[147] = -0.166666666666666*G11_0 - 0.166666666666666*G11_1;
    A[148] = -0.166666666666666*G11_0 - 0.333333333333332*G11_1;
    A[149] = -0.333333333333332*G11_0 - 0.166666666666666*G11_1;
    A[150] = 0.00158730158730158*G2_0_0 - 0.000264550264550264*G2_0_1 - 0.000264550264550263*G2_0_2 + 0.000529100529100528*G2_0_3 + 0.00211640211640211*G2_0_4 + 0.00105820105820105*G2_0_5 - 0.000264550264550264*G2_1_0 - 5.29100529100527e-05*G2_1_1 + 0.000105820105820105*G2_1_2 + 0.000211640211640211*G2_1_3 + 0.000105820105820105*G2_1_4 - 0.000105820105820105*G2_1_5 - 0.000264550264550263*G2_2_0 + 0.000105820105820105*G2_2_1 - 0.000264550264550263*G2_2_2 - 0.000105820105820105*G2_2_3 - 0.000952380952380949*G2_2_4 - 0.000105820105820105*G2_2_5 + 0.000529100529100528*G2_3_0 + 0.000211640211640211*G2_3_1 - 0.000105820105820105*G2_3_2 - 0.00169312169312169*G2_3_3 - 0.00126984126984126*G2_3_4 - 0.000846560846560844*G2_3_5 + 0.00211640211640211*G2_4_0 + 0.000105820105820105*G2_4_1 - 0.000952380952380949*G2_4_2 - 0.00126984126984126*G2_4_3 + 0.00105820105820105*G2_5_0 - 0.000105820105820105*G2_5_1 - 0.000105820105820105*G2_5_2 - 0.000846560846560844*G2_5_3;
    A[151] = -0.000264550264550264*G2_0_0 - 5.29100529100527e-05*G2_0_1 + 0.000105820105820106*G2_0_2 + 0.000211640211640211*G2_0_3 + 0.000105820105820105*G2_0_4 - 0.000105820105820105*G2_0_5 - 5.29100529100527e-05*G2_1_0 - 5.29100529100528e-05*G2_1_2 + 0.000529100529100527*G2_1_3 + 0.000634920634920633*G2_1_4 + 0.000529100529100527*G2_1_5 + 0.000105820105820105*G2_2_0 - 5.29100529100528e-05*G2_2_1 - 0.000264550264550263*G2_2_2 - 0.000105820105820105*G2_2_3 + 0.000105820105820106*G2_2_4 + 0.000211640211640211*G2_2_5 + 0.000211640211640211*G2_3_0 + 0.000529100529100527*G2_3_1 - 0.000105820105820105*G2_3_2 - 0.00126984126984127*G2_3_3 - 0.00169312169312169*G2_3_4 - 0.000846560846560844*G2_3_5 + 0.000105820105820105*G2_4_0 + 0.000634920634920633*G2_4_1 + 0.000105820105820106*G2_4_2 - 0.00169312169312169*G2_4_3 - 0.0038095238095238*G2_4_4 - 0.00169312169312169*G2_4_5 - 0.000105820105820105*G2_5_0 + 0.000529100529100527*G2_5_1 + 0.000211640211640211*G2_5_2 - 0.000846560846560844*G2_5_3 - 0.00169312169312169*G2_5_4 - 0.00126984126984127*G2_5_5;
    A[152] = -0.000264550264550263*G2_0_0 + 0.000105820105820106*G2_0_1 - 0.000264550264550263*G2_0_2 - 0.000105820105820105*G2_0_3 - 0.000952380952380949*G2_0_4 - 0.000105820105820105*G2_0_5 + 0.000105820105820105*G2_1_0 - 5.29100529100528e-05*G2_1_1 - 0.000264550264550263*G2_1_2 - 0.000105820105820105*G2_1_3 + 0.000105820105820106*G2_1_4 + 0.000211640211640211*G2_1_5 - 0.000264550264550263*G2_2_0 - 0.000264550264550263*G2_2_1 + 0.00158730158730158*G2_2_2 + 0.00105820105820105*G2_2_3 + 0.00211640211640211*G2_2_4 + 0.000529100529100528*G2_2_5 - 0.000105820105820105*G2_3_0 - 0.000105820105820105*G2_3_1 + 0.00105820105820105*G2_3_2 - 0.000846560846560844*G2_3_5 - 0.000952380952380949*G2_4_0 + 0.000105820105820106*G2_4_1 + 0.00211640211640211*G2_4_2 - 0.00126984126984127*G2_4_5 - 0.000105820105820105*G2_5_0 + 0.000211640211640211*G2_5_1 + 0.000529100529100528*G2_5_2 - 0.000846560846560844*G2_5_3 - 0.00126984126984127*G2_5_4 - 0.00169312169312169*G2_5_5;
    A[153] = 0.000529100529100528*G2_0_0 + 0.000211640211640211*G2_0_1 - 0.000105820105820106*G2_0_2 - 0.00169312169312169*G2_0_3 - 0.00126984126984126*G2_0_4 - 0.000846560846560844*G2_0_5 + 0.000211640211640211*G2_1_0 + 0.000529100529100527*G2_1_1 - 0.000105820105820105*G2_1_2 - 0.00126984126984127*G2_1_3 - 0.00169312169312169*G2_1_4 - 0.000846560846560844*G2_1_5 - 0.000105820105820105*G2_2_0 - 0.000105820105820105*G2_2_1 + 0.00105820105820105*G2_2_2 - 0.000846560846560844*G2_2_5 - 0.00169312169312169*G2_3_0 - 0.00126984126984127*G2_3_1 + 0.0101587301587301*G2_3_3 + 0.00677248677248675*G2_3_4 + 0.00507936507936506*G2_3_5 - 0.00126984126984126*G2_4_0 - 0.00169312169312169*G2_4_1 + 0.00677248677248675*G2_4_3 + 0.0101587301587301*G2_4_4 + 0.00507936507936507*G2_4_5 - 0.000846560846560844*G2_5_0 - 0.000846560846560844*G2_5_1 - 0.000846560846560844*G2_5_2 + 0.00507936507936506*G2_5_3 + 0.00507936507936506*G2_5_4 + 0.00507936507936506*G2_5_5;
    A[154] = 0.00211640211640211*G2_0_0 + 0.000105820105820105*G2_0_1 - 0.000952380952380949*G2_0_2 - 0.00126984126984126*G2_0_3 + 0.000105820105820105*G2_1_0 + 0.000634920634920633*G2_1_1 + 0.000105820105820106*G2_1_2 - 0.00169312169312169*G2_1_3 - 0.0038095238095238*G2_1_4 - 0.00169312169312169*G2_1_5 - 0.000952380952380949*G2_2_0 + 0.000105820105820106*G2_2_1 + 0.00211640211640211*G2_2_2 - 0.00126984126984127*G2_2_5 - 0.00126984126984126*G2_3_0 - 0.00169312169312169*G2_3_1 + 0.00677248677248675*G2_3_3 + 0.0101587301587301*G2_3_4 + 0.00507936507936506*G2_3_5 - 0.0038095238095238*G2_4_1 + 0.0101587301587301*G2_4_3 + 0.0406349206349205*G2_4_4 + 0.0101587301587301*G2_4_5 - 0.00169312169312169*G2_5_1 - 0.00126984126984127*G2_5_2 + 0.00507936507936507*G2_5_3 + 0.0101587301587301*G2_5_4 + 0.00677248677248675*G2_5_5;
    A[155] = 0.00105820105820105*G2_0_0 - 0.000105820105820105*G2_0_1 - 0.000105820105820105*G2_0_2 - 0.000846560846560844*G2_0_3 - 0.000105820105820105*G2_1_0 + 0.000529100529100527*G2_1_1 + 0.000211640211640211*G2_1_2 - 0.000846560846560844*G2_1_3 - 0.00169312169312169*G2_1_4 - 0.00126984126984127*G2_1_5 - 0.000105820105820105*G2_2_0 + 0.000211640211640211*G2_2_1 + 0.000529100529100528*G2_2_2 - 0.000846560846560844*G2_2_3 - 0.00126984126984127*G2_2_4 - 0.00169312169312169*G2_2_5 - 0.000846560846560844*G2_3_0 - 0.000846560846560844*G2_3_1 - 0.000846560846560844*G2_3_2 + 0.00507936507936506*G2_3_3 + 0.00507936507936506*G2_3_4 + 0.00507936507936506*G2_3_5 - 0.00169312169312169*G2_4_1 - 0.00126984126984127*G2_4_2 + 0.00507936507936506*G2_4_3 + 0.0101587301587301*G2_4_4 + 0.00677248677248675*G2_4_5 - 0.00126984126984127*G2_5_1 - 0.00169312169312169*G2_5_2 + 0.00507936507936506*G2_5_3 + 0.00677248677248675*G2_5_4 + 0.0101587301587301*G2_5_5;
    A[156] = 0.00158730158730158*G3_0_0 - 0.000264550264550264*G3_0_1 - 0.000264550264550263*G3_0_2 + 0.000529100529100528*G3_0_3 + 0.00211640211640211*G3_0_4 + 0.00105820105820105*G3_0_5 - 0.000264550264550264*G3_1_0 - 5.29100529100527e-05*G3_1_1 + 0.000105820105820105*G3_1_2 + 0.000211640211640211*G3_1_3 + 0.000105820105820105*G3_1_4 - 0.000105820105820105*G3_1_5 - 0.000264550264550263*G3_2_0 + 0.000105820105820105*G3_2_1 - 0.000264550264550263*G3_2_2 - 0.000105820105820105*G3_2_3 - 0.000952380952380949*G3_2_4 - 0.000105820105820105*G3_2_5 + 0.000529100529100528*G3_3_0 + 0.000211640211640211*G3_3_1 - 0.000105820105820105*G3_3_2 - 0.00169312169312169*G3_3_3 - 0.00126984126984126*G3_3_4 - 0.000846560846560844*G3_3_5 + 0.00211640211640211*G3_4_0 + 0.000105820105820105*G3_4_1 - 0.000952380952380949*G3_4_2 - 0.00126984126984126*G3_4_3 + 0.00105820105820105*G3_5_0 - 0.000105820105820105*G3_5_1 - 0.000105820105820105*G3_5_2 - 0.000846560846560844*G3_5_3 - 0.00266666666666665*G7_1_0 - 0.00266666666666665*G7_1_1 - 0.00266666666666665*G9_1_0 - 0.00266666666666665*G9_1_1;
    A[157] = -0.000264550264550264*G3_0_0 - 5.29100529100527e-05*G3_0_1 + 0.000105820105820106*G3_0_2 + 0.000211640211640211*G3_0_3 + 0.000105820105820105*G3_0_4 - 0.000105820105820105*G3_0_5 - 5.29100529100527e-05*G3_1_0 - 5.29100529100528e-05*G3_1_2 + 0.000529100529100527*G3_1_3 + 0.000634920634920633*G3_1_4 + 0.000529100529100527*G3_1_5 + 0.000105820105820105*G3_2_0 - 5.29100529100528e-05*G3_2_1 - 0.000264550264550263*G3_2_2 - 0.000105820105820105*G3_2_3 + 0.000105820105820106*G3_2_4 + 0.000211640211640211*G3_2_5 + 0.000211640211640211*G3_3_0 + 0.000529100529100527*G3_3_1 - 0.000105820105820105*G3_3_2 - 0.00126984126984127*G3_3_3 - 0.00169312169312169*G3_3_4 - 0.000846560846560844*G3_3_5 + 0.000105820105820105*G3_4_0 + 0.000634920634920633*G3_4_1 + 0.000105820105820106*G3_4_2 - 0.00169312169312169*G3_4_3 - 0.0038095238095238*G3_4_4 - 0.00169312169312169*G3_4_5 - 0.000105820105820105*G3_5_0 + 0.000529100529100527*G3_5_1 + 0.000211640211640211*G3_5_2 - 0.000846560846560844*G3_5_3 - 0.00169312169312169*G3_5_4 - 0.00126984126984127*G3_5_5;
    A[158] = -0.000264550264550263*G3_0_0 + 0.000105820105820106*G3_0_1 - 0.000264550264550263*G3_0_2 - 0.000105820105820105*G3_0_3 - 0.000952380952380949*G3_0_4 - 0.000105820105820105*G3_0_5 + 0.000105820105820105*G3_1_0 - 5.29100529100528e-05*G3_1_1 - 0.000264550264550263*G3_1_2 - 0.000105820105820105*G3_1_3 + 0.000105820105820106*G3_1_4 + 0.000211640211640211*G3_1_5 - 0.000264550264550263*G3_2_0 - 0.000264550264550263*G3_2_1 + 0.00158730158730158*G3_2_2 + 0.00105820105820105*G3_2_3 + 0.00211640211640211*G3_2_4 + 0.000529100529100528*G3_2_5 - 0.000105820105820105*G3_3_0 - 0.000105820105820105*G3_3_1 + 0.00105820105820105*G3_3_2 - 0.000846560846560844*G3_3_5 - 0.000952380952380949*G3_4_0 + 0.000105820105820106*G3_4_1 + 0.00211640211640211*G3_4_2 - 0.00126984126984127*G3_4_5 - 0.000105820105820105*G3_5_0 + 0.000211640211640211*G3_5_1 + 0.000529100529100528*G3_5_2 - 0.000846560846560844*G3_5_3 - 0.00126984126984127*G3_5_4 - 0.00169312169312169*G3_5_5 - 0.00266666666666666*G7_0_1 - 0.00266666666666665*G7_1_1 - 0.00266666666666666*G9_0_1 - 0.00266666666666665*G9_1_1;
    A[159] = 0.000529100529100528*G3_0_0 + 0.000211640211640211*G3_0_1 - 0.000105820105820106*G3_0_2 - 0.00169312169312169*G3_0_3 - 0.00126984126984126*G3_0_4 - 0.000846560846560844*G3_0_5 + 0.000211640211640211*G3_1_0 + 0.000529100529100527*G3_1_1 - 0.000105820105820105*G3_1_2 - 0.00126984126984127*G3_1_3 - 0.00169312169312169*G3_1_4 - 0.000846560846560844*G3_1_5 - 0.000105820105820105*G3_2_0 - 0.000105820105820105*G3_2_1 + 0.00105820105820105*G3_2_2 - 0.000846560846560844*G3_2_5 - 0.00169312169312169*G3_3_0 - 0.00126984126984127*G3_3_1 + 0.0101587301587301*G3_3_3 + 0.00677248677248675*G3_3_4 + 0.00507936507936506*G3_3_5 - 0.00126984126984126*G3_4_0 - 0.00169312169312169*G3_4_1 + 0.00677248677248675*G3_4_3 + 0.0101587301587301*G3_4_4 + 0.00507936507936507*G3_4_5 - 0.000846560846560844*G3_5_0 - 0.000846560846560844*G3_5_1 - 0.000846560846560844*G3_5_2 + 0.00507936507936506*G3_5_3 + 0.00507936507936506*G3_5_4 + 0.00507936507936506*G3_5_5 - 0.00533333333333331*G7_0_0 - 0.00266666666666665*G7_0_1 - 0.00266666666666665*G7_1_0 - 0.00533333333333331*G9_0_0 - 0.00266666666666665*G9_0_1 - 0.00266666666666665*G9_1_0;
    A[160] = 0.00211640211640211*G3_0_0 + 0.000105820105820105*G3_0_1 - 0.000952380952380949*G3_0_2 - 0.00126984126984126*G3_0_3 + 0.000105820105820105*G3_1_0 + 0.000634920634920633*G3_1_1 + 0.000105820105820106*G3_1_2 - 0.00169312169312169*G3_1_3 - 0.0038095238095238*G3_1_4 - 0.00169312169312169*G3_1_5 - 0.000952380952380949*G3_2_0 + 0.000105820105820106*G3_2_1 + 0.00211640211640211*G3_2_2 - 0.00126984126984127*G3_2_5 - 0.00126984126984126*G3_3_0 - 0.00169312169312169*G3_3_1 + 0.00677248677248675*G3_3_3 + 0.0101587301587301*G3_3_4 + 0.00507936507936506*G3_3_5 - 0.0038095238095238*G3_4_1 + 0.0101587301587301*G3_4_3 + 0.0406349206349205*G3_4_4 + 0.0101587301587301*G3_4_5 - 0.00169312169312169*G3_5_1 - 0.00126984126984127*G3_5_2 + 0.00507936507936507*G3_5_3 + 0.0101587301587301*G3_5_4 + 0.00677248677248675*G3_5_5 + 0.00533333333333331*G7_0_0 + 0.00266666666666665*G7_0_1 + 0.00266666666666665*G7_1_0 + 0.00533333333333331*G7_1_1 + 0.00533333333333331*G9_0_0 + 0.00266666666666665*G9_0_1 + 0.00266666666666665*G9_1_0 + 0.00533333333333331*G9_1_1;
    A[161] = 0.00105820105820105*G3_0_0 - 0.000105820105820105*G3_0_1 - 0.000105820105820105*G3_0_2 - 0.000846560846560844*G3_0_3 - 0.000105820105820105*G3_1_0 + 0.000529100529100527*G3_1_1 + 0.000211640211640211*G3_1_2 - 0.000846560846560844*G3_1_3 - 0.00169312169312169*G3_1_4 - 0.00126984126984127*G3_1_5 - 0.000105820105820105*G3_2_0 + 0.000211640211640211*G3_2_1 + 0.000529100529100528*G3_2_2 - 0.000846560846560844*G3_2_3 - 0.00126984126984127*G3_2_4 - 0.00169312169312169*G3_2_5 - 0.000846560846560844*G3_3_0 - 0.000846560846560844*G3_3_1 - 0.000846560846560844*G3_3_2 + 0.00507936507936506*G3_3_3 + 0.00507936507936506*G3_3_4 + 0.00507936507936506*G3_3_5 - 0.00169312169312169*G3_4_1 - 0.00126984126984127*G3_4_2 + 0.00507936507936506*G3_4_3 + 0.0101587301587301*G3_4_4 + 0.00677248677248675*G3_4_5 - 0.00126984126984127*G3_5_1 - 0.00169312169312169*G3_5_2 + 0.00507936507936506*G3_5_3 + 0.00677248677248675*G3_5_4 + 0.0101587301587301*G3_5_5 + 0.00266666666666666*G7_0_1 + 0.00266666666666665*G7_1_0 + 0.00266666666666666*G9_0_1 + 0.00266666666666665*G9_1_0;
    A[162] = 0.166666666666666*G11_0 - 0.166666666666666*G11_1;
    A[163] = 0.166666666666666*G11_0;
    A[164] = 0.333333333333332*G11_0 + 0.166666666666666*G11_1;
    A[165] = 0.00158730158730158*G2_0_0 - 0.000264550264550263*G2_0_1 - 0.000264550264550264*G2_0_2 + 0.000529100529100528*G2_0_3 + 0.00105820105820105*G2_0_4 + 0.00211640211640211*G2_0_5 - 0.000264550264550263*G2_1_0 - 0.000264550264550263*G2_1_1 + 0.000105820105820105*G2_1_2 - 0.000105820105820105*G2_1_3 - 0.000105820105820105*G2_1_4 - 0.000952380952380948*G2_1_5 - 0.000264550264550264*G2_2_0 + 0.000105820105820105*G2_2_1 - 5.29100529100528e-05*G2_2_2 + 0.000211640211640211*G2_2_3 - 0.000105820105820105*G2_2_4 + 0.000105820105820106*G2_2_5 + 0.000529100529100528*G2_3_0 - 0.000105820105820105*G2_3_1 + 0.000211640211640211*G2_3_2 - 0.00169312169312169*G2_3_3 - 0.000846560846560844*G2_3_4 - 0.00126984126984127*G2_3_5 + 0.00105820105820105*G2_4_0 - 0.000105820105820105*G2_4_1 - 0.000105820105820105*G2_4_2 - 0.000846560846560844*G2_4_3 + 0.00211640211640211*G2_5_0 - 0.000952380952380948*G2_5_1 + 0.000105820105820106*G2_5_2 - 0.00126984126984127*G2_5_3;
    A[166] = -0.000264550264550263*G2_0_0 - 0.000264550264550263*G2_0_1 + 0.000105820105820105*G2_0_2 - 0.000105820105820105*G2_0_3 - 0.000105820105820105*G2_0_4 - 0.000952380952380948*G2_0_5 - 0.000264550264550263*G2_1_0 + 0.00158730158730158*G2_1_1 - 0.000264550264550264*G2_1_2 + 0.00105820105820105*G2_1_3 + 0.000529100529100527*G2_1_4 + 0.00211640211640211*G2_1_5 + 0.000105820105820105*G2_2_0 - 0.000264550264550264*G2_2_1 - 5.29100529100528e-05*G2_2_2 - 0.000105820105820105*G2_2_3 + 0.000211640211640211*G2_2_4 + 0.000105820105820106*G2_2_5 - 0.000105820105820105*G2_3_0 + 0.00105820105820105*G2_3_1 - 0.000105820105820105*G2_3_2 - 0.000846560846560844*G2_3_4 - 0.000105820105820105*G2_4_0 + 0.000529100529100527*G2_4_1 + 0.000211640211640211*G2_4_2 - 0.000846560846560844*G2_4_3 - 0.00169312169312169*G2_4_4 - 0.00126984126984127*G2_4_5 - 0.000952380952380948*G2_5_0 + 0.00211640211640211*G2_5_1 + 0.000105820105820106*G2_5_2 - 0.00126984126984127*G2_5_4;
    A[167] = -0.000264550264550264*G2_0_0 + 0.000105820105820105*G2_0_1 - 5.29100529100528e-05*G2_0_2 + 0.000211640211640211*G2_0_3 - 0.000105820105820105*G2_0_4 + 0.000105820105820106*G2_0_5 + 0.000105820105820105*G2_1_0 - 0.000264550264550263*G2_1_1 - 5.29100529100528e-05*G2_1_2 - 0.000105820105820105*G2_1_3 + 0.000211640211640211*G2_1_4 + 0.000105820105820106*G2_1_5 - 5.29100529100528e-05*G2_2_0 - 5.29100529100528e-05*G2_2_1 + 0.000529100529100528*G2_2_3 + 0.000529100529100528*G2_2_4 + 0.000634920634920633*G2_2_5 + 0.000211640211640211*G2_3_0 - 0.000105820105820105*G2_3_1 + 0.000529100529100528*G2_3_2 - 0.00126984126984127*G2_3_3 - 0.000846560846560844*G2_3_4 - 0.00169312169312169*G2_3_5 - 0.000105820105820105*G2_4_0 + 0.000211640211640211*G2_4_1 + 0.000529100529100528*G2_4_2 - 0.000846560846560844*G2_4_3 - 0.00126984126984127*G2_4_4 - 0.00169312169312169*G2_4_5 + 0.000105820105820106*G2_5_0 + 0.000105820105820106*G2_5_1 + 0.000634920634920633*G2_5_2 - 0.00169312169312169*G2_5_3 - 0.00169312169312169*G2_5_4 - 0.00380952380952379*G2_5_5;
    A[168] = 0.000529100529100528*G2_0_0 - 0.000105820105820105*G2_0_1 + 0.000211640211640211*G2_0_2 - 0.00169312169312169*G2_0_3 - 0.000846560846560844*G2_0_4 - 0.00126984126984127*G2_0_5 - 0.000105820105820105*G2_1_0 + 0.00105820105820105*G2_1_1 - 0.000105820105820105*G2_1_2 - 0.000846560846560844*G2_1_4 + 0.000211640211640211*G2_2_0 - 0.000105820105820105*G2_2_1 + 0.000529100529100528*G2_2_2 - 0.00126984126984127*G2_2_3 - 0.000846560846560844*G2_2_4 - 0.00169312169312169*G2_2_5 - 0.00169312169312169*G2_3_0 - 0.00126984126984127*G2_3_2 + 0.0101587301587301*G2_3_3 + 0.00507936507936506*G2_3_4 + 0.00677248677248675*G2_3_5 - 0.000846560846560844*G2_4_0 - 0.000846560846560844*G2_4_1 - 0.000846560846560844*G2_4_2 + 0.00507936507936506*G2_4_3 + 0.00507936507936506*G2_4_4 + 0.00507936507936506*G2_4_5 - 0.00126984126984127*G2_5_0 - 0.00169312169312169*G2_5_2 + 0.00677248677248675*G2_5_3 + 0.00507936507936506*G2_5_4 + 0.0101587301587301*G2_5_5;
    A[169] = 0.00105820105820105*G2_0_0 - 0.000105820105820105*G2_0_1 - 0.000105820105820105*G2_0_2 - 0.000846560846560844*G2_0_3 - 0.000105820105820105*G2_1_0 + 0.000529100529100527*G2_1_1 + 0.000211640211640211*G2_1_2 - 0.000846560846560844*G2_1_3 - 0.00169312169312169*G2_1_4 - 0.00126984126984127*G2_1_5 - 0.000105820105820105*G2_2_0 + 0.000211640211640211*G2_2_1 + 0.000529100529100528*G2_2_2 - 0.000846560846560844*G2_2_3 - 0.00126984126984127*G2_2_4 - 0.00169312169312169*G2_2_5 - 0.000846560846560844*G2_3_0 - 0.000846560846560844*G2_3_1 - 0.000846560846560844*G2_3_2 + 0.00507936507936506*G2_3_3 + 0.00507936507936506*G2_3_4 + 0.00507936507936506*G2_3_5 - 0.00169312169312169*G2_4_1 - 0.00126984126984127*G2_4_2 + 0.00507936507936507*G2_4_3 + 0.0101587301587301*G2_4_4 + 0.00677248677248675*G2_4_5 - 0.00126984126984127*G2_5_1 - 0.00169312169312169*G2_5_2 + 0.00507936507936506*G2_5_3 + 0.00677248677248675*G2_5_4 + 0.0101587301587301*G2_5_5;
    A[170] = 0.00211640211640211*G2_0_0 - 0.000952380952380948*G2_0_1 + 0.000105820105820106*G2_0_2 - 0.00126984126984127*G2_0_3 - 0.000952380952380948*G2_1_0 + 0.00211640211640211*G2_1_1 + 0.000105820105820106*G2_1_2 - 0.00126984126984127*G2_1_4 + 0.000105820105820106*G2_2_0 + 0.000105820105820106*G2_2_1 + 0.000634920634920633*G2_2_2 - 0.00169312169312169*G2_2_3 - 0.00169312169312169*G2_2_4 - 0.0038095238095238*G2_2_5 - 0.00126984126984127*G2_3_0 - 0.00169312169312169*G2_3_2 + 0.00677248677248675*G2_3_3 + 0.00507936507936506*G2_3_4 + 0.0101587301587301*G2_3_5 - 0.00126984126984127*G2_4_1 - 0.00169312169312169*G2_4_2 + 0.00507936507936506*G2_4_3 + 0.00677248677248675*G2_4_4 + 0.0101587301587301*G2_4_5 - 0.00380952380952379*G2_5_2 + 0.0101587301587301*G2_5_3 + 0.0101587301587301*G2_5_4 + 0.0406349206349204*G2_5_5;
    A[171] = 0.00158730158730158*G3_0_0 - 0.000264550264550263*G3_0_1 - 0.000264550264550264*G3_0_2 + 0.000529100529100528*G3_0_3 + 0.00105820105820105*G3_0_4 + 0.00211640211640211*G3_0_5 - 0.000264550264550263*G3_1_0 - 0.000264550264550263*G3_1_1 + 0.000105820105820105*G3_1_2 - 0.000105820105820105*G3_1_3 - 0.000105820105820105*G3_1_4 - 0.000952380952380948*G3_1_5 - 0.000264550264550264*G3_2_0 + 0.000105820105820105*G3_2_1 - 5.29100529100528e-05*G3_2_2 + 0.000211640211640211*G3_2_3 - 0.000105820105820105*G3_2_4 + 0.000105820105820106*G3_2_5 + 0.000529100529100528*G3_3_0 - 0.000105820105820105*G3_3_1 + 0.000211640211640211*G3_3_2 - 0.00169312169312169*G3_3_3 - 0.000846560846560844*G3_3_4 - 0.00126984126984127*G3_3_5 + 0.00105820105820105*G3_4_0 - 0.000105820105820105*G3_4_1 - 0.000105820105820105*G3_4_2 - 0.000846560846560844*G3_4_3 + 0.00211640211640211*G3_5_0 - 0.000952380952380948*G3_5_1 + 0.000105820105820106*G3_5_2 - 0.00126984126984127*G3_5_3 - 0.00266666666666665*G7_0_0 - 0.00266666666666665*G7_0_1 - 0.00266666666666665*G9_0_0 - 0.00266666666666665*G9_0_1;
    A[172] = -0.000264550264550263*G3_0_0 - 0.000264550264550263*G3_0_1 + 0.000105820105820105*G3_0_2 - 0.000105820105820105*G3_0_3 - 0.000105820105820105*G3_0_4 - 0.000952380952380948*G3_0_5 - 0.000264550264550263*G3_1_0 + 0.00158730158730158*G3_1_1 - 0.000264550264550264*G3_1_2 + 0.00105820105820105*G3_1_3 + 0.000529100529100527*G3_1_4 + 0.00211640211640211*G3_1_5 + 0.000105820105820105*G3_2_0 - 0.000264550264550264*G3_2_1 - 5.29100529100528e-05*G3_2_2 - 0.000105820105820105*G3_2_3 + 0.000211640211640211*G3_2_4 + 0.000105820105820106*G3_2_5 - 0.000105820105820105*G3_3_0 + 0.00105820105820105*G3_3_1 - 0.000105820105820105*G3_3_2 - 0.000846560846560844*G3_3_4 - 0.000105820105820105*G3_4_0 + 0.000529100529100527*G3_4_1 + 0.000211640211640211*G3_4_2 - 0.000846560846560844*G3_4_3 - 0.00169312169312169*G3_4_4 - 0.00126984126984127*G3_4_5 - 0.000952380952380948*G3_5_0 + 0.00211640211640211*G3_5_1 + 0.000105820105820106*G3_5_2 - 0.00126984126984127*G3_5_4 - 0.00266666666666665*G7_0_0 - 0.00266666666666665*G7_1_0 - 0.00266666666666665*G9_0_0 - 0.00266666666666665*G9_1_0;
    A[173] = -0.000264550264550264*G3_0_0 + 0.000105820105820105*G3_0_1 - 5.29100529100528e-05*G3_0_2 + 0.000211640211640211*G3_0_3 - 0.000105820105820105*G3_0_4 + 0.000105820105820106*G3_0_5 + 0.000105820105820105*G3_1_0 - 0.000264550264550263*G3_1_1 - 5.29100529100528e-05*G3_1_2 - 0.000105820105820105*G3_1_3 + 0.000211640211640211*G3_1_4 + 0.000105820105820106*G3_1_5 - 5.29100529100528e-05*G3_2_0 - 5.29100529100528e-05*G3_2_1 + 0.000529100529100528*G3_2_3 + 0.000529100529100528*G3_2_4 + 0.000634920634920633*G3_2_5 + 0.000211640211640211*G3_3_0 - 0.000105820105820105*G3_3_1 + 0.000529100529100528*G3_3_2 - 0.00126984126984127*G3_3_3 - 0.000846560846560844*G3_3_4 - 0.00169312169312169*G3_3_5 - 0.000105820105820105*G3_4_0 + 0.000211640211640211*G3_4_1 + 0.000529100529100528*G3_4_2 - 0.000846560846560844*G3_4_3 - 0.00126984126984127*G3_4_4 - 0.00169312169312169*G3_4_5 + 0.000105820105820106*G3_5_0 + 0.000105820105820106*G3_5_1 + 0.000634920634920633*G3_5_2 - 0.00169312169312169*G3_5_3 - 0.00169312169312169*G3_5_4 - 0.00380952380952379*G3_5_5;
    A[174] = 0.000529100529100528*G3_0_0 - 0.000105820105820105*G3_0_1 + 0.000211640211640211*G3_0_2 - 0.00169312169312169*G3_0_3 - 0.000846560846560844*G3_0_4 - 0.00126984126984127*G3_0_5 - 0.000105820105820105*G3_1_0 + 0.00105820105820105*G3_1_1 - 0.000105820105820105*G3_1_2 - 0.000846560846560844*G3_1_4 + 0.000211640211640211*G3_2_0 - 0.000105820105820105*G3_2_1 + 0.000529100529100528*G3_2_2 - 0.00126984126984127*G3_2_3 - 0.000846560846560844*G3_2_4 - 0.00169312169312169*G3_2_5 - 0.00169312169312169*G3_3_0 - 0.00126984126984127*G3_3_2 + 0.0101587301587301*G3_3_3 + 0.00507936507936506*G3_3_4 + 0.00677248677248675*G3_3_5 - 0.000846560846560844*G3_4_0 - 0.000846560846560844*G3_4_1 - 0.000846560846560844*G3_4_2 + 0.00507936507936506*G3_4_3 + 0.00507936507936506*G3_4_4 + 0.00507936507936506*G3_4_5 - 0.00126984126984127*G3_5_0 - 0.00169312169312169*G3_5_2 + 0.00677248677248675*G3_5_3 + 0.00507936507936506*G3_5_4 + 0.0101587301587301*G3_5_5 - 0.00266666666666665*G7_0_1 - 0.00266666666666665*G7_1_0 - 0.00533333333333331*G7_1_1 - 0.00266666666666665*G9_0_1 - 0.00266666666666665*G9_1_0 - 0.00533333333333331*G9_1_1;
    A[175] = 0.00105820105820105*G3_0_0 - 0.000105820105820105*G3_0_1 - 0.000105820105820105*G3_0_2 - 0.000846560846560844*G3_0_3 - 0.000105820105820105*G3_1_0 + 0.000529100529100527*G3_1_1 + 0.000211640211640211*G3_1_2 - 0.000846560846560844*G3_1_3 - 0.00169312169312169*G3_1_4 - 0.00126984126984127*G3_1_5 - 0.000105820105820105*G3_2_0 + 0.000211640211640211*G3_2_1 + 0.000529100529100528*G3_2_2 - 0.000846560846560844*G3_2_3 - 0.00126984126984127*G3_2_4 - 0.00169312169312169*G3_2_5 - 0.000846560846560844*G3_3_0 - 0.000846560846560844*G3_3_1 - 0.000846560846560844*G3_3_2 + 0.00507936507936506*G3_3_3 + 0.00507936507936506*G3_3_4 + 0.00507936507936506*G3_3_5 - 0.00169312169312169*G3_4_1 - 0.00126984126984127*G3_4_2 + 0.00507936507936507*G3_4_3 + 0.0101587301587301*G3_4_4 + 0.00677248677248675*G3_4_5 - 0.00126984126984127*G3_5_1 - 0.00169312169312169*G3_5_2 + 0.00507936507936506*G3_5_3 + 0.00677248677248675*G3_5_4 + 0.0101587301587301*G3_5_5 + 0.00266666666666665*G7_0_1 + 0.00266666666666666*G7_1_0 + 0.00266666666666665*G9_0_1 + 0.00266666666666666*G9_1_0;
    A[176] = 0.00211640211640211*G3_0_0 - 0.000952380952380948*G3_0_1 + 0.000105820105820106*G3_0_2 - 0.00126984126984127*G3_0_3 - 0.000952380952380948*G3_1_0 + 0.00211640211640211*G3_1_1 + 0.000105820105820106*G3_1_2 - 0.00126984126984127*G3_1_4 + 0.000105820105820106*G3_2_0 + 0.000105820105820106*G3_2_1 + 0.000634920634920633*G3_2_2 - 0.00169312169312169*G3_2_3 - 0.00169312169312169*G3_2_4 - 0.0038095238095238*G3_2_5 - 0.00126984126984127*G3_3_0 - 0.00169312169312169*G3_3_2 + 0.00677248677248675*G3_3_3 + 0.00507936507936506*G3_3_4 + 0.0101587301587301*G3_3_5 - 0.00126984126984127*G3_4_1 - 0.00169312169312169*G3_4_2 + 0.00507936507936506*G3_4_3 + 0.00677248677248675*G3_4_4 + 0.0101587301587301*G3_4_5 - 0.00380952380952379*G3_5_2 + 0.0101587301587301*G3_5_3 + 0.0101587301587301*G3_5_4 + 0.0406349206349204*G3_5_5 + 0.00533333333333331*G7_0_0 + 0.00266666666666665*G7_0_1 + 0.00266666666666665*G7_1_0 + 0.00533333333333331*G7_1_1 + 0.00533333333333331*G9_0_0 + 0.00266666666666665*G9_0_1 + 0.00266666666666665*G9_1_0 + 0.00533333333333331*G9_1_1;
    A[177] = -0.166666666666666*G11_0 + 0.166666666666666*G11_1;
    A[178] = 0.166666666666666*G11_0 + 0.333333333333332*G11_1;
    A[179] = 0.166666666666666*G11_1;
    A[180] = 0.166666666666666*G4_0 + 0.166666666666666*G4_1;
    A[181] = 0.0;
    A[182] = 0.0;
    A[183] = -0.166666666666666*G4_0 - 0.166666666666666*G4_1;
    A[184] = 0.166666666666666*G4_0 - 0.166666666666666*G4_1;
    A[185] = -0.166666666666666*G4_0 + 0.166666666666666*G4_1;
    A[186] = 0.166666666666666*G5_0 + 0.166666666666666*G5_1;
    A[187] = 0.0;
    A[188] = 0.0;
    A[189] = -0.166666666666666*G5_0 - 0.166666666666666*G5_1;
    A[190] = 0.166666666666666*G5_0 - 0.166666666666666*G5_1;
    A[191] = -0.166666666666666*G5_0 + 0.166666666666666*G5_1;
    A[192] = 0.0;
    A[193] = 0.0;
    A[194] = 0.0;
    A[195] = 0.0;
    A[196] = -0.166666666666666*G4_0;
    A[197] = 0.0;
    A[198] = -0.166666666666666*G4_0 - 0.333333333333332*G4_1;
    A[199] = 0.166666666666666*G4_0;
    A[200] = 0.166666666666666*G4_0 + 0.333333333333332*G4_1;
    A[201] = 0.0;
    A[202] = -0.166666666666666*G5_0;
    A[203] = 0.0;
    A[204] = -0.166666666666666*G5_0 - 0.333333333333332*G5_1;
    A[205] = 0.166666666666666*G5_0;
    A[206] = 0.166666666666666*G5_0 + 0.333333333333332*G5_1;
    A[207] = 0.0;
    A[208] = 0.0;
    A[209] = 0.0;
    A[210] = 0.0;
    A[211] = 0.0;
    A[212] = -0.166666666666666*G4_1;
    A[213] = -0.333333333333332*G4_0 - 0.166666666666666*G4_1;
    A[214] = 0.333333333333332*G4_0 + 0.166666666666666*G4_1;
    A[215] = 0.166666666666666*G4_1;
    A[216] = 0.0;
    A[217] = 0.0;
    A[218] = -0.166666666666666*G5_1;
    A[219] = -0.333333333333332*G5_0 - 0.166666666666666*G5_1;
    A[220] = 0.333333333333332*G5_0 + 0.166666666666666*G5_1;
    A[221] = 0.166666666666666*G5_1;
    A[222] = 0.0;
    A[223] = 0.0;
    A[224] = 0.0;
  }

  /// Tabulate the tensor for the contribution from a local cell
  /// using the specified reference cell quadrature points/weights
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c,
                               unsigned int num_quadrature_points,
                               const double * const * quadrature_points,
                               const double* quadrature_weights) const
  {
    throw std::runtime_error("Quadrature version of tabulate_tensor not available when using the FFC tensor representation.");
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_form_0: public ufc::form
{
public:

  /// Constructor
  ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_form_0() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_form_0()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "Form([Integral(Sum(Product(IndexSum(Product(Indexed(ListTensor(Coefficient(FiniteElement('Lagrange', Cell('triangle', Space(2)), 2, None), 0), Coefficient(FiniteElement('Lagrange', Cell('triangle', Space(2)), 2, None), 1)), MultiIndex((Index(0),), {Index(0): 2})), Indexed(ListTensor(Indexed(Argument(MixedElement(*[VectorElement('Lagrange', Cell('triangle', Space(2)), 2, 2, None), FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None)], **{'value_shape': (3,) }), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Argument(MixedElement(*[VectorElement('Lagrange', Cell('triangle', Space(2)), 2, 2, None), FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None)], **{'value_shape': (3,) }), 0), MultiIndex((FixedIndex(1),), {}))), MultiIndex((Index(0),), {Index(0): 2}))), MultiIndex((Index(0),), {Index(0): 2})), IndexSum(Product(Indexed(ListTensor(Coefficient(FiniteElement('Lagrange', Cell('triangle', Space(2)), 2, None), 0), Coefficient(FiniteElement('Lagrange', Cell('triangle', Space(2)), 2, None), 1)), MultiIndex((Index(1),), {Index(1): 2})), Indexed(ListTensor(Indexed(Argument(MixedElement(*[VectorElement('Lagrange', Cell('triangle', Space(2)), 2, 2, None), FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None)], **{'value_shape': (3,) }), 1), MultiIndex((FixedIndex(0),), {})), Indexed(Argument(MixedElement(*[VectorElement('Lagrange', Cell('triangle', Space(2)), 2, 2, None), FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None)], **{'value_shape': (3,) }), 1), MultiIndex((FixedIndex(1),), {}))), MultiIndex((Index(1),), {Index(1): 2}))), MultiIndex((Index(1),), {Index(1): 2}))), Sum(Product(IntValue(-1, (), (), {}), Product(IndexSum(Indexed(ListTensor(Indexed(SpatialDerivative(Argument(MixedElement(*[VectorElement('Lagrange', Cell('triangle', Space(2)), 2, 2, None), FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None)], **{'value_shape': (3,) }), 1), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((FixedIndex(0),), {})), Indexed(SpatialDerivative(Argument(MixedElement(*[VectorElement('Lagrange', Cell('triangle', Space(2)), 2, 2, None), FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None)], **{'value_shape': (3,) }), 1), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((FixedIndex(1),), {}))), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(2),), {Index(2): 2})), Indexed(Argument(MixedElement(*[VectorElement('Lagrange', Cell('triangle', Space(2)), 2, 2, None), FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None)], **{'value_shape': (3,) }), 0), MultiIndex((FixedIndex(2),), {})))), Sum(Product(FloatValue(0.0040000000000000001, (), (), {}), IndexSum(IndexSum(Product(Indexed(ComponentTensor(Indexed(ListTensor(Indexed(SpatialDerivative(Argument(MixedElement(*[VectorElement('Lagrange', Cell('triangle', Space(2)), 2, 2, None), FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None)], **{'value_shape': (3,) }), 0), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((FixedIndex(0),), {})), Indexed(SpatialDerivative(Argument(MixedElement(*[VectorElement('Lagrange', Cell('triangle', Space(2)), 2, 2, None), FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None)], **{'value_shape': (3,) }), 0), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((FixedIndex(1),), {}))), MultiIndex((Index(4),), {Index(4): 2})), MultiIndex((Index(4), Index(3)), {Index(4): 2, Index(3): 2})), MultiIndex((Index(5), Index(6)), {Index(5): 2, Index(6): 2})), Indexed(ComponentTensor(Indexed(ListTensor(Indexed(SpatialDerivative(Argument(MixedElement(*[VectorElement('Lagrange', Cell('triangle', Space(2)), 2, 2, None), FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None)], **{'value_shape': (3,) }), 1), MultiIndex((Index(7),), {Index(7): 2})), MultiIndex((FixedIndex(0),), {})), Indexed(SpatialDerivative(Argument(MixedElement(*[VectorElement('Lagrange', Cell('triangle', Space(2)), 2, 2, None), FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None)], **{'value_shape': (3,) }), 1), MultiIndex((Index(7),), {Index(7): 2})), MultiIndex((FixedIndex(1),), {}))), MultiIndex((Index(8),), {Index(8): 2})), MultiIndex((Index(8), Index(7)), {Index(7): 2, Index(8): 2})), MultiIndex((Index(5), Index(6)), {Index(5): 2, Index(6): 2}))), MultiIndex((Index(5),), {Index(5): 2})), MultiIndex((Index(6),), {Index(6): 2}))), Product(IntValue(-1, (), (), {}), Product(IndexSum(Indexed(ListTensor(Indexed(SpatialDerivative(Argument(MixedElement(*[VectorElement('Lagrange', Cell('triangle', Space(2)), 2, 2, None), FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None)], **{'value_shape': (3,) }), 0), MultiIndex((Index(9),), {Index(9): 2})), MultiIndex((FixedIndex(0),), {})), Indexed(SpatialDerivative(Argument(MixedElement(*[VectorElement('Lagrange', Cell('triangle', Space(2)), 2, 2, None), FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None)], **{'value_shape': (3,) }), 0), MultiIndex((Index(9),), {Index(9): 2})), MultiIndex((FixedIndex(1),), {}))), MultiIndex((Index(9),), {Index(9): 2})), MultiIndex((Index(9),), {Index(9): 2})), Indexed(Argument(MixedElement(*[VectorElement('Lagrange', Cell('triangle', Space(2)), 2, 2, None), FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None)], **{'value_shape': (3,) }), 1), MultiIndex((FixedIndex(2),), {}))))))), Measure('cell', 0, None))])";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 2;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 2;
  }

  /// Return the number of cell domains
  virtual unsigned int num_cell_domains() const
  {
    return 1;
  }

  /// Return the number of exterior facet domains
  virtual unsigned int num_exterior_facet_domains() const
  {
    return 0;
  }

  /// Return the number of interior facet domains
  virtual unsigned int num_interior_facet_domains() const
  {
    return 0;
  }

  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_finite_element_3();
        break;
      }
    case 1:
      {
        return new ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_finite_element_3();
        break;
      }
    case 2:
      {
        return new ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_finite_element_0();
        break;
      }
    case 3:
      {
        return new ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_dofmap_3();
        break;
      }
    case 1:
      {
        return new ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_dofmap_3();
        break;
      }
    case 2:
      {
        return new ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_dofmap_0();
        break;
      }
    case 3:
      {
        return new ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_43436bc228d07fbb9ea74f5ece59bb1cd8c61b2a_cell_integral_0_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

#endif
