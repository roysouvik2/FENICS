// This code conforms with the UFC specification version 2.0.5
// and was automatically generated by FFC version 1.0.0.
// 
// This code was generated with the following parameters:
// 
//   cache_dir:                      ''
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   False
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   False
//   format:                         'ufc'
//   log_level:                      25
//   log_prefix:                     ''
//   name:                           'ffc'
//   no-evaluate_basis_derivatives:  True
//   optimize:                       False
//   output_dir:                     '.'
//   precision:                      15
//   quadrature_degree:              -1
//   quadrature_rule:                'auto'
//   representation:                 'auto'
//   split:                          False
//   swig_binary:                    'swig2.0'
//   swig_path:                      ''

#ifndef __FFC_FORM_099E36AD95026610968141786BAB4CF814CE0535_H
#define __FFC_FORM_099E36AD95026610968141786BAB4CF814CE0535_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>

/// This class defines the interface for a finite element.

class ffc_form_099e36ad95026610968141786bab4cf814ce0535_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_099e36ad95026610968141786bab4cf814ce0535_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_099e36ad95026610968141786bab4cf814ce0535_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 3;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Reset values.
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 3; r++)
    {
      evaluate_basis(r, &dof_values, coordinates, c);
      values[r] = dof_values;
    }// end loop over 'r'
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 3; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_099e36ad95026610968141786bab4cf814ce0535_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_099e36ad95026610968141786bab4cf814ce0535_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_099e36ad95026610968141786bab4cf814ce0535_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_099e36ad95026610968141786bab4cf814ce0535_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Cell('triangle', Space(2)), 2, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 6;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Reset values.
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582064, 0.0544331053951817};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582063, 0.0544331053951818};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 6; r++)
    {
      evaluate_basis(r, &dof_values, coordinates, c);
      values[r] = dof_values;
    }// end loop over 'r'
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 6; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*x[1][0] + 0.5*x[2][0];
      y[1] = 0.5*x[1][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[2][0];
      y[1] = 0.5*x[0][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[1][0];
      y[1] = 0.5*x[0][1] + 0.5*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5*x[1][0] + 0.5*x[2][0];
    y[1] = 0.5*x[1][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*x[0][0] + 0.5*x[2][0];
    y[1] = 0.5*x[0][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*x[0][0] + 0.5*x[1][0];
    y[1] = 0.5*x[0][1] + 0.5*x[1][1];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_099e36ad95026610968141786bab4cf814ce0535_finite_element_1();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_099e36ad95026610968141786bab4cf814ce0535_finite_element_2: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_099e36ad95026610968141786bab4cf814ce0535_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_099e36ad95026610968141786bab4cf814ce0535_finite_element_2()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "VectorElement('Lagrange', Cell('triangle', Space(2)), 2, 2, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 12;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Reset values.
    values[0] = 0.0;
    values[1] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582064, 0.0544331053951817};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582063, 0.0544331053951818};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582064, 0.0544331053951817};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582063, 0.0544331053951818};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {0.0, 0.0};
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 12; r++)
    {
      evaluate_basis(r, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 2; s++)
      {
        values[r*2 + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[2*num_derivatives];
    for (unsigned int r = 0; r < 2*num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 12; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[2];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*x[1][0] + 0.5*x[2][0];
      y[1] = 0.5*x[1][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[2][0];
      y[1] = 0.5*x[0][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[1][0];
      y[1] = 0.5*x[0][1] + 0.5*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 9:
      {
        y[0] = 0.5*x[1][0] + 0.5*x[2][0];
      y[1] = 0.5*x[1][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 10:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[2][0];
      y[1] = 0.5*x[0][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 11:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[1][0];
      y[1] = 0.5*x[0][1] + 0.5*x[1][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[2];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5*x[1][0] + 0.5*x[2][0];
    y[1] = 0.5*x[1][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*x[0][0] + 0.5*x[2][0];
    y[1] = 0.5*x[0][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*x[0][0] + 0.5*x[1][0];
    y[1] = 0.5*x[0][1] + 0.5*x[1][1];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = 0.5*x[1][0] + 0.5*x[2][0];
    y[1] = 0.5*x[1][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = 0.5*x[0][0] + 0.5*x[2][0];
    y[1] = 0.5*x[0][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = 0.5*x[0][0] + 0.5*x[1][0];
    y[1] = 0.5*x[0][1] + 0.5*x[1][1];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[6];
    vertex_values[3] = dof_values[7];
    vertex_values[5] = dof_values[8];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 2;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_099e36ad95026610968141786bab4cf814ce0535_finite_element_1();
        break;
      }
    case 1:
      {
        return new ffc_form_099e36ad95026610968141786bab4cf814ce0535_finite_element_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_099e36ad95026610968141786bab4cf814ce0535_finite_element_2();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_099e36ad95026610968141786bab4cf814ce0535_dofmap_0: public ufc::dofmap
{
private:

  unsigned int _global_dimension;
public:

  /// Constructor
  ffc_form_099e36ad95026610968141786bab4cf814ce0535_dofmap_0() : ufc::dofmap()
  {
    _global_dimension = 0;
  }

  /// Destructor
  virtual ~ffc_form_099e36ad95026610968141786bab4cf814ce0535_dofmap_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Initialize dofmap for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    _global_dimension = m.num_entities[0];
    return false;
  }

  /// Initialize dofmap for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dofmap for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the topological dimension of the associated cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return _global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 3;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 3;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 2;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual unsigned int num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_099e36ad95026610968141786bab4cf814ce0535_dofmap_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_099e36ad95026610968141786bab4cf814ce0535_dofmap_1: public ufc::dofmap
{
private:

  unsigned int _global_dimension;
public:

  /// Constructor
  ffc_form_099e36ad95026610968141786bab4cf814ce0535_dofmap_1() : ufc::dofmap()
  {
    _global_dimension = 0;
  }

  /// Destructor
  virtual ~ffc_form_099e36ad95026610968141786bab4cf814ce0535_dofmap_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Cell('triangle', Space(2)), 2, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Initialize dofmap for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    _global_dimension = m.num_entities[0] + m.num_entities[1];
    return false;
  }

  /// Initialize dofmap for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dofmap for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the topological dimension of the associated cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return _global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 6;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 6;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 3;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 1;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
    dofs[3] = offset + c.entity_indices[1][0];
    dofs[4] = offset + c.entity_indices[1][1];
    dofs[5] = offset + c.entity_indices[1][2];
    offset += m.num_entities[1];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 4;
          break;
        }
      case 2:
        {
          dofs[0] = 5;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[3][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[4][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[4][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[5][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[5][1] = 0.5*x[0][1] + 0.5*x[1][1];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual unsigned int num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_099e36ad95026610968141786bab4cf814ce0535_dofmap_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_099e36ad95026610968141786bab4cf814ce0535_dofmap_2: public ufc::dofmap
{
private:

  unsigned int _global_dimension;
public:

  /// Constructor
  ffc_form_099e36ad95026610968141786bab4cf814ce0535_dofmap_2() : ufc::dofmap()
  {
    _global_dimension = 0;
  }

  /// Destructor
  virtual ~ffc_form_099e36ad95026610968141786bab4cf814ce0535_dofmap_2()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for VectorElement('Lagrange', Cell('triangle', Space(2)), 2, 2, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Initialize dofmap for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    _global_dimension = 2*m.num_entities[0] + 2*m.num_entities[1];
    return false;
  }

  /// Initialize dofmap for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dofmap for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the topological dimension of the associated cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return _global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 12;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 12;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 6;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return 2;
        break;
      }
    case 1:
      {
        return 2;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
    dofs[3] = offset + c.entity_indices[1][0];
    dofs[4] = offset + c.entity_indices[1][1];
    dofs[5] = offset + c.entity_indices[1][2];
    offset += m.num_entities[1];
    dofs[6] = offset + c.entity_indices[0][0];
    dofs[7] = offset + c.entity_indices[0][1];
    dofs[8] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
    dofs[9] = offset + c.entity_indices[1][0];
    dofs[10] = offset + c.entity_indices[1][1];
    dofs[11] = offset + c.entity_indices[1][2];
    offset += m.num_entities[1];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
      dofs[3] = 6;
      dofs[4] = 8;
      dofs[5] = 10;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
      dofs[3] = 6;
      dofs[4] = 7;
      dofs[5] = 11;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 6;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 7;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 8;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 9;
          break;
        }
      case 1:
        {
          dofs[0] = 4;
        dofs[1] = 10;
          break;
        }
      case 2:
        {
          dofs[0] = 5;
        dofs[1] = 11;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[3][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[4][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[4][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[5][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[5][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[6][0] = x[0][0];
    coordinates[6][1] = x[0][1];
    coordinates[7][0] = x[1][0];
    coordinates[7][1] = x[1][1];
    coordinates[8][0] = x[2][0];
    coordinates[8][1] = x[2][1];
    coordinates[9][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[9][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[10][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[10][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[11][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[11][1] = 0.5*x[0][1] + 0.5*x[1][1];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual unsigned int num_sub_dofmaps() const
  {
    return 2;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_099e36ad95026610968141786bab4cf814ce0535_dofmap_1();
        break;
      }
    case 1:
      {
        return new ffc_form_099e36ad95026610968141786bab4cf814ce0535_dofmap_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_099e36ad95026610968141786bab4cf814ce0535_dofmap_2();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class ffc_form_099e36ad95026610968141786bab4cf814ce0535_cell_integral_0_0: public ufc::cell_integral
{
public:

  /// Constructor
  ffc_form_099e36ad95026610968141786bab4cf814ce0535_cell_integral_0_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_099e36ad95026610968141786bab4cf814ce0535_cell_integral_0_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Number of operations (multiply-add pairs) for Jacobian data:      11
    // Number of operations (multiply-add pairs) for geometry tensor:    534
    // Number of operations (multiply-add pairs) for tensor contraction: 1586
    // Total number of operations (multiply-add pairs):                  2131
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute geometry tensor
    const double G1_0_0 = det*w[2][0]*w[0][0]*(1.0);
    const double G1_0_1 = det*w[2][0]*w[0][1]*(1.0);
    const double G1_0_2 = det*w[2][0]*w[0][2]*(1.0);
    const double G1_0_3 = det*w[2][0]*w[0][3]*(1.0);
    const double G1_0_4 = det*w[2][0]*w[0][4]*(1.0);
    const double G1_0_5 = det*w[2][0]*w[0][5]*(1.0);
    const double G1_0_6 = det*w[2][0]*w[0][6]*(1.0);
    const double G1_0_7 = det*w[2][0]*w[0][7]*(1.0);
    const double G1_0_8 = det*w[2][0]*w[0][8]*(1.0);
    const double G1_0_9 = det*w[2][0]*w[0][9]*(1.0);
    const double G1_0_10 = det*w[2][0]*w[0][10]*(1.0);
    const double G1_0_11 = det*w[2][0]*w[0][11]*(1.0);
    const double G1_1_0 = det*w[2][1]*w[0][0]*(1.0);
    const double G1_1_1 = det*w[2][1]*w[0][1]*(1.0);
    const double G1_1_2 = det*w[2][1]*w[0][2]*(1.0);
    const double G1_1_3 = det*w[2][1]*w[0][3]*(1.0);
    const double G1_1_4 = det*w[2][1]*w[0][4]*(1.0);
    const double G1_1_5 = det*w[2][1]*w[0][5]*(1.0);
    const double G1_1_6 = det*w[2][1]*w[0][6]*(1.0);
    const double G1_1_7 = det*w[2][1]*w[0][7]*(1.0);
    const double G1_1_8 = det*w[2][1]*w[0][8]*(1.0);
    const double G1_1_9 = det*w[2][1]*w[0][9]*(1.0);
    const double G1_1_10 = det*w[2][1]*w[0][10]*(1.0);
    const double G1_1_11 = det*w[2][1]*w[0][11]*(1.0);
    const double G1_2_0 = det*w[2][2]*w[0][0]*(1.0);
    const double G1_2_1 = det*w[2][2]*w[0][1]*(1.0);
    const double G1_2_2 = det*w[2][2]*w[0][2]*(1.0);
    const double G1_2_3 = det*w[2][2]*w[0][3]*(1.0);
    const double G1_2_4 = det*w[2][2]*w[0][4]*(1.0);
    const double G1_2_5 = det*w[2][2]*w[0][5]*(1.0);
    const double G1_2_6 = det*w[2][2]*w[0][6]*(1.0);
    const double G1_2_7 = det*w[2][2]*w[0][7]*(1.0);
    const double G1_2_8 = det*w[2][2]*w[0][8]*(1.0);
    const double G1_2_9 = det*w[2][2]*w[0][9]*(1.0);
    const double G1_2_10 = det*w[2][2]*w[0][10]*(1.0);
    const double G1_2_11 = det*w[2][2]*w[0][11]*(1.0);
    const double G2_0_0_0_0 = det*w[0][0]*w[1][0]*K_00*(1.0);
    const double G2_0_0_0_1 = det*w[0][0]*w[1][0]*K_10*(1.0);
    const double G2_0_0_1_0 = det*w[0][0]*w[1][1]*K_00*(1.0);
    const double G2_0_0_2_1 = det*w[0][0]*w[1][2]*K_10*(1.0);
    const double G2_0_0_3_0 = det*w[0][0]*w[1][3]*K_00*(1.0);
    const double G2_0_0_3_1 = det*w[0][0]*w[1][3]*K_10*(1.0);
    const double G2_0_0_4_0 = det*w[0][0]*w[1][4]*K_00*(1.0);
    const double G2_0_0_4_1 = det*w[0][0]*w[1][4]*K_10*(1.0);
    const double G2_0_0_5_0 = det*w[0][0]*w[1][5]*K_00*(1.0);
    const double G2_0_0_5_1 = det*w[0][0]*w[1][5]*K_10*(1.0);
    const double G2_0_0_6_0 = det*w[0][0]*w[1][6]*K_00*(1.0);
    const double G2_0_0_6_1 = det*w[0][0]*w[1][6]*K_10*(1.0);
    const double G2_0_0_7_0 = det*w[0][0]*w[1][7]*K_00*(1.0);
    const double G2_0_0_8_1 = det*w[0][0]*w[1][8]*K_10*(1.0);
    const double G2_0_0_9_0 = det*w[0][0]*w[1][9]*K_00*(1.0);
    const double G2_0_0_9_1 = det*w[0][0]*w[1][9]*K_10*(1.0);
    const double G2_0_0_10_0 = det*w[0][0]*w[1][10]*K_00*(1.0);
    const double G2_0_0_10_1 = det*w[0][0]*w[1][10]*K_10*(1.0);
    const double G2_0_0_11_0 = det*w[0][0]*w[1][11]*K_00*(1.0);
    const double G2_0_0_11_1 = det*w[0][0]*w[1][11]*K_10*(1.0);
    const double G2_1_0_0_0 = det*w[0][1]*w[1][0]*K_00*(1.0);
    const double G2_1_0_0_1 = det*w[0][1]*w[1][0]*K_10*(1.0);
    const double G2_1_0_1_0 = det*w[0][1]*w[1][1]*K_00*(1.0);
    const double G2_1_0_2_1 = det*w[0][1]*w[1][2]*K_10*(1.0);
    const double G2_1_0_3_0 = det*w[0][1]*w[1][3]*K_00*(1.0);
    const double G2_1_0_3_1 = det*w[0][1]*w[1][3]*K_10*(1.0);
    const double G2_1_0_4_0 = det*w[0][1]*w[1][4]*K_00*(1.0);
    const double G2_1_0_4_1 = det*w[0][1]*w[1][4]*K_10*(1.0);
    const double G2_1_0_5_0 = det*w[0][1]*w[1][5]*K_00*(1.0);
    const double G2_1_0_5_1 = det*w[0][1]*w[1][5]*K_10*(1.0);
    const double G2_1_0_6_0 = det*w[0][1]*w[1][6]*K_00*(1.0);
    const double G2_1_0_6_1 = det*w[0][1]*w[1][6]*K_10*(1.0);
    const double G2_1_0_7_0 = det*w[0][1]*w[1][7]*K_00*(1.0);
    const double G2_1_0_8_1 = det*w[0][1]*w[1][8]*K_10*(1.0);
    const double G2_1_0_9_0 = det*w[0][1]*w[1][9]*K_00*(1.0);
    const double G2_1_0_9_1 = det*w[0][1]*w[1][9]*K_10*(1.0);
    const double G2_1_0_10_0 = det*w[0][1]*w[1][10]*K_00*(1.0);
    const double G2_1_0_10_1 = det*w[0][1]*w[1][10]*K_10*(1.0);
    const double G2_1_0_11_0 = det*w[0][1]*w[1][11]*K_00*(1.0);
    const double G2_1_0_11_1 = det*w[0][1]*w[1][11]*K_10*(1.0);
    const double G2_2_0_0_0 = det*w[0][2]*w[1][0]*K_00*(1.0);
    const double G2_2_0_0_1 = det*w[0][2]*w[1][0]*K_10*(1.0);
    const double G2_2_0_1_0 = det*w[0][2]*w[1][1]*K_00*(1.0);
    const double G2_2_0_2_1 = det*w[0][2]*w[1][2]*K_10*(1.0);
    const double G2_2_0_3_0 = det*w[0][2]*w[1][3]*K_00*(1.0);
    const double G2_2_0_3_1 = det*w[0][2]*w[1][3]*K_10*(1.0);
    const double G2_2_0_4_0 = det*w[0][2]*w[1][4]*K_00*(1.0);
    const double G2_2_0_4_1 = det*w[0][2]*w[1][4]*K_10*(1.0);
    const double G2_2_0_5_0 = det*w[0][2]*w[1][5]*K_00*(1.0);
    const double G2_2_0_5_1 = det*w[0][2]*w[1][5]*K_10*(1.0);
    const double G2_2_0_6_0 = det*w[0][2]*w[1][6]*K_00*(1.0);
    const double G2_2_0_6_1 = det*w[0][2]*w[1][6]*K_10*(1.0);
    const double G2_2_0_7_0 = det*w[0][2]*w[1][7]*K_00*(1.0);
    const double G2_2_0_8_1 = det*w[0][2]*w[1][8]*K_10*(1.0);
    const double G2_2_0_9_0 = det*w[0][2]*w[1][9]*K_00*(1.0);
    const double G2_2_0_9_1 = det*w[0][2]*w[1][9]*K_10*(1.0);
    const double G2_2_0_10_0 = det*w[0][2]*w[1][10]*K_00*(1.0);
    const double G2_2_0_10_1 = det*w[0][2]*w[1][10]*K_10*(1.0);
    const double G2_2_0_11_0 = det*w[0][2]*w[1][11]*K_00*(1.0);
    const double G2_2_0_11_1 = det*w[0][2]*w[1][11]*K_10*(1.0);
    const double G2_3_0_0_0 = det*w[0][3]*w[1][0]*K_00*(1.0);
    const double G2_3_0_0_1 = det*w[0][3]*w[1][0]*K_10*(1.0);
    const double G2_3_0_1_0 = det*w[0][3]*w[1][1]*K_00*(1.0);
    const double G2_3_0_2_1 = det*w[0][3]*w[1][2]*K_10*(1.0);
    const double G2_3_0_3_0 = det*w[0][3]*w[1][3]*K_00*(1.0);
    const double G2_3_0_3_1 = det*w[0][3]*w[1][3]*K_10*(1.0);
    const double G2_3_0_4_0 = det*w[0][3]*w[1][4]*K_00*(1.0);
    const double G2_3_0_4_1 = det*w[0][3]*w[1][4]*K_10*(1.0);
    const double G2_3_0_5_0 = det*w[0][3]*w[1][5]*K_00*(1.0);
    const double G2_3_0_5_1 = det*w[0][3]*w[1][5]*K_10*(1.0);
    const double G2_3_0_6_0 = det*w[0][3]*w[1][6]*K_00*(1.0);
    const double G2_3_0_6_1 = det*w[0][3]*w[1][6]*K_10*(1.0);
    const double G2_3_0_7_0 = det*w[0][3]*w[1][7]*K_00*(1.0);
    const double G2_3_0_8_1 = det*w[0][3]*w[1][8]*K_10*(1.0);
    const double G2_3_0_9_0 = det*w[0][3]*w[1][9]*K_00*(1.0);
    const double G2_3_0_9_1 = det*w[0][3]*w[1][9]*K_10*(1.0);
    const double G2_3_0_10_0 = det*w[0][3]*w[1][10]*K_00*(1.0);
    const double G2_3_0_10_1 = det*w[0][3]*w[1][10]*K_10*(1.0);
    const double G2_3_0_11_0 = det*w[0][3]*w[1][11]*K_00*(1.0);
    const double G2_3_0_11_1 = det*w[0][3]*w[1][11]*K_10*(1.0);
    const double G2_4_0_0_0 = det*w[0][4]*w[1][0]*K_00*(1.0);
    const double G2_4_0_0_1 = det*w[0][4]*w[1][0]*K_10*(1.0);
    const double G2_4_0_1_0 = det*w[0][4]*w[1][1]*K_00*(1.0);
    const double G2_4_0_2_1 = det*w[0][4]*w[1][2]*K_10*(1.0);
    const double G2_4_0_3_0 = det*w[0][4]*w[1][3]*K_00*(1.0);
    const double G2_4_0_3_1 = det*w[0][4]*w[1][3]*K_10*(1.0);
    const double G2_4_0_4_0 = det*w[0][4]*w[1][4]*K_00*(1.0);
    const double G2_4_0_4_1 = det*w[0][4]*w[1][4]*K_10*(1.0);
    const double G2_4_0_5_0 = det*w[0][4]*w[1][5]*K_00*(1.0);
    const double G2_4_0_5_1 = det*w[0][4]*w[1][5]*K_10*(1.0);
    const double G2_4_0_6_0 = det*w[0][4]*w[1][6]*K_00*(1.0);
    const double G2_4_0_6_1 = det*w[0][4]*w[1][6]*K_10*(1.0);
    const double G2_4_0_7_0 = det*w[0][4]*w[1][7]*K_00*(1.0);
    const double G2_4_0_8_1 = det*w[0][4]*w[1][8]*K_10*(1.0);
    const double G2_4_0_9_0 = det*w[0][4]*w[1][9]*K_00*(1.0);
    const double G2_4_0_9_1 = det*w[0][4]*w[1][9]*K_10*(1.0);
    const double G2_4_0_10_0 = det*w[0][4]*w[1][10]*K_00*(1.0);
    const double G2_4_0_10_1 = det*w[0][4]*w[1][10]*K_10*(1.0);
    const double G2_4_0_11_0 = det*w[0][4]*w[1][11]*K_00*(1.0);
    const double G2_4_0_11_1 = det*w[0][4]*w[1][11]*K_10*(1.0);
    const double G2_5_0_0_0 = det*w[0][5]*w[1][0]*K_00*(1.0);
    const double G2_5_0_0_1 = det*w[0][5]*w[1][0]*K_10*(1.0);
    const double G2_5_0_1_0 = det*w[0][5]*w[1][1]*K_00*(1.0);
    const double G2_5_0_2_1 = det*w[0][5]*w[1][2]*K_10*(1.0);
    const double G2_5_0_3_0 = det*w[0][5]*w[1][3]*K_00*(1.0);
    const double G2_5_0_3_1 = det*w[0][5]*w[1][3]*K_10*(1.0);
    const double G2_5_0_4_0 = det*w[0][5]*w[1][4]*K_00*(1.0);
    const double G2_5_0_4_1 = det*w[0][5]*w[1][4]*K_10*(1.0);
    const double G2_5_0_5_0 = det*w[0][5]*w[1][5]*K_00*(1.0);
    const double G2_5_0_5_1 = det*w[0][5]*w[1][5]*K_10*(1.0);
    const double G2_5_0_6_0 = det*w[0][5]*w[1][6]*K_00*(1.0);
    const double G2_5_0_6_1 = det*w[0][5]*w[1][6]*K_10*(1.0);
    const double G2_5_0_7_0 = det*w[0][5]*w[1][7]*K_00*(1.0);
    const double G2_5_0_8_1 = det*w[0][5]*w[1][8]*K_10*(1.0);
    const double G2_5_0_9_0 = det*w[0][5]*w[1][9]*K_00*(1.0);
    const double G2_5_0_9_1 = det*w[0][5]*w[1][9]*K_10*(1.0);
    const double G2_5_0_10_0 = det*w[0][5]*w[1][10]*K_00*(1.0);
    const double G2_5_0_10_1 = det*w[0][5]*w[1][10]*K_10*(1.0);
    const double G2_5_0_11_0 = det*w[0][5]*w[1][11]*K_00*(1.0);
    const double G2_5_0_11_1 = det*w[0][5]*w[1][11]*K_10*(1.0);
    const double G2_6_1_0_0 = det*w[0][6]*w[1][0]*K_01*(1.0);
    const double G2_6_1_0_1 = det*w[0][6]*w[1][0]*K_11*(1.0);
    const double G2_6_1_1_0 = det*w[0][6]*w[1][1]*K_01*(1.0);
    const double G2_6_1_2_1 = det*w[0][6]*w[1][2]*K_11*(1.0);
    const double G2_6_1_3_0 = det*w[0][6]*w[1][3]*K_01*(1.0);
    const double G2_6_1_3_1 = det*w[0][6]*w[1][3]*K_11*(1.0);
    const double G2_6_1_4_0 = det*w[0][6]*w[1][4]*K_01*(1.0);
    const double G2_6_1_4_1 = det*w[0][6]*w[1][4]*K_11*(1.0);
    const double G2_6_1_5_0 = det*w[0][6]*w[1][5]*K_01*(1.0);
    const double G2_6_1_5_1 = det*w[0][6]*w[1][5]*K_11*(1.0);
    const double G2_6_1_6_0 = det*w[0][6]*w[1][6]*K_01*(1.0);
    const double G2_6_1_6_1 = det*w[0][6]*w[1][6]*K_11*(1.0);
    const double G2_6_1_7_0 = det*w[0][6]*w[1][7]*K_01*(1.0);
    const double G2_6_1_8_1 = det*w[0][6]*w[1][8]*K_11*(1.0);
    const double G2_6_1_9_0 = det*w[0][6]*w[1][9]*K_01*(1.0);
    const double G2_6_1_9_1 = det*w[0][6]*w[1][9]*K_11*(1.0);
    const double G2_6_1_10_0 = det*w[0][6]*w[1][10]*K_01*(1.0);
    const double G2_6_1_10_1 = det*w[0][6]*w[1][10]*K_11*(1.0);
    const double G2_6_1_11_0 = det*w[0][6]*w[1][11]*K_01*(1.0);
    const double G2_6_1_11_1 = det*w[0][6]*w[1][11]*K_11*(1.0);
    const double G2_7_1_0_0 = det*w[0][7]*w[1][0]*K_01*(1.0);
    const double G2_7_1_0_1 = det*w[0][7]*w[1][0]*K_11*(1.0);
    const double G2_7_1_1_0 = det*w[0][7]*w[1][1]*K_01*(1.0);
    const double G2_7_1_2_1 = det*w[0][7]*w[1][2]*K_11*(1.0);
    const double G2_7_1_3_0 = det*w[0][7]*w[1][3]*K_01*(1.0);
    const double G2_7_1_3_1 = det*w[0][7]*w[1][3]*K_11*(1.0);
    const double G2_7_1_4_0 = det*w[0][7]*w[1][4]*K_01*(1.0);
    const double G2_7_1_4_1 = det*w[0][7]*w[1][4]*K_11*(1.0);
    const double G2_7_1_5_0 = det*w[0][7]*w[1][5]*K_01*(1.0);
    const double G2_7_1_5_1 = det*w[0][7]*w[1][5]*K_11*(1.0);
    const double G2_7_1_6_0 = det*w[0][7]*w[1][6]*K_01*(1.0);
    const double G2_7_1_6_1 = det*w[0][7]*w[1][6]*K_11*(1.0);
    const double G2_7_1_7_0 = det*w[0][7]*w[1][7]*K_01*(1.0);
    const double G2_7_1_8_1 = det*w[0][7]*w[1][8]*K_11*(1.0);
    const double G2_7_1_9_0 = det*w[0][7]*w[1][9]*K_01*(1.0);
    const double G2_7_1_9_1 = det*w[0][7]*w[1][9]*K_11*(1.0);
    const double G2_7_1_10_0 = det*w[0][7]*w[1][10]*K_01*(1.0);
    const double G2_7_1_10_1 = det*w[0][7]*w[1][10]*K_11*(1.0);
    const double G2_7_1_11_0 = det*w[0][7]*w[1][11]*K_01*(1.0);
    const double G2_7_1_11_1 = det*w[0][7]*w[1][11]*K_11*(1.0);
    const double G2_8_1_0_0 = det*w[0][8]*w[1][0]*K_01*(1.0);
    const double G2_8_1_0_1 = det*w[0][8]*w[1][0]*K_11*(1.0);
    const double G2_8_1_1_0 = det*w[0][8]*w[1][1]*K_01*(1.0);
    const double G2_8_1_2_1 = det*w[0][8]*w[1][2]*K_11*(1.0);
    const double G2_8_1_3_0 = det*w[0][8]*w[1][3]*K_01*(1.0);
    const double G2_8_1_3_1 = det*w[0][8]*w[1][3]*K_11*(1.0);
    const double G2_8_1_4_0 = det*w[0][8]*w[1][4]*K_01*(1.0);
    const double G2_8_1_4_1 = det*w[0][8]*w[1][4]*K_11*(1.0);
    const double G2_8_1_5_0 = det*w[0][8]*w[1][5]*K_01*(1.0);
    const double G2_8_1_5_1 = det*w[0][8]*w[1][5]*K_11*(1.0);
    const double G2_8_1_6_0 = det*w[0][8]*w[1][6]*K_01*(1.0);
    const double G2_8_1_6_1 = det*w[0][8]*w[1][6]*K_11*(1.0);
    const double G2_8_1_7_0 = det*w[0][8]*w[1][7]*K_01*(1.0);
    const double G2_8_1_8_1 = det*w[0][8]*w[1][8]*K_11*(1.0);
    const double G2_8_1_9_0 = det*w[0][8]*w[1][9]*K_01*(1.0);
    const double G2_8_1_9_1 = det*w[0][8]*w[1][9]*K_11*(1.0);
    const double G2_8_1_10_0 = det*w[0][8]*w[1][10]*K_01*(1.0);
    const double G2_8_1_10_1 = det*w[0][8]*w[1][10]*K_11*(1.0);
    const double G2_8_1_11_0 = det*w[0][8]*w[1][11]*K_01*(1.0);
    const double G2_8_1_11_1 = det*w[0][8]*w[1][11]*K_11*(1.0);
    const double G2_9_1_0_0 = det*w[0][9]*w[1][0]*K_01*(1.0);
    const double G2_9_1_0_1 = det*w[0][9]*w[1][0]*K_11*(1.0);
    const double G2_9_1_1_0 = det*w[0][9]*w[1][1]*K_01*(1.0);
    const double G2_9_1_2_1 = det*w[0][9]*w[1][2]*K_11*(1.0);
    const double G2_9_1_3_0 = det*w[0][9]*w[1][3]*K_01*(1.0);
    const double G2_9_1_3_1 = det*w[0][9]*w[1][3]*K_11*(1.0);
    const double G2_9_1_4_0 = det*w[0][9]*w[1][4]*K_01*(1.0);
    const double G2_9_1_4_1 = det*w[0][9]*w[1][4]*K_11*(1.0);
    const double G2_9_1_5_0 = det*w[0][9]*w[1][5]*K_01*(1.0);
    const double G2_9_1_5_1 = det*w[0][9]*w[1][5]*K_11*(1.0);
    const double G2_9_1_6_0 = det*w[0][9]*w[1][6]*K_01*(1.0);
    const double G2_9_1_6_1 = det*w[0][9]*w[1][6]*K_11*(1.0);
    const double G2_9_1_7_0 = det*w[0][9]*w[1][7]*K_01*(1.0);
    const double G2_9_1_8_1 = det*w[0][9]*w[1][8]*K_11*(1.0);
    const double G2_9_1_9_0 = det*w[0][9]*w[1][9]*K_01*(1.0);
    const double G2_9_1_9_1 = det*w[0][9]*w[1][9]*K_11*(1.0);
    const double G2_9_1_10_0 = det*w[0][9]*w[1][10]*K_01*(1.0);
    const double G2_9_1_10_1 = det*w[0][9]*w[1][10]*K_11*(1.0);
    const double G2_9_1_11_0 = det*w[0][9]*w[1][11]*K_01*(1.0);
    const double G2_9_1_11_1 = det*w[0][9]*w[1][11]*K_11*(1.0);
    const double G2_10_1_0_0 = det*w[0][10]*w[1][0]*K_01*(1.0);
    const double G2_10_1_0_1 = det*w[0][10]*w[1][0]*K_11*(1.0);
    const double G2_10_1_1_0 = det*w[0][10]*w[1][1]*K_01*(1.0);
    const double G2_10_1_2_1 = det*w[0][10]*w[1][2]*K_11*(1.0);
    const double G2_10_1_3_0 = det*w[0][10]*w[1][3]*K_01*(1.0);
    const double G2_10_1_3_1 = det*w[0][10]*w[1][3]*K_11*(1.0);
    const double G2_10_1_4_0 = det*w[0][10]*w[1][4]*K_01*(1.0);
    const double G2_10_1_4_1 = det*w[0][10]*w[1][4]*K_11*(1.0);
    const double G2_10_1_5_0 = det*w[0][10]*w[1][5]*K_01*(1.0);
    const double G2_10_1_5_1 = det*w[0][10]*w[1][5]*K_11*(1.0);
    const double G2_10_1_6_0 = det*w[0][10]*w[1][6]*K_01*(1.0);
    const double G2_10_1_6_1 = det*w[0][10]*w[1][6]*K_11*(1.0);
    const double G2_10_1_7_0 = det*w[0][10]*w[1][7]*K_01*(1.0);
    const double G2_10_1_8_1 = det*w[0][10]*w[1][8]*K_11*(1.0);
    const double G2_10_1_9_0 = det*w[0][10]*w[1][9]*K_01*(1.0);
    const double G2_10_1_9_1 = det*w[0][10]*w[1][9]*K_11*(1.0);
    const double G2_10_1_10_0 = det*w[0][10]*w[1][10]*K_01*(1.0);
    const double G2_10_1_10_1 = det*w[0][10]*w[1][10]*K_11*(1.0);
    const double G2_10_1_11_0 = det*w[0][10]*w[1][11]*K_01*(1.0);
    const double G2_10_1_11_1 = det*w[0][10]*w[1][11]*K_11*(1.0);
    const double G2_11_1_0_0 = det*w[0][11]*w[1][0]*K_01*(1.0);
    const double G2_11_1_0_1 = det*w[0][11]*w[1][0]*K_11*(1.0);
    const double G2_11_1_1_0 = det*w[0][11]*w[1][1]*K_01*(1.0);
    const double G2_11_1_2_1 = det*w[0][11]*w[1][2]*K_11*(1.0);
    const double G2_11_1_3_0 = det*w[0][11]*w[1][3]*K_01*(1.0);
    const double G2_11_1_3_1 = det*w[0][11]*w[1][3]*K_11*(1.0);
    const double G2_11_1_4_0 = det*w[0][11]*w[1][4]*K_01*(1.0);
    const double G2_11_1_4_1 = det*w[0][11]*w[1][4]*K_11*(1.0);
    const double G2_11_1_5_0 = det*w[0][11]*w[1][5]*K_01*(1.0);
    const double G2_11_1_5_1 = det*w[0][11]*w[1][5]*K_11*(1.0);
    const double G2_11_1_6_0 = det*w[0][11]*w[1][6]*K_01*(1.0);
    const double G2_11_1_6_1 = det*w[0][11]*w[1][6]*K_11*(1.0);
    const double G2_11_1_7_0 = det*w[0][11]*w[1][7]*K_01*(1.0);
    const double G2_11_1_8_1 = det*w[0][11]*w[1][8]*K_11*(1.0);
    const double G2_11_1_9_0 = det*w[0][11]*w[1][9]*K_01*(1.0);
    const double G2_11_1_9_1 = det*w[0][11]*w[1][9]*K_11*(1.0);
    const double G2_11_1_10_0 = det*w[0][11]*w[1][10]*K_01*(1.0);
    const double G2_11_1_10_1 = det*w[0][11]*w[1][10]*K_11*(1.0);
    const double G2_11_1_11_0 = det*w[0][11]*w[1][11]*K_01*(1.0);
    const double G2_11_1_11_1 = det*w[0][11]*w[1][11]*K_11*(1.0);
    
    // Compute element tensor
    A[0] = 0.0119047619047619*G1_0_0 - 0.00158730158730159*G1_0_1 - 0.00158730158730159*G1_0_2 - 0.00158730158730159*G1_0_3 + 0.00476190476190477*G1_0_4 + 0.00476190476190476*G1_0_5 + 0.00238095238095238*G1_1_0 - 0.00158730158730159*G1_1_1 + 0.000396825396825397*G1_1_2 - 0.00476190476190476*G1_1_3 - 0.00158730158730159*G1_1_4 - 0.00317460317460318*G1_1_5 + 0.00238095238095238*G1_2_0 + 0.000396825396825397*G1_2_1 - 0.00158730158730159*G1_2_2 - 0.00476190476190476*G1_2_3 - 0.00317460317460318*G1_2_4 - 0.00158730158730159*G1_2_5 + 0.030952380952381*G2_0_0_0_0 + 0.0309523809523809*G2_0_0_0_1 + 0.00714285714285715*G2_0_0_1_0 + 0.00714285714285714*G2_0_0_2_1 - 0.00952380952380952*G2_0_0_3_0 - 0.00952380952380952*G2_0_0_3_1 + 0.00952380952380952*G2_0_0_4_0 - 0.0380952380952381*G2_0_0_4_1 - 0.0380952380952381*G2_0_0_5_0 + 0.00952380952380953*G2_0_0_5_1 - 0.00357142857142857*G2_1_0_0_0 - 0.00357142857142857*G2_1_0_0_1 + 0.00357142857142857*G2_1_0_1_0 - 0.00436507936507937*G2_1_0_2_1 - 0.00158730158730159*G2_1_0_3_0 + 0.00634920634920635*G2_1_0_3_1 + 0.00158730158730159*G2_1_0_4_0 + 0.00793650793650794*G2_1_0_4_1 - 0.00634920634920635*G2_1_0_5_1 - 0.00357142857142857*G2_2_0_0_0 - 0.00357142857142857*G2_2_0_0_1 - 0.00436507936507937*G2_2_0_1_0 + 0.00357142857142857*G2_2_0_2_1 + 0.00634920634920634*G2_2_0_3_0 - 0.00158730158730159*G2_2_0_3_1 - 0.00634920634920634*G2_2_0_4_0 + 0.00793650793650794*G2_2_0_5_0 + 0.00158730158730159*G2_2_0_5_1 + 0.00476190476190477*G2_3_0_0_0 + 0.00476190476190477*G2_3_0_0_1 + 0.00793650793650794*G2_3_0_1_0 + 0.00793650793650794*G2_3_0_2_1 + 0.019047619047619*G2_3_0_3_0 + 0.019047619047619*G2_3_0_3_1 - 0.0190476190476191*G2_3_0_4_0 - 0.0126984126984127*G2_3_0_4_1 - 0.0126984126984127*G2_3_0_5_0 - 0.0190476190476191*G2_3_0_5_1 + 0.0190476190476191*G2_4_0_0_0 + 0.0190476190476191*G2_4_0_0_1 + 0.00634920634920635*G2_4_0_1_0 + 0.0126984126984127*G2_4_0_2_1 + 0.0126984126984127*G2_4_0_3_0 + 0.00634920634920635*G2_4_0_3_1 - 0.0126984126984127*G2_4_0_4_0 - 0.0317460317460318*G2_4_0_4_1 - 0.0253968253968254*G2_4_0_5_0 - 0.00634920634920635*G2_4_0_5_1 + 0.019047619047619*G2_5_0_0_0 + 0.019047619047619*G2_5_0_0_1 + 0.0126984126984127*G2_5_0_1_0 + 0.00634920634920635*G2_5_0_2_1 + 0.00634920634920636*G2_5_0_3_0 + 0.0126984126984127*G2_5_0_3_1 - 0.00634920634920636*G2_5_0_4_0 - 0.0253968253968254*G2_5_0_4_1 - 0.0317460317460318*G2_5_0_5_0 - 0.0126984126984127*G2_5_0_5_1 + 0.030952380952381*G2_6_1_0_0 + 0.0309523809523809*G2_6_1_0_1 + 0.00714285714285715*G2_6_1_1_0 + 0.00714285714285714*G2_6_1_2_1 - 0.00952380952380952*G2_6_1_3_0 - 0.00952380952380952*G2_6_1_3_1 + 0.00952380952380952*G2_6_1_4_0 - 0.0380952380952381*G2_6_1_4_1 - 0.0380952380952381*G2_6_1_5_0 + 0.00952380952380953*G2_6_1_5_1 - 0.00357142857142857*G2_7_1_0_0 - 0.00357142857142857*G2_7_1_0_1 + 0.00357142857142857*G2_7_1_1_0 - 0.00436507936507937*G2_7_1_2_1 - 0.00158730158730159*G2_7_1_3_0 + 0.00634920634920635*G2_7_1_3_1 + 0.00158730158730159*G2_7_1_4_0 + 0.00793650793650794*G2_7_1_4_1 - 0.00634920634920635*G2_7_1_5_1 - 0.00357142857142857*G2_8_1_0_0 - 0.00357142857142857*G2_8_1_0_1 - 0.00436507936507937*G2_8_1_1_0 + 0.00357142857142857*G2_8_1_2_1 + 0.00634920634920634*G2_8_1_3_0 - 0.00158730158730159*G2_8_1_3_1 - 0.00634920634920634*G2_8_1_4_0 + 0.00793650793650794*G2_8_1_5_0 + 0.00158730158730159*G2_8_1_5_1 + 0.00476190476190477*G2_9_1_0_0 + 0.00476190476190477*G2_9_1_0_1 + 0.00793650793650794*G2_9_1_1_0 + 0.00793650793650794*G2_9_1_2_1 + 0.019047619047619*G2_9_1_3_0 + 0.019047619047619*G2_9_1_3_1 - 0.0190476190476191*G2_9_1_4_0 - 0.0126984126984127*G2_9_1_4_1 - 0.0126984126984127*G2_9_1_5_0 - 0.0190476190476191*G2_9_1_5_1 + 0.0190476190476191*G2_10_1_0_0 + 0.0190476190476191*G2_10_1_0_1 + 0.00634920634920635*G2_10_1_1_0 + 0.0126984126984127*G2_10_1_2_1 + 0.0126984126984127*G2_10_1_3_0 + 0.00634920634920635*G2_10_1_3_1 - 0.0126984126984127*G2_10_1_4_0 - 0.0317460317460318*G2_10_1_4_1 - 0.0253968253968254*G2_10_1_5_0 - 0.00634920634920635*G2_10_1_5_1 + 0.019047619047619*G2_11_1_0_0 + 0.019047619047619*G2_11_1_0_1 + 0.0126984126984127*G2_11_1_1_0 + 0.00634920634920635*G2_11_1_2_1 + 0.00634920634920636*G2_11_1_3_0 + 0.0126984126984127*G2_11_1_3_1 - 0.00634920634920636*G2_11_1_4_0 - 0.0253968253968254*G2_11_1_4_1 - 0.0317460317460318*G2_11_1_5_0 - 0.0126984126984127*G2_11_1_5_1;
    A[1] = -0.00158730158730159*G1_0_0 + 0.00238095238095238*G1_0_1 + 0.000396825396825397*G1_0_2 - 0.00158730158730159*G1_0_3 - 0.00476190476190476*G1_0_4 - 0.00317460317460317*G1_0_5 - 0.00158730158730159*G1_1_0 + 0.0119047619047619*G1_1_1 - 0.00158730158730159*G1_1_2 + 0.00476190476190476*G1_1_3 - 0.00158730158730159*G1_1_4 + 0.00476190476190476*G1_1_5 + 0.000396825396825397*G1_2_0 + 0.00238095238095238*G1_2_1 - 0.00158730158730158*G1_2_2 - 0.00317460317460318*G1_2_3 - 0.00476190476190476*G1_2_4 - 0.00158730158730159*G1_2_5 - 0.00357142857142857*G2_0_0_0_0 - 0.00357142857142857*G2_0_0_0_1 + 0.00357142857142857*G2_0_0_1_0 - 0.00436507936507937*G2_0_0_2_1 - 0.00158730158730159*G2_0_0_3_0 + 0.00634920634920635*G2_0_0_3_1 + 0.00158730158730159*G2_0_0_4_0 + 0.00793650793650794*G2_0_0_4_1 - 0.00634920634920635*G2_0_0_5_1 - 0.00714285714285713*G2_1_0_0_0 - 0.00714285714285714*G2_1_0_0_1 - 0.0309523809523809*G2_1_0_1_0 + 0.00714285714285713*G2_1_0_2_1 - 0.00952380952380951*G2_1_0_3_0 - 0.0476190476190476*G2_1_0_3_1 + 0.00952380952380952*G2_1_0_4_0 + 0.0380952380952381*G2_1_0_5_0 + 0.0476190476190476*G2_1_0_5_1 + 0.00436507936507936*G2_2_0_0_0 + 0.00436507936507936*G2_2_0_0_1 + 0.00357142857142857*G2_2_0_1_0 + 0.00357142857142857*G2_2_0_2_1 + 0.00634920634920634*G2_2_0_3_0 + 0.00634920634920634*G2_2_0_3_1 - 0.00634920634920634*G2_2_0_4_0 - 0.00793650793650793*G2_2_0_4_1 - 0.00793650793650793*G2_2_0_5_0 - 0.00634920634920634*G2_2_0_5_1 - 0.00634920634920634*G2_3_0_0_0 - 0.00634920634920635*G2_3_0_0_1 - 0.019047619047619*G2_3_0_1_0 + 0.0126984126984127*G2_3_0_2_1 + 0.0126984126984127*G2_3_0_3_0 - 0.019047619047619*G2_3_0_3_1 - 0.0126984126984127*G2_3_0_4_0 - 0.00634920634920635*G2_3_0_4_1 + 0.0253968253968254*G2_3_0_5_0 + 0.019047619047619*G2_3_0_5_1 - 0.00793650793650794*G2_4_0_0_0 - 0.00793650793650794*G2_4_0_0_1 - 0.00476190476190476*G2_4_0_1_0 + 0.00793650793650794*G2_4_0_2_1 + 0.019047619047619*G2_4_0_3_0 + 0.00634920634920635*G2_4_0_3_1 - 0.0190476190476191*G2_4_0_4_0 + 0.0126984126984127*G2_4_0_5_0 - 0.00634920634920635*G2_4_0_5_1 - 0.0126984126984127*G2_5_0_0_0 - 0.0126984126984127*G2_5_0_0_1 - 0.019047619047619*G2_5_0_1_0 + 0.00634920634920635*G2_5_0_2_1 + 0.00634920634920636*G2_5_0_3_0 - 0.0190476190476191*G2_5_0_3_1 - 0.00634920634920636*G2_5_0_4_0 + 0.00634920634920634*G2_5_0_4_1 + 0.0317460317460318*G2_5_0_5_0 + 0.0190476190476191*G2_5_0_5_1 - 0.00357142857142857*G2_6_1_0_0 - 0.00357142857142857*G2_6_1_0_1 + 0.00357142857142857*G2_6_1_1_0 - 0.00436507936507937*G2_6_1_2_1 - 0.00158730158730159*G2_6_1_3_0 + 0.00634920634920635*G2_6_1_3_1 + 0.00158730158730159*G2_6_1_4_0 + 0.00793650793650794*G2_6_1_4_1 - 0.00634920634920635*G2_6_1_5_1 - 0.00714285714285713*G2_7_1_0_0 - 0.00714285714285714*G2_7_1_0_1 - 0.0309523809523809*G2_7_1_1_0 + 0.00714285714285713*G2_7_1_2_1 - 0.00952380952380951*G2_7_1_3_0 - 0.0476190476190476*G2_7_1_3_1 + 0.00952380952380952*G2_7_1_4_0 + 0.0380952380952381*G2_7_1_5_0 + 0.0476190476190476*G2_7_1_5_1 + 0.00436507936507936*G2_8_1_0_0 + 0.00436507936507936*G2_8_1_0_1 + 0.00357142857142857*G2_8_1_1_0 + 0.00357142857142857*G2_8_1_2_1 + 0.00634920634920634*G2_8_1_3_0 + 0.00634920634920634*G2_8_1_3_1 - 0.00634920634920634*G2_8_1_4_0 - 0.00793650793650793*G2_8_1_4_1 - 0.00793650793650793*G2_8_1_5_0 - 0.00634920634920634*G2_8_1_5_1 - 0.00634920634920634*G2_9_1_0_0 - 0.00634920634920635*G2_9_1_0_1 - 0.019047619047619*G2_9_1_1_0 + 0.0126984126984127*G2_9_1_2_1 + 0.0126984126984127*G2_9_1_3_0 - 0.019047619047619*G2_9_1_3_1 - 0.0126984126984127*G2_9_1_4_0 - 0.00634920634920635*G2_9_1_4_1 + 0.0253968253968254*G2_9_1_5_0 + 0.019047619047619*G2_9_1_5_1 - 0.00793650793650794*G2_10_1_0_0 - 0.00793650793650794*G2_10_1_0_1 - 0.00476190476190476*G2_10_1_1_0 + 0.00793650793650794*G2_10_1_2_1 + 0.019047619047619*G2_10_1_3_0 + 0.00634920634920635*G2_10_1_3_1 - 0.0190476190476191*G2_10_1_4_0 + 0.0126984126984127*G2_10_1_5_0 - 0.00634920634920635*G2_10_1_5_1 - 0.0126984126984127*G2_11_1_0_0 - 0.0126984126984127*G2_11_1_0_1 - 0.019047619047619*G2_11_1_1_0 + 0.00634920634920635*G2_11_1_2_1 + 0.00634920634920636*G2_11_1_3_0 - 0.0190476190476191*G2_11_1_3_1 - 0.00634920634920636*G2_11_1_4_0 + 0.00634920634920634*G2_11_1_4_1 + 0.0317460317460318*G2_11_1_5_0 + 0.0190476190476191*G2_11_1_5_1;
    A[2] = -0.00158730158730159*G1_0_0 + 0.000396825396825397*G1_0_1 + 0.00238095238095238*G1_0_2 - 0.00158730158730159*G1_0_3 - 0.00317460317460318*G1_0_4 - 0.00476190476190476*G1_0_5 + 0.000396825396825397*G1_1_0 - 0.00158730158730159*G1_1_1 + 0.00238095238095238*G1_1_2 - 0.00317460317460318*G1_1_3 - 0.00158730158730159*G1_1_4 - 0.00476190476190476*G1_1_5 - 0.00158730158730159*G1_2_0 - 0.00158730158730158*G1_2_1 + 0.0119047619047619*G1_2_2 + 0.00476190476190475*G1_2_3 + 0.00476190476190476*G1_2_4 - 0.00158730158730159*G1_2_5 - 0.00357142857142857*G2_0_0_0_0 - 0.00357142857142857*G2_0_0_0_1 - 0.00436507936507937*G2_0_0_1_0 + 0.00357142857142857*G2_0_0_2_1 + 0.00634920634920634*G2_0_0_3_0 - 0.00158730158730159*G2_0_0_3_1 - 0.00634920634920634*G2_0_0_4_0 + 0.00793650793650794*G2_0_0_5_0 + 0.00158730158730159*G2_0_0_5_1 + 0.00436507936507936*G2_1_0_0_0 + 0.00436507936507936*G2_1_0_0_1 + 0.00357142857142857*G2_1_0_1_0 + 0.00357142857142857*G2_1_0_2_1 + 0.00634920634920634*G2_1_0_3_0 + 0.00634920634920634*G2_1_0_3_1 - 0.00634920634920634*G2_1_0_4_0 - 0.00793650793650793*G2_1_0_4_1 - 0.00793650793650793*G2_1_0_5_0 - 0.00634920634920634*G2_1_0_5_1 - 0.00714285714285713*G2_2_0_0_0 - 0.00714285714285712*G2_2_0_0_1 + 0.00714285714285714*G2_2_0_1_0 - 0.0309523809523809*G2_2_0_2_1 - 0.0476190476190475*G2_2_0_3_0 - 0.0095238095238095*G2_2_0_3_1 + 0.0476190476190476*G2_2_0_4_0 + 0.038095238095238*G2_2_0_4_1 + 0.00952380952380951*G2_2_0_5_1 - 0.00634920634920635*G2_3_0_0_0 - 0.00634920634920634*G2_3_0_0_1 + 0.0126984126984127*G2_3_0_1_0 - 0.019047619047619*G2_3_0_2_1 - 0.019047619047619*G2_3_0_3_0 + 0.0126984126984127*G2_3_0_3_1 + 0.019047619047619*G2_3_0_4_0 + 0.0253968253968254*G2_3_0_4_1 - 0.00634920634920635*G2_3_0_5_0 - 0.0126984126984127*G2_3_0_5_1 - 0.0126984126984127*G2_4_0_0_0 - 0.0126984126984127*G2_4_0_0_1 + 0.00634920634920635*G2_4_0_1_0 - 0.019047619047619*G2_4_0_2_1 - 0.019047619047619*G2_4_0_3_0 + 0.00634920634920636*G2_4_0_3_1 + 0.019047619047619*G2_4_0_4_0 + 0.0317460317460317*G2_4_0_4_1 + 0.00634920634920635*G2_4_0_5_0 - 0.00634920634920635*G2_4_0_5_1 - 0.00793650793650794*G2_5_0_0_0 - 0.00793650793650794*G2_5_0_0_1 + 0.00793650793650794*G2_5_0_1_0 - 0.00476190476190476*G2_5_0_2_1 + 0.00634920634920634*G2_5_0_3_0 + 0.019047619047619*G2_5_0_3_1 - 0.00634920634920635*G2_5_0_4_0 + 0.0126984126984127*G2_5_0_4_1 - 0.019047619047619*G2_5_0_5_1 - 0.00357142857142857*G2_6_1_0_0 - 0.00357142857142857*G2_6_1_0_1 - 0.00436507936507937*G2_6_1_1_0 + 0.00357142857142857*G2_6_1_2_1 + 0.00634920634920634*G2_6_1_3_0 - 0.00158730158730159*G2_6_1_3_1 - 0.00634920634920634*G2_6_1_4_0 + 0.00793650793650794*G2_6_1_5_0 + 0.00158730158730159*G2_6_1_5_1 + 0.00436507936507936*G2_7_1_0_0 + 0.00436507936507936*G2_7_1_0_1 + 0.00357142857142857*G2_7_1_1_0 + 0.00357142857142857*G2_7_1_2_1 + 0.00634920634920634*G2_7_1_3_0 + 0.00634920634920634*G2_7_1_3_1 - 0.00634920634920634*G2_7_1_4_0 - 0.00793650793650793*G2_7_1_4_1 - 0.00793650793650793*G2_7_1_5_0 - 0.00634920634920634*G2_7_1_5_1 - 0.00714285714285713*G2_8_1_0_0 - 0.00714285714285712*G2_8_1_0_1 + 0.00714285714285714*G2_8_1_1_0 - 0.0309523809523809*G2_8_1_2_1 - 0.0476190476190475*G2_8_1_3_0 - 0.0095238095238095*G2_8_1_3_1 + 0.0476190476190476*G2_8_1_4_0 + 0.038095238095238*G2_8_1_4_1 + 0.00952380952380951*G2_8_1_5_1 - 0.00634920634920635*G2_9_1_0_0 - 0.00634920634920634*G2_9_1_0_1 + 0.0126984126984127*G2_9_1_1_0 - 0.019047619047619*G2_9_1_2_1 - 0.019047619047619*G2_9_1_3_0 + 0.0126984126984127*G2_9_1_3_1 + 0.019047619047619*G2_9_1_4_0 + 0.0253968253968254*G2_9_1_4_1 - 0.00634920634920635*G2_9_1_5_0 - 0.0126984126984127*G2_9_1_5_1 - 0.0126984126984127*G2_10_1_0_0 - 0.0126984126984127*G2_10_1_0_1 + 0.00634920634920635*G2_10_1_1_0 - 0.019047619047619*G2_10_1_2_1 - 0.019047619047619*G2_10_1_3_0 + 0.00634920634920636*G2_10_1_3_1 + 0.019047619047619*G2_10_1_4_0 + 0.0317460317460317*G2_10_1_4_1 + 0.00634920634920635*G2_10_1_5_0 - 0.00634920634920635*G2_10_1_5_1 - 0.00793650793650794*G2_11_1_0_0 - 0.00793650793650794*G2_11_1_0_1 + 0.00793650793650794*G2_11_1_1_0 - 0.00476190476190476*G2_11_1_2_1 + 0.00634920634920634*G2_11_1_3_0 + 0.019047619047619*G2_11_1_3_1 - 0.00634920634920635*G2_11_1_4_0 + 0.0126984126984127*G2_11_1_4_1 - 0.019047619047619*G2_11_1_5_1;
    A[3] = -0.00158730158730159*G1_0_0 - 0.00158730158730159*G1_0_1 - 0.00158730158730159*G1_0_2 + 0.0126984126984127*G1_0_3 + 0.0126984126984127*G1_0_4 + 0.0126984126984127*G1_0_5 - 0.00476190476190476*G1_1_0 + 0.00476190476190476*G1_1_1 - 0.00317460317460318*G1_1_2 + 0.0380952380952381*G1_1_3 + 0.0126984126984127*G1_1_4 + 0.0190476190476191*G1_1_5 - 0.00476190476190476*G1_2_0 - 0.00317460317460317*G1_2_1 + 0.00476190476190475*G1_2_2 + 0.0380952380952381*G1_2_3 + 0.0190476190476191*G1_2_4 + 0.0126984126984127*G1_2_5 + 0.00476190476190477*G2_0_0_0_0 + 0.00476190476190477*G2_0_0_0_1 + 0.00793650793650794*G2_0_0_1_0 + 0.00793650793650794*G2_0_0_2_1 + 0.019047619047619*G2_0_0_3_0 + 0.019047619047619*G2_0_0_3_1 - 0.0190476190476191*G2_0_0_4_0 - 0.0126984126984127*G2_0_0_4_1 - 0.0126984126984127*G2_0_0_5_0 - 0.0190476190476191*G2_0_0_5_1 - 0.00634920634920634*G2_1_0_0_0 - 0.00634920634920635*G2_1_0_0_1 - 0.019047619047619*G2_1_0_1_0 + 0.0126984126984127*G2_1_0_2_1 + 0.0126984126984127*G2_1_0_3_0 - 0.019047619047619*G2_1_0_3_1 - 0.0126984126984127*G2_1_0_4_0 - 0.00634920634920635*G2_1_0_4_1 + 0.0253968253968254*G2_1_0_5_0 + 0.019047619047619*G2_1_0_5_1 - 0.00634920634920635*G2_2_0_0_0 - 0.00634920634920634*G2_2_0_0_1 + 0.0126984126984127*G2_2_0_1_0 - 0.019047619047619*G2_2_0_2_1 - 0.019047619047619*G2_2_0_3_0 + 0.0126984126984127*G2_2_0_3_1 + 0.019047619047619*G2_2_0_4_0 + 0.0253968253968254*G2_2_0_4_1 - 0.00634920634920635*G2_2_0_5_0 - 0.0126984126984127*G2_2_0_5_1 - 0.0380952380952381*G2_3_0_0_0 - 0.0380952380952381*G2_3_0_0_1 - 0.0634920634920634*G2_3_0_1_0 - 0.0634920634920635*G2_3_0_2_1 - 0.152380952380952*G2_3_0_3_0 - 0.152380952380952*G2_3_0_3_1 + 0.152380952380952*G2_3_0_4_0 + 0.101587301587302*G2_3_0_4_1 + 0.101587301587302*G2_3_0_5_0 + 0.152380952380952*G2_3_0_5_1 + 0.00634920634920635*G2_4_0_0_0 + 0.00634920634920636*G2_4_0_0_1 - 0.00634920634920634*G2_4_0_1_0 - 0.0317460317460318*G2_4_0_2_1 - 0.0761904761904762*G2_4_0_3_0 - 0.0507936507936508*G2_4_0_3_1 + 0.0761904761904762*G2_4_0_4_0 + 0.0253968253968254*G2_4_0_4_1 + 0.0507936507936508*G2_4_0_5_1 + 0.00634920634920635*G2_5_0_0_0 + 0.00634920634920635*G2_5_0_0_1 - 0.0317460317460317*G2_5_0_1_0 - 0.00634920634920637*G2_5_0_2_1 - 0.0507936507936508*G2_5_0_3_0 - 0.0761904761904762*G2_5_0_3_1 + 0.0507936507936508*G2_5_0_4_0 + 0.0253968253968254*G2_5_0_5_0 + 0.0761904761904762*G2_5_0_5_1 + 0.00476190476190477*G2_6_1_0_0 + 0.00476190476190477*G2_6_1_0_1 + 0.00793650793650794*G2_6_1_1_0 + 0.00793650793650794*G2_6_1_2_1 + 0.019047619047619*G2_6_1_3_0 + 0.019047619047619*G2_6_1_3_1 - 0.0190476190476191*G2_6_1_4_0 - 0.0126984126984127*G2_6_1_4_1 - 0.0126984126984127*G2_6_1_5_0 - 0.0190476190476191*G2_6_1_5_1 - 0.00634920634920634*G2_7_1_0_0 - 0.00634920634920635*G2_7_1_0_1 - 0.019047619047619*G2_7_1_1_0 + 0.0126984126984127*G2_7_1_2_1 + 0.0126984126984127*G2_7_1_3_0 - 0.019047619047619*G2_7_1_3_1 - 0.0126984126984127*G2_7_1_4_0 - 0.00634920634920635*G2_7_1_4_1 + 0.0253968253968254*G2_7_1_5_0 + 0.019047619047619*G2_7_1_5_1 - 0.00634920634920635*G2_8_1_0_0 - 0.00634920634920634*G2_8_1_0_1 + 0.0126984126984127*G2_8_1_1_0 - 0.019047619047619*G2_8_1_2_1 - 0.019047619047619*G2_8_1_3_0 + 0.0126984126984127*G2_8_1_3_1 + 0.019047619047619*G2_8_1_4_0 + 0.0253968253968254*G2_8_1_4_1 - 0.00634920634920635*G2_8_1_5_0 - 0.0126984126984127*G2_8_1_5_1 - 0.0380952380952381*G2_9_1_0_0 - 0.0380952380952381*G2_9_1_0_1 - 0.0634920634920634*G2_9_1_1_0 - 0.0634920634920635*G2_9_1_2_1 - 0.152380952380952*G2_9_1_3_0 - 0.152380952380952*G2_9_1_3_1 + 0.152380952380952*G2_9_1_4_0 + 0.101587301587302*G2_9_1_4_1 + 0.101587301587302*G2_9_1_5_0 + 0.152380952380952*G2_9_1_5_1 + 0.00634920634920635*G2_10_1_0_0 + 0.00634920634920636*G2_10_1_0_1 - 0.00634920634920634*G2_10_1_1_0 - 0.0317460317460318*G2_10_1_2_1 - 0.0761904761904762*G2_10_1_3_0 - 0.0507936507936508*G2_10_1_3_1 + 0.0761904761904762*G2_10_1_4_0 + 0.0253968253968254*G2_10_1_4_1 + 0.0507936507936508*G2_10_1_5_1 + 0.00634920634920635*G2_11_1_0_0 + 0.00634920634920635*G2_11_1_0_1 - 0.0317460317460317*G2_11_1_1_0 - 0.00634920634920637*G2_11_1_2_1 - 0.0507936507936508*G2_11_1_3_0 - 0.0761904761904762*G2_11_1_3_1 + 0.0507936507936508*G2_11_1_4_0 + 0.0253968253968254*G2_11_1_5_0 + 0.0761904761904762*G2_11_1_5_1;
    A[4] = 0.00476190476190477*G1_0_0 - 0.00476190476190476*G1_0_1 - 0.00317460317460318*G1_0_2 + 0.0126984126984127*G1_0_3 + 0.0380952380952381*G1_0_4 + 0.0190476190476191*G1_0_5 - 0.00158730158730159*G1_1_0 - 0.00158730158730159*G1_1_1 - 0.00158730158730159*G1_1_2 + 0.0126984126984127*G1_1_3 + 0.0126984126984127*G1_1_4 + 0.0126984126984127*G1_1_5 - 0.00317460317460318*G1_2_0 - 0.00476190476190476*G1_2_1 + 0.00476190476190476*G1_2_2 + 0.0190476190476191*G1_2_3 + 0.0380952380952381*G1_2_4 + 0.0126984126984127*G1_2_5 + 0.0190476190476191*G2_0_0_0_0 + 0.0190476190476191*G2_0_0_0_1 + 0.00634920634920635*G2_0_0_1_0 + 0.0126984126984127*G2_0_0_2_1 + 0.0126984126984127*G2_0_0_3_0 + 0.00634920634920635*G2_0_0_3_1 - 0.0126984126984127*G2_0_0_4_0 - 0.0317460317460318*G2_0_0_4_1 - 0.0253968253968254*G2_0_0_5_0 - 0.00634920634920635*G2_0_0_5_1 - 0.00793650793650794*G2_1_0_0_0 - 0.00793650793650794*G2_1_0_0_1 - 0.00476190476190476*G2_1_0_1_0 + 0.00793650793650794*G2_1_0_2_1 + 0.019047619047619*G2_1_0_3_0 + 0.00634920634920635*G2_1_0_3_1 - 0.0190476190476191*G2_1_0_4_0 + 0.0126984126984127*G2_1_0_5_0 - 0.00634920634920635*G2_1_0_5_1 - 0.0126984126984127*G2_2_0_0_0 - 0.0126984126984127*G2_2_0_0_1 + 0.00634920634920635*G2_2_0_1_0 - 0.019047619047619*G2_2_0_2_1 - 0.019047619047619*G2_2_0_3_0 + 0.00634920634920636*G2_2_0_3_1 + 0.019047619047619*G2_2_0_4_0 + 0.0317460317460317*G2_2_0_4_1 + 0.00634920634920635*G2_2_0_5_0 - 0.00634920634920635*G2_2_0_5_1 + 0.00634920634920635*G2_3_0_0_0 + 0.00634920634920636*G2_3_0_0_1 - 0.00634920634920634*G2_3_0_1_0 - 0.0317460317460318*G2_3_0_2_1 - 0.0761904761904762*G2_3_0_3_0 - 0.0507936507936508*G2_3_0_3_1 + 0.0761904761904763*G2_3_0_4_0 + 0.0253968253968254*G2_3_0_4_1 + 0.0507936507936508*G2_3_0_5_1 + 0.0634920634920635*G2_4_0_0_0 + 0.0634920634920635*G2_4_0_0_1 + 0.0380952380952381*G2_4_0_1_0 - 0.0634920634920635*G2_4_0_2_1 - 0.152380952380952*G2_4_0_3_0 - 0.0507936507936508*G2_4_0_3_1 + 0.152380952380953*G2_4_0_4_0 - 0.101587301587302*G2_4_0_5_0 + 0.0507936507936508*G2_4_0_5_1 + 0.0317460317460318*G2_5_0_0_0 + 0.0317460317460317*G2_5_0_0_1 - 0.00634920634920634*G2_5_0_1_0 - 0.00634920634920636*G2_5_0_2_1 - 0.0507936507936508*G2_5_0_3_0 - 0.0507936507936508*G2_5_0_3_1 + 0.0507936507936508*G2_5_0_4_0 - 0.0253968253968254*G2_5_0_4_1 - 0.0253968253968254*G2_5_0_5_0 + 0.0507936507936508*G2_5_0_5_1 + 0.0190476190476191*G2_6_1_0_0 + 0.0190476190476191*G2_6_1_0_1 + 0.00634920634920635*G2_6_1_1_0 + 0.0126984126984127*G2_6_1_2_1 + 0.0126984126984127*G2_6_1_3_0 + 0.00634920634920635*G2_6_1_3_1 - 0.0126984126984127*G2_6_1_4_0 - 0.0317460317460318*G2_6_1_4_1 - 0.0253968253968254*G2_6_1_5_0 - 0.00634920634920635*G2_6_1_5_1 - 0.00793650793650794*G2_7_1_0_0 - 0.00793650793650794*G2_7_1_0_1 - 0.00476190476190476*G2_7_1_1_0 + 0.00793650793650794*G2_7_1_2_1 + 0.019047619047619*G2_7_1_3_0 + 0.00634920634920635*G2_7_1_3_1 - 0.0190476190476191*G2_7_1_4_0 + 0.0126984126984127*G2_7_1_5_0 - 0.00634920634920635*G2_7_1_5_1 - 0.0126984126984127*G2_8_1_0_0 - 0.0126984126984127*G2_8_1_0_1 + 0.00634920634920635*G2_8_1_1_0 - 0.019047619047619*G2_8_1_2_1 - 0.019047619047619*G2_8_1_3_0 + 0.00634920634920636*G2_8_1_3_1 + 0.019047619047619*G2_8_1_4_0 + 0.0317460317460317*G2_8_1_4_1 + 0.00634920634920635*G2_8_1_5_0 - 0.00634920634920635*G2_8_1_5_1 + 0.00634920634920635*G2_9_1_0_0 + 0.00634920634920636*G2_9_1_0_1 - 0.00634920634920634*G2_9_1_1_0 - 0.0317460317460318*G2_9_1_2_1 - 0.0761904761904762*G2_9_1_3_0 - 0.0507936507936508*G2_9_1_3_1 + 0.0761904761904763*G2_9_1_4_0 + 0.0253968253968254*G2_9_1_4_1 + 0.0507936507936508*G2_9_1_5_1 + 0.0634920634920635*G2_10_1_0_0 + 0.0634920634920635*G2_10_1_0_1 + 0.0380952380952381*G2_10_1_1_0 - 0.0634920634920635*G2_10_1_2_1 - 0.152380952380952*G2_10_1_3_0 - 0.0507936507936508*G2_10_1_3_1 + 0.152380952380953*G2_10_1_4_0 - 0.101587301587302*G2_10_1_5_0 + 0.0507936507936508*G2_10_1_5_1 + 0.0317460317460318*G2_11_1_0_0 + 0.0317460317460317*G2_11_1_0_1 - 0.00634920634920634*G2_11_1_1_0 - 0.00634920634920636*G2_11_1_2_1 - 0.0507936507936508*G2_11_1_3_0 - 0.0507936507936508*G2_11_1_3_1 + 0.0507936507936508*G2_11_1_4_0 - 0.0253968253968254*G2_11_1_4_1 - 0.0253968253968254*G2_11_1_5_0 + 0.0507936507936508*G2_11_1_5_1;
    A[5] = 0.00476190476190476*G1_0_0 - 0.00317460317460317*G1_0_1 - 0.00476190476190476*G1_0_2 + 0.0126984126984127*G1_0_3 + 0.0190476190476191*G1_0_4 + 0.0380952380952381*G1_0_5 - 0.00317460317460318*G1_1_0 + 0.00476190476190476*G1_1_1 - 0.00476190476190476*G1_1_2 + 0.0190476190476191*G1_1_3 + 0.0126984126984127*G1_1_4 + 0.0380952380952381*G1_1_5 - 0.00158730158730159*G1_2_0 - 0.00158730158730159*G1_2_1 - 0.00158730158730159*G1_2_2 + 0.0126984126984127*G1_2_3 + 0.0126984126984127*G1_2_4 + 0.0126984126984127*G1_2_5 + 0.019047619047619*G2_0_0_0_0 + 0.019047619047619*G2_0_0_0_1 + 0.0126984126984127*G2_0_0_1_0 + 0.00634920634920635*G2_0_0_2_1 + 0.00634920634920636*G2_0_0_3_0 + 0.0126984126984127*G2_0_0_3_1 - 0.00634920634920636*G2_0_0_4_0 - 0.0253968253968254*G2_0_0_4_1 - 0.0317460317460318*G2_0_0_5_0 - 0.0126984126984127*G2_0_0_5_1 - 0.0126984126984127*G2_1_0_0_0 - 0.0126984126984127*G2_1_0_0_1 - 0.019047619047619*G2_1_0_1_0 + 0.00634920634920635*G2_1_0_2_1 + 0.00634920634920636*G2_1_0_3_0 - 0.0190476190476191*G2_1_0_3_1 - 0.00634920634920636*G2_1_0_4_0 + 0.00634920634920634*G2_1_0_4_1 + 0.0317460317460318*G2_1_0_5_0 + 0.0190476190476191*G2_1_0_5_1 - 0.00793650793650794*G2_2_0_0_0 - 0.00793650793650794*G2_2_0_0_1 + 0.00793650793650794*G2_2_0_1_0 - 0.00476190476190476*G2_2_0_2_1 + 0.00634920634920634*G2_2_0_3_0 + 0.019047619047619*G2_2_0_3_1 - 0.00634920634920635*G2_2_0_4_0 + 0.0126984126984127*G2_2_0_4_1 - 0.019047619047619*G2_2_0_5_1 + 0.00634920634920635*G2_3_0_0_0 + 0.00634920634920635*G2_3_0_0_1 - 0.0317460317460317*G2_3_0_1_0 - 0.00634920634920636*G2_3_0_2_1 - 0.0507936507936508*G2_3_0_3_0 - 0.0761904761904762*G2_3_0_3_1 + 0.0507936507936508*G2_3_0_4_0 + 0.0253968253968254*G2_3_0_5_0 + 0.0761904761904762*G2_3_0_5_1 + 0.0317460317460318*G2_4_0_0_0 + 0.0317460317460317*G2_4_0_0_1 - 0.00634920634920634*G2_4_0_1_0 - 0.00634920634920636*G2_4_0_2_1 - 0.0507936507936508*G2_4_0_3_0 - 0.0507936507936508*G2_4_0_3_1 + 0.0507936507936508*G2_4_0_4_0 - 0.0253968253968254*G2_4_0_4_1 - 0.0253968253968254*G2_4_0_5_0 + 0.0507936507936508*G2_4_0_5_1 + 0.0634920634920635*G2_5_0_0_0 + 0.0634920634920635*G2_5_0_0_1 - 0.0634920634920635*G2_5_0_1_0 + 0.0380952380952381*G2_5_0_2_1 - 0.0507936507936508*G2_5_0_3_0 - 0.152380952380952*G2_5_0_3_1 + 0.0507936507936508*G2_5_0_4_0 - 0.101587301587302*G2_5_0_4_1 + 0.152380952380952*G2_5_0_5_1 + 0.019047619047619*G2_6_1_0_0 + 0.019047619047619*G2_6_1_0_1 + 0.0126984126984127*G2_6_1_1_0 + 0.00634920634920635*G2_6_1_2_1 + 0.00634920634920636*G2_6_1_3_0 + 0.0126984126984127*G2_6_1_3_1 - 0.00634920634920636*G2_6_1_4_0 - 0.0253968253968254*G2_6_1_4_1 - 0.0317460317460318*G2_6_1_5_0 - 0.0126984126984127*G2_6_1_5_1 - 0.0126984126984127*G2_7_1_0_0 - 0.0126984126984127*G2_7_1_0_1 - 0.019047619047619*G2_7_1_1_0 + 0.00634920634920635*G2_7_1_2_1 + 0.00634920634920636*G2_7_1_3_0 - 0.0190476190476191*G2_7_1_3_1 - 0.00634920634920636*G2_7_1_4_0 + 0.00634920634920634*G2_7_1_4_1 + 0.0317460317460318*G2_7_1_5_0 + 0.0190476190476191*G2_7_1_5_1 - 0.00793650793650794*G2_8_1_0_0 - 0.00793650793650794*G2_8_1_0_1 + 0.00793650793650794*G2_8_1_1_0 - 0.00476190476190476*G2_8_1_2_1 + 0.00634920634920634*G2_8_1_3_0 + 0.019047619047619*G2_8_1_3_1 - 0.00634920634920635*G2_8_1_4_0 + 0.0126984126984127*G2_8_1_4_1 - 0.019047619047619*G2_8_1_5_1 + 0.00634920634920635*G2_9_1_0_0 + 0.00634920634920635*G2_9_1_0_1 - 0.0317460317460317*G2_9_1_1_0 - 0.00634920634920636*G2_9_1_2_1 - 0.0507936507936508*G2_9_1_3_0 - 0.0761904761904762*G2_9_1_3_1 + 0.0507936507936508*G2_9_1_4_0 + 0.0253968253968254*G2_9_1_5_0 + 0.0761904761904762*G2_9_1_5_1 + 0.0317460317460318*G2_10_1_0_0 + 0.0317460317460317*G2_10_1_0_1 - 0.00634920634920634*G2_10_1_1_0 - 0.00634920634920636*G2_10_1_2_1 - 0.0507936507936508*G2_10_1_3_0 - 0.0507936507936508*G2_10_1_3_1 + 0.0507936507936508*G2_10_1_4_0 - 0.0253968253968254*G2_10_1_4_1 - 0.0253968253968254*G2_10_1_5_0 + 0.0507936507936508*G2_10_1_5_1 + 0.0634920634920635*G2_11_1_0_0 + 0.0634920634920635*G2_11_1_0_1 - 0.0634920634920635*G2_11_1_1_0 + 0.0380952380952381*G2_11_1_2_1 - 0.0507936507936508*G2_11_1_3_0 - 0.152380952380952*G2_11_1_3_1 + 0.0507936507936508*G2_11_1_4_0 - 0.101587301587302*G2_11_1_4_1 + 0.152380952380952*G2_11_1_5_1;
    A[6] = 0.0119047619047619*G1_0_6 - 0.00158730158730159*G1_0_7 - 0.00158730158730159*G1_0_8 - 0.00158730158730159*G1_0_9 + 0.00476190476190477*G1_0_10 + 0.00476190476190476*G1_0_11 + 0.00238095238095238*G1_1_6 - 0.00158730158730159*G1_1_7 + 0.000396825396825397*G1_1_8 - 0.00476190476190476*G1_1_9 - 0.00158730158730159*G1_1_10 - 0.00317460317460318*G1_1_11 + 0.00238095238095238*G1_2_6 + 0.000396825396825397*G1_2_7 - 0.00158730158730159*G1_2_8 - 0.00476190476190476*G1_2_9 - 0.00317460317460318*G1_2_10 - 0.00158730158730159*G1_2_11 + 0.030952380952381*G2_0_0_6_0 + 0.0309523809523809*G2_0_0_6_1 + 0.00714285714285715*G2_0_0_7_0 + 0.00714285714285714*G2_0_0_8_1 - 0.00952380952380952*G2_0_0_9_0 - 0.00952380952380952*G2_0_0_9_1 + 0.00952380952380952*G2_0_0_10_0 - 0.0380952380952381*G2_0_0_10_1 - 0.0380952380952381*G2_0_0_11_0 + 0.00952380952380953*G2_0_0_11_1 - 0.00357142857142857*G2_1_0_6_0 - 0.00357142857142857*G2_1_0_6_1 + 0.00357142857142857*G2_1_0_7_0 - 0.00436507936507937*G2_1_0_8_1 - 0.00158730158730159*G2_1_0_9_0 + 0.00634920634920635*G2_1_0_9_1 + 0.00158730158730159*G2_1_0_10_0 + 0.00793650793650794*G2_1_0_10_1 - 0.00634920634920635*G2_1_0_11_1 - 0.00357142857142857*G2_2_0_6_0 - 0.00357142857142857*G2_2_0_6_1 - 0.00436507936507937*G2_2_0_7_0 + 0.00357142857142857*G2_2_0_8_1 + 0.00634920634920634*G2_2_0_9_0 - 0.00158730158730159*G2_2_0_9_1 - 0.00634920634920634*G2_2_0_10_0 + 0.00793650793650794*G2_2_0_11_0 + 0.00158730158730159*G2_2_0_11_1 + 0.00476190476190477*G2_3_0_6_0 + 0.00476190476190477*G2_3_0_6_1 + 0.00793650793650794*G2_3_0_7_0 + 0.00793650793650794*G2_3_0_8_1 + 0.019047619047619*G2_3_0_9_0 + 0.019047619047619*G2_3_0_9_1 - 0.0190476190476191*G2_3_0_10_0 - 0.0126984126984127*G2_3_0_10_1 - 0.0126984126984127*G2_3_0_11_0 - 0.0190476190476191*G2_3_0_11_1 + 0.0190476190476191*G2_4_0_6_0 + 0.0190476190476191*G2_4_0_6_1 + 0.00634920634920635*G2_4_0_7_0 + 0.0126984126984127*G2_4_0_8_1 + 0.0126984126984127*G2_4_0_9_0 + 0.00634920634920635*G2_4_0_9_1 - 0.0126984126984127*G2_4_0_10_0 - 0.0317460317460318*G2_4_0_10_1 - 0.0253968253968254*G2_4_0_11_0 - 0.00634920634920635*G2_4_0_11_1 + 0.019047619047619*G2_5_0_6_0 + 0.019047619047619*G2_5_0_6_1 + 0.0126984126984127*G2_5_0_7_0 + 0.00634920634920635*G2_5_0_8_1 + 0.00634920634920636*G2_5_0_9_0 + 0.0126984126984127*G2_5_0_9_1 - 0.00634920634920636*G2_5_0_10_0 - 0.0253968253968254*G2_5_0_10_1 - 0.0317460317460318*G2_5_0_11_0 - 0.0126984126984127*G2_5_0_11_1 + 0.030952380952381*G2_6_1_6_0 + 0.0309523809523809*G2_6_1_6_1 + 0.00714285714285715*G2_6_1_7_0 + 0.00714285714285714*G2_6_1_8_1 - 0.00952380952380952*G2_6_1_9_0 - 0.00952380952380952*G2_6_1_9_1 + 0.00952380952380952*G2_6_1_10_0 - 0.0380952380952381*G2_6_1_10_1 - 0.0380952380952381*G2_6_1_11_0 + 0.00952380952380953*G2_6_1_11_1 - 0.00357142857142857*G2_7_1_6_0 - 0.00357142857142857*G2_7_1_6_1 + 0.00357142857142857*G2_7_1_7_0 - 0.00436507936507937*G2_7_1_8_1 - 0.00158730158730159*G2_7_1_9_0 + 0.00634920634920635*G2_7_1_9_1 + 0.00158730158730159*G2_7_1_10_0 + 0.00793650793650794*G2_7_1_10_1 - 0.00634920634920635*G2_7_1_11_1 - 0.00357142857142857*G2_8_1_6_0 - 0.00357142857142857*G2_8_1_6_1 - 0.00436507936507937*G2_8_1_7_0 + 0.00357142857142857*G2_8_1_8_1 + 0.00634920634920634*G2_8_1_9_0 - 0.00158730158730159*G2_8_1_9_1 - 0.00634920634920634*G2_8_1_10_0 + 0.00793650793650794*G2_8_1_11_0 + 0.00158730158730159*G2_8_1_11_1 + 0.00476190476190477*G2_9_1_6_0 + 0.00476190476190477*G2_9_1_6_1 + 0.00793650793650794*G2_9_1_7_0 + 0.00793650793650794*G2_9_1_8_1 + 0.019047619047619*G2_9_1_9_0 + 0.019047619047619*G2_9_1_9_1 - 0.0190476190476191*G2_9_1_10_0 - 0.0126984126984127*G2_9_1_10_1 - 0.0126984126984127*G2_9_1_11_0 - 0.0190476190476191*G2_9_1_11_1 + 0.0190476190476191*G2_10_1_6_0 + 0.0190476190476191*G2_10_1_6_1 + 0.00634920634920635*G2_10_1_7_0 + 0.0126984126984127*G2_10_1_8_1 + 0.0126984126984127*G2_10_1_9_0 + 0.00634920634920635*G2_10_1_9_1 - 0.0126984126984127*G2_10_1_10_0 - 0.0317460317460318*G2_10_1_10_1 - 0.0253968253968254*G2_10_1_11_0 - 0.00634920634920635*G2_10_1_11_1 + 0.019047619047619*G2_11_1_6_0 + 0.019047619047619*G2_11_1_6_1 + 0.0126984126984127*G2_11_1_7_0 + 0.00634920634920635*G2_11_1_8_1 + 0.00634920634920636*G2_11_1_9_0 + 0.0126984126984127*G2_11_1_9_1 - 0.00634920634920636*G2_11_1_10_0 - 0.0253968253968254*G2_11_1_10_1 - 0.0317460317460318*G2_11_1_11_0 - 0.0126984126984127*G2_11_1_11_1;
    A[7] = -0.00158730158730159*G1_0_6 + 0.00238095238095238*G1_0_7 + 0.000396825396825397*G1_0_8 - 0.00158730158730159*G1_0_9 - 0.00476190476190476*G1_0_10 - 0.00317460317460317*G1_0_11 - 0.00158730158730159*G1_1_6 + 0.0119047619047619*G1_1_7 - 0.00158730158730159*G1_1_8 + 0.00476190476190476*G1_1_9 - 0.00158730158730159*G1_1_10 + 0.00476190476190476*G1_1_11 + 0.000396825396825397*G1_2_6 + 0.00238095238095238*G1_2_7 - 0.00158730158730158*G1_2_8 - 0.00317460317460318*G1_2_9 - 0.00476190476190476*G1_2_10 - 0.00158730158730159*G1_2_11 - 0.00357142857142857*G2_0_0_6_0 - 0.00357142857142857*G2_0_0_6_1 + 0.00357142857142857*G2_0_0_7_0 - 0.00436507936507937*G2_0_0_8_1 - 0.00158730158730159*G2_0_0_9_0 + 0.00634920634920635*G2_0_0_9_1 + 0.00158730158730159*G2_0_0_10_0 + 0.00793650793650794*G2_0_0_10_1 - 0.00634920634920635*G2_0_0_11_1 - 0.00714285714285713*G2_1_0_6_0 - 0.00714285714285714*G2_1_0_6_1 - 0.0309523809523809*G2_1_0_7_0 + 0.00714285714285713*G2_1_0_8_1 - 0.00952380952380951*G2_1_0_9_0 - 0.0476190476190476*G2_1_0_9_1 + 0.00952380952380952*G2_1_0_10_0 + 0.0380952380952381*G2_1_0_11_0 + 0.0476190476190476*G2_1_0_11_1 + 0.00436507936507936*G2_2_0_6_0 + 0.00436507936507936*G2_2_0_6_1 + 0.00357142857142857*G2_2_0_7_0 + 0.00357142857142857*G2_2_0_8_1 + 0.00634920634920634*G2_2_0_9_0 + 0.00634920634920634*G2_2_0_9_1 - 0.00634920634920634*G2_2_0_10_0 - 0.00793650793650793*G2_2_0_10_1 - 0.00793650793650793*G2_2_0_11_0 - 0.00634920634920634*G2_2_0_11_1 - 0.00634920634920634*G2_3_0_6_0 - 0.00634920634920635*G2_3_0_6_1 - 0.019047619047619*G2_3_0_7_0 + 0.0126984126984127*G2_3_0_8_1 + 0.0126984126984127*G2_3_0_9_0 - 0.019047619047619*G2_3_0_9_1 - 0.0126984126984127*G2_3_0_10_0 - 0.00634920634920635*G2_3_0_10_1 + 0.0253968253968254*G2_3_0_11_0 + 0.019047619047619*G2_3_0_11_1 - 0.00793650793650794*G2_4_0_6_0 - 0.00793650793650794*G2_4_0_6_1 - 0.00476190476190476*G2_4_0_7_0 + 0.00793650793650794*G2_4_0_8_1 + 0.019047619047619*G2_4_0_9_0 + 0.00634920634920635*G2_4_0_9_1 - 0.0190476190476191*G2_4_0_10_0 + 0.0126984126984127*G2_4_0_11_0 - 0.00634920634920635*G2_4_0_11_1 - 0.0126984126984127*G2_5_0_6_0 - 0.0126984126984127*G2_5_0_6_1 - 0.019047619047619*G2_5_0_7_0 + 0.00634920634920635*G2_5_0_8_1 + 0.00634920634920636*G2_5_0_9_0 - 0.0190476190476191*G2_5_0_9_1 - 0.00634920634920636*G2_5_0_10_0 + 0.00634920634920634*G2_5_0_10_1 + 0.0317460317460318*G2_5_0_11_0 + 0.0190476190476191*G2_5_0_11_1 - 0.00357142857142857*G2_6_1_6_0 - 0.00357142857142857*G2_6_1_6_1 + 0.00357142857142857*G2_6_1_7_0 - 0.00436507936507937*G2_6_1_8_1 - 0.00158730158730159*G2_6_1_9_0 + 0.00634920634920635*G2_6_1_9_1 + 0.00158730158730159*G2_6_1_10_0 + 0.00793650793650794*G2_6_1_10_1 - 0.00634920634920635*G2_6_1_11_1 - 0.00714285714285713*G2_7_1_6_0 - 0.00714285714285714*G2_7_1_6_1 - 0.0309523809523809*G2_7_1_7_0 + 0.00714285714285713*G2_7_1_8_1 - 0.00952380952380951*G2_7_1_9_0 - 0.0476190476190476*G2_7_1_9_1 + 0.00952380952380952*G2_7_1_10_0 + 0.0380952380952381*G2_7_1_11_0 + 0.0476190476190476*G2_7_1_11_1 + 0.00436507936507936*G2_8_1_6_0 + 0.00436507936507936*G2_8_1_6_1 + 0.00357142857142857*G2_8_1_7_0 + 0.00357142857142857*G2_8_1_8_1 + 0.00634920634920634*G2_8_1_9_0 + 0.00634920634920634*G2_8_1_9_1 - 0.00634920634920634*G2_8_1_10_0 - 0.00793650793650793*G2_8_1_10_1 - 0.00793650793650793*G2_8_1_11_0 - 0.00634920634920634*G2_8_1_11_1 - 0.00634920634920634*G2_9_1_6_0 - 0.00634920634920635*G2_9_1_6_1 - 0.019047619047619*G2_9_1_7_0 + 0.0126984126984127*G2_9_1_8_1 + 0.0126984126984127*G2_9_1_9_0 - 0.019047619047619*G2_9_1_9_1 - 0.0126984126984127*G2_9_1_10_0 - 0.00634920634920635*G2_9_1_10_1 + 0.0253968253968254*G2_9_1_11_0 + 0.019047619047619*G2_9_1_11_1 - 0.00793650793650794*G2_10_1_6_0 - 0.00793650793650794*G2_10_1_6_1 - 0.00476190476190476*G2_10_1_7_0 + 0.00793650793650794*G2_10_1_8_1 + 0.019047619047619*G2_10_1_9_0 + 0.00634920634920635*G2_10_1_9_1 - 0.0190476190476191*G2_10_1_10_0 + 0.0126984126984127*G2_10_1_11_0 - 0.00634920634920635*G2_10_1_11_1 - 0.0126984126984127*G2_11_1_6_0 - 0.0126984126984127*G2_11_1_6_1 - 0.019047619047619*G2_11_1_7_0 + 0.00634920634920635*G2_11_1_8_1 + 0.00634920634920636*G2_11_1_9_0 - 0.0190476190476191*G2_11_1_9_1 - 0.00634920634920636*G2_11_1_10_0 + 0.00634920634920634*G2_11_1_10_1 + 0.0317460317460318*G2_11_1_11_0 + 0.0190476190476191*G2_11_1_11_1;
    A[8] = -0.00158730158730159*G1_0_6 + 0.000396825396825397*G1_0_7 + 0.00238095238095238*G1_0_8 - 0.00158730158730159*G1_0_9 - 0.00317460317460318*G1_0_10 - 0.00476190476190476*G1_0_11 + 0.000396825396825397*G1_1_6 - 0.00158730158730159*G1_1_7 + 0.00238095238095238*G1_1_8 - 0.00317460317460318*G1_1_9 - 0.00158730158730159*G1_1_10 - 0.00476190476190476*G1_1_11 - 0.00158730158730159*G1_2_6 - 0.00158730158730158*G1_2_7 + 0.0119047619047619*G1_2_8 + 0.00476190476190475*G1_2_9 + 0.00476190476190476*G1_2_10 - 0.00158730158730159*G1_2_11 - 0.00357142857142857*G2_0_0_6_0 - 0.00357142857142857*G2_0_0_6_1 - 0.00436507936507937*G2_0_0_7_0 + 0.00357142857142857*G2_0_0_8_1 + 0.00634920634920634*G2_0_0_9_0 - 0.00158730158730159*G2_0_0_9_1 - 0.00634920634920634*G2_0_0_10_0 + 0.00793650793650794*G2_0_0_11_0 + 0.00158730158730159*G2_0_0_11_1 + 0.00436507936507936*G2_1_0_6_0 + 0.00436507936507936*G2_1_0_6_1 + 0.00357142857142857*G2_1_0_7_0 + 0.00357142857142857*G2_1_0_8_1 + 0.00634920634920634*G2_1_0_9_0 + 0.00634920634920634*G2_1_0_9_1 - 0.00634920634920634*G2_1_0_10_0 - 0.00793650793650793*G2_1_0_10_1 - 0.00793650793650793*G2_1_0_11_0 - 0.00634920634920634*G2_1_0_11_1 - 0.00714285714285713*G2_2_0_6_0 - 0.00714285714285712*G2_2_0_6_1 + 0.00714285714285714*G2_2_0_7_0 - 0.0309523809523809*G2_2_0_8_1 - 0.0476190476190475*G2_2_0_9_0 - 0.0095238095238095*G2_2_0_9_1 + 0.0476190476190476*G2_2_0_10_0 + 0.038095238095238*G2_2_0_10_1 + 0.00952380952380951*G2_2_0_11_1 - 0.00634920634920635*G2_3_0_6_0 - 0.00634920634920634*G2_3_0_6_1 + 0.0126984126984127*G2_3_0_7_0 - 0.019047619047619*G2_3_0_8_1 - 0.019047619047619*G2_3_0_9_0 + 0.0126984126984127*G2_3_0_9_1 + 0.019047619047619*G2_3_0_10_0 + 0.0253968253968254*G2_3_0_10_1 - 0.00634920634920635*G2_3_0_11_0 - 0.0126984126984127*G2_3_0_11_1 - 0.0126984126984127*G2_4_0_6_0 - 0.0126984126984127*G2_4_0_6_1 + 0.00634920634920635*G2_4_0_7_0 - 0.019047619047619*G2_4_0_8_1 - 0.019047619047619*G2_4_0_9_0 + 0.00634920634920636*G2_4_0_9_1 + 0.019047619047619*G2_4_0_10_0 + 0.0317460317460317*G2_4_0_10_1 + 0.00634920634920635*G2_4_0_11_0 - 0.00634920634920635*G2_4_0_11_1 - 0.00793650793650794*G2_5_0_6_0 - 0.00793650793650794*G2_5_0_6_1 + 0.00793650793650794*G2_5_0_7_0 - 0.00476190476190476*G2_5_0_8_1 + 0.00634920634920634*G2_5_0_9_0 + 0.019047619047619*G2_5_0_9_1 - 0.00634920634920635*G2_5_0_10_0 + 0.0126984126984127*G2_5_0_10_1 - 0.019047619047619*G2_5_0_11_1 - 0.00357142857142857*G2_6_1_6_0 - 0.00357142857142857*G2_6_1_6_1 - 0.00436507936507937*G2_6_1_7_0 + 0.00357142857142857*G2_6_1_8_1 + 0.00634920634920634*G2_6_1_9_0 - 0.00158730158730159*G2_6_1_9_1 - 0.00634920634920634*G2_6_1_10_0 + 0.00793650793650794*G2_6_1_11_0 + 0.00158730158730159*G2_6_1_11_1 + 0.00436507936507936*G2_7_1_6_0 + 0.00436507936507936*G2_7_1_6_1 + 0.00357142857142857*G2_7_1_7_0 + 0.00357142857142857*G2_7_1_8_1 + 0.00634920634920634*G2_7_1_9_0 + 0.00634920634920634*G2_7_1_9_1 - 0.00634920634920634*G2_7_1_10_0 - 0.00793650793650793*G2_7_1_10_1 - 0.00793650793650793*G2_7_1_11_0 - 0.00634920634920634*G2_7_1_11_1 - 0.00714285714285713*G2_8_1_6_0 - 0.00714285714285712*G2_8_1_6_1 + 0.00714285714285714*G2_8_1_7_0 - 0.0309523809523809*G2_8_1_8_1 - 0.0476190476190475*G2_8_1_9_0 - 0.0095238095238095*G2_8_1_9_1 + 0.0476190476190476*G2_8_1_10_0 + 0.038095238095238*G2_8_1_10_1 + 0.00952380952380951*G2_8_1_11_1 - 0.00634920634920635*G2_9_1_6_0 - 0.00634920634920634*G2_9_1_6_1 + 0.0126984126984127*G2_9_1_7_0 - 0.019047619047619*G2_9_1_8_1 - 0.019047619047619*G2_9_1_9_0 + 0.0126984126984127*G2_9_1_9_1 + 0.019047619047619*G2_9_1_10_0 + 0.0253968253968254*G2_9_1_10_1 - 0.00634920634920635*G2_9_1_11_0 - 0.0126984126984127*G2_9_1_11_1 - 0.0126984126984127*G2_10_1_6_0 - 0.0126984126984127*G2_10_1_6_1 + 0.00634920634920635*G2_10_1_7_0 - 0.019047619047619*G2_10_1_8_1 - 0.019047619047619*G2_10_1_9_0 + 0.00634920634920636*G2_10_1_9_1 + 0.019047619047619*G2_10_1_10_0 + 0.0317460317460317*G2_10_1_10_1 + 0.00634920634920635*G2_10_1_11_0 - 0.00634920634920635*G2_10_1_11_1 - 0.00793650793650794*G2_11_1_6_0 - 0.00793650793650794*G2_11_1_6_1 + 0.00793650793650794*G2_11_1_7_0 - 0.00476190476190476*G2_11_1_8_1 + 0.00634920634920634*G2_11_1_9_0 + 0.019047619047619*G2_11_1_9_1 - 0.00634920634920635*G2_11_1_10_0 + 0.0126984126984127*G2_11_1_10_1 - 0.019047619047619*G2_11_1_11_1;
    A[9] = -0.00158730158730159*G1_0_6 - 0.00158730158730159*G1_0_7 - 0.00158730158730159*G1_0_8 + 0.0126984126984127*G1_0_9 + 0.0126984126984127*G1_0_10 + 0.0126984126984127*G1_0_11 - 0.00476190476190476*G1_1_6 + 0.00476190476190476*G1_1_7 - 0.00317460317460318*G1_1_8 + 0.0380952380952381*G1_1_9 + 0.0126984126984127*G1_1_10 + 0.0190476190476191*G1_1_11 - 0.00476190476190476*G1_2_6 - 0.00317460317460317*G1_2_7 + 0.00476190476190475*G1_2_8 + 0.0380952380952381*G1_2_9 + 0.0190476190476191*G1_2_10 + 0.0126984126984127*G1_2_11 + 0.00476190476190477*G2_0_0_6_0 + 0.00476190476190477*G2_0_0_6_1 + 0.00793650793650794*G2_0_0_7_0 + 0.00793650793650794*G2_0_0_8_1 + 0.019047619047619*G2_0_0_9_0 + 0.019047619047619*G2_0_0_9_1 - 0.0190476190476191*G2_0_0_10_0 - 0.0126984126984127*G2_0_0_10_1 - 0.0126984126984127*G2_0_0_11_0 - 0.0190476190476191*G2_0_0_11_1 - 0.00634920634920634*G2_1_0_6_0 - 0.00634920634920635*G2_1_0_6_1 - 0.019047619047619*G2_1_0_7_0 + 0.0126984126984127*G2_1_0_8_1 + 0.0126984126984127*G2_1_0_9_0 - 0.019047619047619*G2_1_0_9_1 - 0.0126984126984127*G2_1_0_10_0 - 0.00634920634920635*G2_1_0_10_1 + 0.0253968253968254*G2_1_0_11_0 + 0.019047619047619*G2_1_0_11_1 - 0.00634920634920635*G2_2_0_6_0 - 0.00634920634920634*G2_2_0_6_1 + 0.0126984126984127*G2_2_0_7_0 - 0.019047619047619*G2_2_0_8_1 - 0.019047619047619*G2_2_0_9_0 + 0.0126984126984127*G2_2_0_9_1 + 0.019047619047619*G2_2_0_10_0 + 0.0253968253968254*G2_2_0_10_1 - 0.00634920634920635*G2_2_0_11_0 - 0.0126984126984127*G2_2_0_11_1 - 0.0380952380952381*G2_3_0_6_0 - 0.0380952380952381*G2_3_0_6_1 - 0.0634920634920634*G2_3_0_7_0 - 0.0634920634920635*G2_3_0_8_1 - 0.152380952380952*G2_3_0_9_0 - 0.152380952380952*G2_3_0_9_1 + 0.152380952380952*G2_3_0_10_0 + 0.101587301587302*G2_3_0_10_1 + 0.101587301587302*G2_3_0_11_0 + 0.152380952380952*G2_3_0_11_1 + 0.00634920634920635*G2_4_0_6_0 + 0.00634920634920636*G2_4_0_6_1 - 0.00634920634920634*G2_4_0_7_0 - 0.0317460317460318*G2_4_0_8_1 - 0.0761904761904762*G2_4_0_9_0 - 0.0507936507936508*G2_4_0_9_1 + 0.0761904761904762*G2_4_0_10_0 + 0.0253968253968254*G2_4_0_10_1 + 0.0507936507936508*G2_4_0_11_1 + 0.00634920634920635*G2_5_0_6_0 + 0.00634920634920635*G2_5_0_6_1 - 0.0317460317460317*G2_5_0_7_0 - 0.00634920634920637*G2_5_0_8_1 - 0.0507936507936508*G2_5_0_9_0 - 0.0761904761904762*G2_5_0_9_1 + 0.0507936507936508*G2_5_0_10_0 + 0.0253968253968254*G2_5_0_11_0 + 0.0761904761904762*G2_5_0_11_1 + 0.00476190476190477*G2_6_1_6_0 + 0.00476190476190477*G2_6_1_6_1 + 0.00793650793650794*G2_6_1_7_0 + 0.00793650793650794*G2_6_1_8_1 + 0.019047619047619*G2_6_1_9_0 + 0.019047619047619*G2_6_1_9_1 - 0.0190476190476191*G2_6_1_10_0 - 0.0126984126984127*G2_6_1_10_1 - 0.0126984126984127*G2_6_1_11_0 - 0.0190476190476191*G2_6_1_11_1 - 0.00634920634920634*G2_7_1_6_0 - 0.00634920634920635*G2_7_1_6_1 - 0.019047619047619*G2_7_1_7_0 + 0.0126984126984127*G2_7_1_8_1 + 0.0126984126984127*G2_7_1_9_0 - 0.019047619047619*G2_7_1_9_1 - 0.0126984126984127*G2_7_1_10_0 - 0.00634920634920635*G2_7_1_10_1 + 0.0253968253968254*G2_7_1_11_0 + 0.019047619047619*G2_7_1_11_1 - 0.00634920634920635*G2_8_1_6_0 - 0.00634920634920634*G2_8_1_6_1 + 0.0126984126984127*G2_8_1_7_0 - 0.019047619047619*G2_8_1_8_1 - 0.019047619047619*G2_8_1_9_0 + 0.0126984126984127*G2_8_1_9_1 + 0.019047619047619*G2_8_1_10_0 + 0.0253968253968254*G2_8_1_10_1 - 0.00634920634920635*G2_8_1_11_0 - 0.0126984126984127*G2_8_1_11_1 - 0.0380952380952381*G2_9_1_6_0 - 0.0380952380952381*G2_9_1_6_1 - 0.0634920634920634*G2_9_1_7_0 - 0.0634920634920635*G2_9_1_8_1 - 0.152380952380952*G2_9_1_9_0 - 0.152380952380952*G2_9_1_9_1 + 0.152380952380952*G2_9_1_10_0 + 0.101587301587302*G2_9_1_10_1 + 0.101587301587302*G2_9_1_11_0 + 0.152380952380952*G2_9_1_11_1 + 0.00634920634920635*G2_10_1_6_0 + 0.00634920634920636*G2_10_1_6_1 - 0.00634920634920634*G2_10_1_7_0 - 0.0317460317460318*G2_10_1_8_1 - 0.0761904761904762*G2_10_1_9_0 - 0.0507936507936508*G2_10_1_9_1 + 0.0761904761904762*G2_10_1_10_0 + 0.0253968253968254*G2_10_1_10_1 + 0.0507936507936508*G2_10_1_11_1 + 0.00634920634920635*G2_11_1_6_0 + 0.00634920634920635*G2_11_1_6_1 - 0.0317460317460317*G2_11_1_7_0 - 0.00634920634920637*G2_11_1_8_1 - 0.0507936507936508*G2_11_1_9_0 - 0.0761904761904762*G2_11_1_9_1 + 0.0507936507936508*G2_11_1_10_0 + 0.0253968253968254*G2_11_1_11_0 + 0.0761904761904762*G2_11_1_11_1;
    A[10] = 0.00476190476190477*G1_0_6 - 0.00476190476190476*G1_0_7 - 0.00317460317460318*G1_0_8 + 0.0126984126984127*G1_0_9 + 0.0380952380952381*G1_0_10 + 0.0190476190476191*G1_0_11 - 0.00158730158730159*G1_1_6 - 0.00158730158730159*G1_1_7 - 0.00158730158730159*G1_1_8 + 0.0126984126984127*G1_1_9 + 0.0126984126984127*G1_1_10 + 0.0126984126984127*G1_1_11 - 0.00317460317460318*G1_2_6 - 0.00476190476190476*G1_2_7 + 0.00476190476190476*G1_2_8 + 0.0190476190476191*G1_2_9 + 0.0380952380952381*G1_2_10 + 0.0126984126984127*G1_2_11 + 0.0190476190476191*G2_0_0_6_0 + 0.0190476190476191*G2_0_0_6_1 + 0.00634920634920635*G2_0_0_7_0 + 0.0126984126984127*G2_0_0_8_1 + 0.0126984126984127*G2_0_0_9_0 + 0.00634920634920635*G2_0_0_9_1 - 0.0126984126984127*G2_0_0_10_0 - 0.0317460317460318*G2_0_0_10_1 - 0.0253968253968254*G2_0_0_11_0 - 0.00634920634920635*G2_0_0_11_1 - 0.00793650793650794*G2_1_0_6_0 - 0.00793650793650794*G2_1_0_6_1 - 0.00476190476190476*G2_1_0_7_0 + 0.00793650793650794*G2_1_0_8_1 + 0.019047619047619*G2_1_0_9_0 + 0.00634920634920635*G2_1_0_9_1 - 0.0190476190476191*G2_1_0_10_0 + 0.0126984126984127*G2_1_0_11_0 - 0.00634920634920635*G2_1_0_11_1 - 0.0126984126984127*G2_2_0_6_0 - 0.0126984126984127*G2_2_0_6_1 + 0.00634920634920635*G2_2_0_7_0 - 0.019047619047619*G2_2_0_8_1 - 0.019047619047619*G2_2_0_9_0 + 0.00634920634920636*G2_2_0_9_1 + 0.019047619047619*G2_2_0_10_0 + 0.0317460317460317*G2_2_0_10_1 + 0.00634920634920635*G2_2_0_11_0 - 0.00634920634920635*G2_2_0_11_1 + 0.00634920634920635*G2_3_0_6_0 + 0.00634920634920636*G2_3_0_6_1 - 0.00634920634920634*G2_3_0_7_0 - 0.0317460317460318*G2_3_0_8_1 - 0.0761904761904762*G2_3_0_9_0 - 0.0507936507936508*G2_3_0_9_1 + 0.0761904761904763*G2_3_0_10_0 + 0.0253968253968254*G2_3_0_10_1 + 0.0507936507936508*G2_3_0_11_1 + 0.0634920634920635*G2_4_0_6_0 + 0.0634920634920635*G2_4_0_6_1 + 0.0380952380952381*G2_4_0_7_0 - 0.0634920634920635*G2_4_0_8_1 - 0.152380952380952*G2_4_0_9_0 - 0.0507936507936508*G2_4_0_9_1 + 0.152380952380953*G2_4_0_10_0 - 0.101587301587302*G2_4_0_11_0 + 0.0507936507936508*G2_4_0_11_1 + 0.0317460317460318*G2_5_0_6_0 + 0.0317460317460317*G2_5_0_6_1 - 0.00634920634920634*G2_5_0_7_0 - 0.00634920634920636*G2_5_0_8_1 - 0.0507936507936508*G2_5_0_9_0 - 0.0507936507936508*G2_5_0_9_1 + 0.0507936507936508*G2_5_0_10_0 - 0.0253968253968254*G2_5_0_10_1 - 0.0253968253968254*G2_5_0_11_0 + 0.0507936507936508*G2_5_0_11_1 + 0.0190476190476191*G2_6_1_6_0 + 0.0190476190476191*G2_6_1_6_1 + 0.00634920634920635*G2_6_1_7_0 + 0.0126984126984127*G2_6_1_8_1 + 0.0126984126984127*G2_6_1_9_0 + 0.00634920634920635*G2_6_1_9_1 - 0.0126984126984127*G2_6_1_10_0 - 0.0317460317460318*G2_6_1_10_1 - 0.0253968253968254*G2_6_1_11_0 - 0.00634920634920635*G2_6_1_11_1 - 0.00793650793650794*G2_7_1_6_0 - 0.00793650793650794*G2_7_1_6_1 - 0.00476190476190476*G2_7_1_7_0 + 0.00793650793650794*G2_7_1_8_1 + 0.019047619047619*G2_7_1_9_0 + 0.00634920634920635*G2_7_1_9_1 - 0.0190476190476191*G2_7_1_10_0 + 0.0126984126984127*G2_7_1_11_0 - 0.00634920634920635*G2_7_1_11_1 - 0.0126984126984127*G2_8_1_6_0 - 0.0126984126984127*G2_8_1_6_1 + 0.00634920634920635*G2_8_1_7_0 - 0.019047619047619*G2_8_1_8_1 - 0.019047619047619*G2_8_1_9_0 + 0.00634920634920636*G2_8_1_9_1 + 0.019047619047619*G2_8_1_10_0 + 0.0317460317460317*G2_8_1_10_1 + 0.00634920634920635*G2_8_1_11_0 - 0.00634920634920635*G2_8_1_11_1 + 0.00634920634920635*G2_9_1_6_0 + 0.00634920634920636*G2_9_1_6_1 - 0.00634920634920634*G2_9_1_7_0 - 0.0317460317460318*G2_9_1_8_1 - 0.0761904761904762*G2_9_1_9_0 - 0.0507936507936508*G2_9_1_9_1 + 0.0761904761904763*G2_9_1_10_0 + 0.0253968253968254*G2_9_1_10_1 + 0.0507936507936508*G2_9_1_11_1 + 0.0634920634920635*G2_10_1_6_0 + 0.0634920634920635*G2_10_1_6_1 + 0.0380952380952381*G2_10_1_7_0 - 0.0634920634920635*G2_10_1_8_1 - 0.152380952380952*G2_10_1_9_0 - 0.0507936507936508*G2_10_1_9_1 + 0.152380952380953*G2_10_1_10_0 - 0.101587301587302*G2_10_1_11_0 + 0.0507936507936508*G2_10_1_11_1 + 0.0317460317460318*G2_11_1_6_0 + 0.0317460317460317*G2_11_1_6_1 - 0.00634920634920634*G2_11_1_7_0 - 0.00634920634920636*G2_11_1_8_1 - 0.0507936507936508*G2_11_1_9_0 - 0.0507936507936508*G2_11_1_9_1 + 0.0507936507936508*G2_11_1_10_0 - 0.0253968253968254*G2_11_1_10_1 - 0.0253968253968254*G2_11_1_11_0 + 0.0507936507936508*G2_11_1_11_1;
    A[11] = 0.00476190476190476*G1_0_6 - 0.00317460317460317*G1_0_7 - 0.00476190476190476*G1_0_8 + 0.0126984126984127*G1_0_9 + 0.0190476190476191*G1_0_10 + 0.0380952380952381*G1_0_11 - 0.00317460317460318*G1_1_6 + 0.00476190476190476*G1_1_7 - 0.00476190476190476*G1_1_8 + 0.0190476190476191*G1_1_9 + 0.0126984126984127*G1_1_10 + 0.0380952380952381*G1_1_11 - 0.00158730158730159*G1_2_6 - 0.00158730158730159*G1_2_7 - 0.00158730158730159*G1_2_8 + 0.0126984126984127*G1_2_9 + 0.0126984126984127*G1_2_10 + 0.0126984126984127*G1_2_11 + 0.019047619047619*G2_0_0_6_0 + 0.019047619047619*G2_0_0_6_1 + 0.0126984126984127*G2_0_0_7_0 + 0.00634920634920635*G2_0_0_8_1 + 0.00634920634920636*G2_0_0_9_0 + 0.0126984126984127*G2_0_0_9_1 - 0.00634920634920636*G2_0_0_10_0 - 0.0253968253968254*G2_0_0_10_1 - 0.0317460317460318*G2_0_0_11_0 - 0.0126984126984127*G2_0_0_11_1 - 0.0126984126984127*G2_1_0_6_0 - 0.0126984126984127*G2_1_0_6_1 - 0.019047619047619*G2_1_0_7_0 + 0.00634920634920635*G2_1_0_8_1 + 0.00634920634920636*G2_1_0_9_0 - 0.0190476190476191*G2_1_0_9_1 - 0.00634920634920636*G2_1_0_10_0 + 0.00634920634920634*G2_1_0_10_1 + 0.0317460317460318*G2_1_0_11_0 + 0.0190476190476191*G2_1_0_11_1 - 0.00793650793650794*G2_2_0_6_0 - 0.00793650793650794*G2_2_0_6_1 + 0.00793650793650794*G2_2_0_7_0 - 0.00476190476190476*G2_2_0_8_1 + 0.00634920634920634*G2_2_0_9_0 + 0.019047619047619*G2_2_0_9_1 - 0.00634920634920635*G2_2_0_10_0 + 0.0126984126984127*G2_2_0_10_1 - 0.019047619047619*G2_2_0_11_1 + 0.00634920634920635*G2_3_0_6_0 + 0.00634920634920635*G2_3_0_6_1 - 0.0317460317460317*G2_3_0_7_0 - 0.00634920634920636*G2_3_0_8_1 - 0.0507936507936508*G2_3_0_9_0 - 0.0761904761904762*G2_3_0_9_1 + 0.0507936507936508*G2_3_0_10_0 + 0.0253968253968254*G2_3_0_11_0 + 0.0761904761904762*G2_3_0_11_1 + 0.0317460317460318*G2_4_0_6_0 + 0.0317460317460317*G2_4_0_6_1 - 0.00634920634920634*G2_4_0_7_0 - 0.00634920634920636*G2_4_0_8_1 - 0.0507936507936508*G2_4_0_9_0 - 0.0507936507936508*G2_4_0_9_1 + 0.0507936507936508*G2_4_0_10_0 - 0.0253968253968254*G2_4_0_10_1 - 0.0253968253968254*G2_4_0_11_0 + 0.0507936507936508*G2_4_0_11_1 + 0.0634920634920635*G2_5_0_6_0 + 0.0634920634920635*G2_5_0_6_1 - 0.0634920634920635*G2_5_0_7_0 + 0.0380952380952381*G2_5_0_8_1 - 0.0507936507936508*G2_5_0_9_0 - 0.152380952380952*G2_5_0_9_1 + 0.0507936507936508*G2_5_0_10_0 - 0.101587301587302*G2_5_0_10_1 + 0.152380952380952*G2_5_0_11_1 + 0.019047619047619*G2_6_1_6_0 + 0.019047619047619*G2_6_1_6_1 + 0.0126984126984127*G2_6_1_7_0 + 0.00634920634920635*G2_6_1_8_1 + 0.00634920634920636*G2_6_1_9_0 + 0.0126984126984127*G2_6_1_9_1 - 0.00634920634920636*G2_6_1_10_0 - 0.0253968253968254*G2_6_1_10_1 - 0.0317460317460318*G2_6_1_11_0 - 0.0126984126984127*G2_6_1_11_1 - 0.0126984126984127*G2_7_1_6_0 - 0.0126984126984127*G2_7_1_6_1 - 0.019047619047619*G2_7_1_7_0 + 0.00634920634920635*G2_7_1_8_1 + 0.00634920634920636*G2_7_1_9_0 - 0.0190476190476191*G2_7_1_9_1 - 0.00634920634920636*G2_7_1_10_0 + 0.00634920634920634*G2_7_1_10_1 + 0.0317460317460318*G2_7_1_11_0 + 0.0190476190476191*G2_7_1_11_1 - 0.00793650793650794*G2_8_1_6_0 - 0.00793650793650794*G2_8_1_6_1 + 0.00793650793650794*G2_8_1_7_0 - 0.00476190476190476*G2_8_1_8_1 + 0.00634920634920634*G2_8_1_9_0 + 0.019047619047619*G2_8_1_9_1 - 0.00634920634920635*G2_8_1_10_0 + 0.0126984126984127*G2_8_1_10_1 - 0.019047619047619*G2_8_1_11_1 + 0.00634920634920635*G2_9_1_6_0 + 0.00634920634920635*G2_9_1_6_1 - 0.0317460317460317*G2_9_1_7_0 - 0.00634920634920636*G2_9_1_8_1 - 0.0507936507936508*G2_9_1_9_0 - 0.0761904761904762*G2_9_1_9_1 + 0.0507936507936508*G2_9_1_10_0 + 0.0253968253968254*G2_9_1_11_0 + 0.0761904761904762*G2_9_1_11_1 + 0.0317460317460318*G2_10_1_6_0 + 0.0317460317460317*G2_10_1_6_1 - 0.00634920634920634*G2_10_1_7_0 - 0.00634920634920636*G2_10_1_8_1 - 0.0507936507936508*G2_10_1_9_0 - 0.0507936507936508*G2_10_1_9_1 + 0.0507936507936508*G2_10_1_10_0 - 0.0253968253968254*G2_10_1_10_1 - 0.0253968253968254*G2_10_1_11_0 + 0.0507936507936508*G2_10_1_11_1 + 0.0634920634920635*G2_11_1_6_0 + 0.0634920634920635*G2_11_1_6_1 - 0.0634920634920635*G2_11_1_7_0 + 0.0380952380952381*G2_11_1_8_1 - 0.0507936507936508*G2_11_1_9_0 - 0.152380952380952*G2_11_1_9_1 + 0.0507936507936508*G2_11_1_10_0 - 0.101587301587302*G2_11_1_10_1 + 0.152380952380952*G2_11_1_11_1;
  }

  /// Tabulate the tensor for the contribution from a local cell
  /// using the specified reference cell quadrature points/weights
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c,
                               unsigned int num_quadrature_points,
                               const double * const * quadrature_points,
                               const double* quadrature_weights) const
  {
    throw std::runtime_error("Quadrature version of tabulate_tensor not available when using the FFC tensor representation.");
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class ffc_form_099e36ad95026610968141786bab4cf814ce0535_form_0: public ufc::form
{
public:

  /// Constructor
  ffc_form_099e36ad95026610968141786bab4cf814ce0535_form_0() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_099e36ad95026610968141786bab4cf814ce0535_form_0()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "Form([Integral(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 2, 2, None), 0), MultiIndex((Index(0),), {Index(0): 2})), Indexed(Sum(ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(ComponentTensor(Product(FloatValue(-3.5891962715001281e-141, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 2, 2, None), 0), MultiIndex((Index(1),), {Index(1): 2}))), MultiIndex((Index(1),), {Index(1): 2})), MultiIndex((Index(2),), {Index(2): 2}))), MultiIndex((Index(2),), {Index(2): 2})), Sum(ComponentTensor(Product(Coefficient(FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None), 2), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 2, 2, None), 0), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(ComponentTensor(IndexSum(Product(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 2, 2, None), 0), MultiIndex((Index(4),), {Index(4): 2})), Indexed(ComponentTensor(Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 2, 2, None), 1), MultiIndex((Index(5),), {Index(5): 2})), MultiIndex((Index(6),), {Index(6): 2})), MultiIndex((Index(6), Index(5)), {Index(5): 2, Index(6): 2})), MultiIndex((Index(7), Index(4)), {Index(7): 2, Index(4): 2}))), MultiIndex((Index(4),), {Index(4): 2})), MultiIndex((Index(7),), {Index(7): 2})), MultiIndex((Index(8),), {Index(8): 2}))), MultiIndex((Index(8),), {Index(8): 2})))), MultiIndex((Index(0),), {Index(0): 2}))), MultiIndex((Index(0),), {Index(0): 2})), Measure('cell', 0, None))])";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 1;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 3;
  }

  /// Return the number of cell domains
  virtual unsigned int num_cell_domains() const
  {
    return 1;
  }

  /// Return the number of exterior facet domains
  virtual unsigned int num_exterior_facet_domains() const
  {
    return 0;
  }

  /// Return the number of interior facet domains
  virtual unsigned int num_interior_facet_domains() const
  {
    return 0;
  }

  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_099e36ad95026610968141786bab4cf814ce0535_finite_element_2();
        break;
      }
    case 1:
      {
        return new ffc_form_099e36ad95026610968141786bab4cf814ce0535_finite_element_2();
        break;
      }
    case 2:
      {
        return new ffc_form_099e36ad95026610968141786bab4cf814ce0535_finite_element_2();
        break;
      }
    case 3:
      {
        return new ffc_form_099e36ad95026610968141786bab4cf814ce0535_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_099e36ad95026610968141786bab4cf814ce0535_dofmap_2();
        break;
      }
    case 1:
      {
        return new ffc_form_099e36ad95026610968141786bab4cf814ce0535_dofmap_2();
        break;
      }
    case 2:
      {
        return new ffc_form_099e36ad95026610968141786bab4cf814ce0535_dofmap_2();
        break;
      }
    case 3:
      {
        return new ffc_form_099e36ad95026610968141786bab4cf814ce0535_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_099e36ad95026610968141786bab4cf814ce0535_cell_integral_0_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

#endif
